{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,oKAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"~/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { initTRPC } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { db } from \"~/server/db\";\nimport { auth } from \"@clerk/nextjs/server\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  const user = await auth()\n  return {\n    auth: user,\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\nconst isAuth = t.middleware(({ next, ctx }) => {\n  if (!ctx.auth?.userId) {\n    throw new Error(\"Unauthorized\");\n  }\n  return next({ ctx: { ...ctx, auth: ctx.auth! as Required<typeof ctx.auth> } });\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\nexport const protectedProcedure = t.procedure.use(isAuth);"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AACD;AACA;AACA;AAEA;AACA;;;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,MAAM,OAAO,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;IACtB,OAAO;QACL,MAAM;QACN,IAAA,qHAAA,CAAA,KAAE;QACF,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,mKAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,4IAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,uIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AAEA,MAAM,SAAS,EAAE,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE;IACxC,IAAI,CAAC,IAAI,IAAI,EAAE,QAAQ;QACrB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,KAAK;QAAE,KAAK;YAAE,GAAG,GAAG;YAAE,MAAM,IAAI,IAAI;QAA+B;IAAE;AAC9E;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AACxC,MAAM,qBAAqB,EAAE,SAAS,CAAC,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/server/api/routers/account.ts"],"sourcesContent":["import { db } from \"~/server/db\";\nimport { createTRPCRouter, protectedProcedure } from \"../trpc\";\nimport { z } from \"zod\";\nimport type { Prisma } from \"@prisma/client\";\n\nexport const authoriseAccountAccess = async (accountId: string, userId: string) => {\n    const account = await db.account.findUnique({\n        where: {\n            id: accountId,\n            userId\n        },\n        select: {\n            id: true,\n            emailAddress: true,\n            name: true,\n            accessToken: true,\n        }\n    })\n    if (!account) {\n        throw new Error(\"Account not found\")\n    }\n    return account;\n}\n\nexport const accountRouter = createTRPCRouter({\n    getAccounts: protectedProcedure.query(async ({ ctx }) => {\n        return await ctx.db.account.findMany({\n            where: {\n                userId: ctx.auth.userId,\n            }, select: {\n                id: true, emailAddress: true, name: true\n            }\n        })\n    }),\n    getNumThreads: protectedProcedure.input(z.object({\n        accountId: z.string(),\n        tab: z.enum([\"inbox\", \"drafts\", \"sent\"]),\n    })).query(async ({ ctx, input }) => {\n        const account = await authoriseAccountAccess(input.accountId, ctx.auth.userId)\n\n        let filter: Prisma.ThreadWhereInput = {\n            accountId: account.id,\n        }\n\n        if (input.tab === \"inbox\") {\n            filter.inboxStatus = true\n        } else if (input.tab === \"drafts\") {\n            filter.draftStatus = true\n        } else if (input.tab === \"sent\") {\n            filter.sentStatus = true\n        }\n\n        return await ctx.db.thread.count({\n            where: filter\n        })\n    }),\n    getThreads: protectedProcedure.input(z.object({\n        accountId: z.string(),\n        tab: z.enum([\"inbox\", \"drafts\", \"sent\"]),\n        done: z.boolean()\n    })).query(async ({ ctx, input }) => {\n        const account = await authoriseAccountAccess(input.accountId, ctx.auth.userId)\n\n        let filters: Prisma.ThreadWhereInput = {\n            accountId: account.id,\n        }\n\n        if (input.tab === \"inbox\") {\n            filters.inboxStatus = true\n        } else if (input.tab === \"drafts\") {\n            filters.draftStatus = true\n        } else if (input.tab === \"sent\") {\n            filters.sentStatus = true\n        }\n        \n        filters.done = {\n            equals: input.done\n        }\n\n        return await ctx.db.thread.findMany({\n            where: filters,\n            include: {\n                emails: {\n                    orderBy: {\n                        sentAt: \"asc\"\n                    },\n                    select: {\n                        from: true,\n                        body: true,\n                        bodySnippet: true,\n                        emailLabel: true,\n                        subject: true,\n                        sysLabels: true,\n                        id: true,\n                        sentAt: true,\n                    }\n                }\n            },\n            take: 15,\n            orderBy: {\n                lastMessageDate: \"desc\"\n            }\n        })\n    })\n})"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGO,MAAM,yBAAyB,OAAO,WAAmB;IAC5D,MAAM,UAAU,MAAM,qHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,UAAU,CAAC;QACxC,OAAO;YACH,IAAI;YACJ;QACJ;QACA,QAAQ;YACJ,IAAI;YACJ,cAAc;YACd,MAAM;YACN,aAAa;QACjB;IACJ;IACA,IAAI,CAAC,SAAS;QACV,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACX;AAEO,MAAM,gBAAgB,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC1C,aAAa,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAChD,OAAO,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;YACjC,OAAO;gBACH,QAAQ,IAAI,IAAI,CAAC,MAAM;YAC3B;YAAG,QAAQ;gBACP,IAAI;gBAAM,cAAc;gBAAM,MAAM;YACxC;QACJ;IACJ;IACA,eAAe,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC7C,WAAW,oKAAA,CAAA,IAAC,CAAC,MAAM;QACnB,KAAK,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAS;YAAU;SAAO;IAC3C,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC3B,MAAM,UAAU,MAAM,uBAAuB,MAAM,SAAS,EAAE,IAAI,IAAI,CAAC,MAAM;QAE7E,IAAI,SAAkC;YAClC,WAAW,QAAQ,EAAE;QACzB;QAEA,IAAI,MAAM,GAAG,KAAK,SAAS;YACvB,OAAO,WAAW,GAAG;QACzB,OAAO,IAAI,MAAM,GAAG,KAAK,UAAU;YAC/B,OAAO,WAAW,GAAG;QACzB,OAAO,IAAI,MAAM,GAAG,KAAK,QAAQ;YAC7B,OAAO,UAAU,GAAG;QACxB;QAEA,OAAO,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;YAC7B,OAAO;QACX;IACJ;IACA,YAAY,8HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC1C,WAAW,oKAAA,CAAA,IAAC,CAAC,MAAM;QACnB,KAAK,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAS;YAAU;SAAO;QACvC,MAAM,oKAAA,CAAA,IAAC,CAAC,OAAO;IACnB,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC3B,MAAM,UAAU,MAAM,uBAAuB,MAAM,SAAS,EAAE,IAAI,IAAI,CAAC,MAAM;QAE7E,IAAI,UAAmC;YACnC,WAAW,QAAQ,EAAE;QACzB;QAEA,IAAI,MAAM,GAAG,KAAK,SAAS;YACvB,QAAQ,WAAW,GAAG;QAC1B,OAAO,IAAI,MAAM,GAAG,KAAK,UAAU;YAC/B,QAAQ,WAAW,GAAG;QAC1B,OAAO,IAAI,MAAM,GAAG,KAAK,QAAQ;YAC7B,QAAQ,UAAU,GAAG;QACzB;QAEA,QAAQ,IAAI,GAAG;YACX,QAAQ,MAAM,IAAI;QACtB;QAEA,OAAO,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;YAChC,OAAO;YACP,SAAS;gBACL,QAAQ;oBACJ,SAAS;wBACL,QAAQ;oBACZ;oBACA,QAAQ;wBACJ,MAAM;wBACN,MAAM;wBACN,aAAa;wBACb,YAAY;wBACZ,SAAS;wBACT,WAAW;wBACX,IAAI;wBACJ,QAAQ;oBACZ;gBACJ;YACJ;YACA,MAAM;YACN,SAAS;gBACL,iBAAiB;YACrB;QACJ;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/server/api/root.ts"],"sourcesContent":["import { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\nimport { accountRouter } from \"./routers/account\";\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  account: accountRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);"],"names":[],"mappings":";;;;AAAA;AACA;;;AAMO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,SAAS,4IAAA,CAAA,gBAAa;AACxB;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { type NextRequest } from \"next/server\";\n\nimport { env } from \"~/env\";\nimport { appRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */\nconst createContext = async (req: NextRequest) => {\n  return createTRPCContext({\n    headers: req.headers,\n  });\n};\n\nconst handler = (req: NextRequest) =>\n  fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext: () => createContext(req),\n    onError:\n      env.NODE_ENV === \"development\"\n        ? ({ path, error }) => {\n            console.error(\n              `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`,\n            );\n          }\n        : undefined,\n  });\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;AACA;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,yKAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;YACd,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;QAE/D,IACA;IACR","debugId":null}}]
}