{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/trpc/react.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TRPCReactProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call TRPCReactProvider() from the server but TRPCReactProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/trpc/react.tsx <module evaluation>\",\n    \"TRPCReactProvider\",\n);\nexport const api = registerClientReference(\n    function() { throw new Error(\"Attempted to call api() from the server but api is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/trpc/react.tsx <module evaluation>\",\n    \"api\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,oBAAoB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,oDACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,oDACA","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/trpc/react.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TRPCReactProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call TRPCReactProvider() from the server but TRPCReactProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/trpc/react.tsx\",\n    \"TRPCReactProvider\",\n);\nexport const api = registerClientReference(\n    function() { throw new Error(\"Attempted to call api() from the server but api is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/trpc/react.tsx\",\n    \"api\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,oBAAoB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,gCACA;AAEG,MAAM,MAAM,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACrC;IAAa,MAAM,IAAI,MAAM;AAAsN,GACnP,gCACA","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/app/layout.tsx"],"sourcesContent":["import \"~/styles/globals.css\";\n\nimport { type Metadata } from \"next\";\nimport { TRPCReactProvider } from \"~/trpc/react\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\n\nexport const metadata: Metadata = {\n  title: \"Create T3 App\",\n  description: \"Generated by create-t3-app\",\n  icons: [{ rel: \"icon\", url: \"/favicon.ico\" }],\n};\n\nconst geist = Geist({\n  subsets: [\"latin\"],\n  variable: \"--font-geist-sans\",\n});\n\nexport default function RootLayout({\n  children,\n}: Readonly<{ children: React.ReactNode }>) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\" className={`${geist.variable} antialiased`}>\n        <body>\n          <TRPCReactProvider>{children}</TRPCReactProvider>\n        </body>\n      </html>\n    </ClerkProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;;;;;AAEO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;IACb,OAAO;QAAC;YAAE,KAAK;YAAQ,KAAK;QAAe;KAAE;AAC/C;AAEA,MAAM,QAAQ,MAAM;IAClB,SAAS;QAAC;KAAQ;IAClB,UAAU;AACZ;AAEe,SAAS,WAAW,EACjC,QAAQ,EACgC;IACxC,qBACE,8OAAC,yKAAA,CAAA,gBAAa;kBACZ,cAAA,8OAAC;YAAK,MAAK;YAAK,WAAW,GAAG,MAAM,QAAQ,CAAC,YAAY,CAAC;sBACxD,cAAA,8OAAC;0BACC,cAAA,8OAAC,qHAAA,CAAA,oBAAiB;8BAAE;;;;;;;;;;;;;;;;;;;;;AAK9B","debugId":null}}]
}