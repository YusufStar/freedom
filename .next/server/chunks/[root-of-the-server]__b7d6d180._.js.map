{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/lib/aurinko.ts"],"sourcesContent":["\"use server\";\n\nimport { auth } from \"@clerk/nextjs/server\";\nimport axios from \"axios\";\nimport type { EmailMessage } from \"./types\";\n\nexport const getAurinkoAuthUrl = async (serviceType: \"Google\" | \"Office365\" | \"iCloud\" | \"IMAP\") => {\n    const { userId } = await auth()\n    if (!userId) throw new Error(\"Unauthorized\");\n\n    // IMAP için farklı scope'lar kullan\n    const scopes = serviceType === \"IMAP\"\n        ? \"Mail.Read Mail.ReadWrite Mail.Send\"\n        : \"Mail.Read Mail.ReadWrite Mail.Send Mail.Drafts Mail.All\";\n\n    const params = new URLSearchParams({\n        clientId: process.env.AURINKO_CLIENT_ID!,\n        serviceType,\n        scopes,\n        responseType: \"code\",\n        returnUrl: `${process.env.NEXT_PUBLIC_URL}/api/aurinko/callback`,\n    })\n\n    return `https://api.aurinko.io/v1/auth/authorize?${params.toString()}`\n}\n\nexport const exchangeAurinkoCodeForToken = async (code: string) => {\n    try {\n        const response = await axios.post(`https://api.aurinko.io/v1/auth/token/${code}`, {}, {\n            auth: {\n                username: process.env.AURINKO_CLIENT_ID!,\n                password: process.env.AURINKO_CLIENT_SECRET!\n            }\n        })\n\n        return response.data as {\n            accountId: number;\n            accessToken: string;\n            userId: string;\n            userSession: string;\n        }\n    } catch (error) {\n        if (axios.isAxiosError(error)) {\n            console.error(\"Aurinko API Error:\", error.response?.data)\n        }\n\n        console.error(\"Aurinko API Error:\", error)\n    }\n}\n\nexport const getAccountDetails = async (accessToken: string) => {\n    try {\n        const response = await axios.get(`https://api.aurinko.io/v1/account`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        })\n\n        return {\n            email: response.data.email,\n            name: response.data.name || response.data.email || \"Unknown\"\n        } as {\n            email: string;\n            name: string;\n        }\n    } catch (error) {\n        if (axios.isAxiosError(error)) {\n            console.error(\"Aurinko API Error:\", error.response?.data)\n        } else {\n            console.error(\"Aurinko API Error:\", error)\n        }\n\n        throw error\n    }\n}\n\nexport const getEmailDetails = async (accessToken: string, emailId: string) => {\n    try {\n        const response = await axios.get<EmailMessage>(`https://api.aurinko.io/v1/email/messages/${emailId}`, {\n            params: {\n                loadInlines: true\n            },\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            }\n        });\n        return response.data\n    } catch (error) {\n        if (axios.isAxiosError(error)) {\n            console.error('Error fetching email details:', error.response?.data);\n        } else {\n            console.error('Unexpected error fetching email details:', error);\n        }\n        throw error;\n    }\n}\n\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;;;;;;AAGO,MAAM,oBAAoB,OAAO;IACpC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAE7B,oCAAoC;IACpC,MAAM,SAAS,gBAAgB,SACzB,uCACA;IAEN,MAAM,SAAS,IAAI,gBAAgB;QAC/B,UAAU,QAAQ,GAAG,CAAC,iBAAiB;QACvC;QACA;QACA,cAAc;QACd,WAAW,6DAA+B,qBAAqB,CAAC;IACpE;IAEA,OAAO,CAAC,yCAAyC,EAAE,OAAO,QAAQ,IAAI;AAC1E;AAEO,MAAM,8BAA8B,OAAO;IAC9C,IAAI;QACA,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,CAAC,qCAAqC,EAAE,MAAM,EAAE,CAAC,GAAG;YAClF,MAAM;gBACF,UAAU,QAAQ,GAAG,CAAC,iBAAiB;gBACvC,UAAU,QAAQ,GAAG,CAAC,qBAAqB;YAC/C;QACJ;QAEA,OAAO,SAAS,IAAI;IAMxB,EAAE,OAAO,OAAO;QACZ,IAAI,uIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC3B,QAAQ,KAAK,CAAC,sBAAsB,MAAM,QAAQ,EAAE;QACxD;QAEA,QAAQ,KAAK,CAAC,sBAAsB;IACxC;AACJ;AAEO,MAAM,oBAAoB,OAAO;IACpC,IAAI;QACA,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,iCAAiC,CAAC,EAAE;YAClE,SAAS;gBACL,eAAe,CAAC,OAAO,EAAE,aAAa;YAC1C;QACJ;QAEA,OAAO;YACH,OAAO,SAAS,IAAI,CAAC,KAAK;YAC1B,MAAM,SAAS,IAAI,CAAC,IAAI,IAAI,SAAS,IAAI,CAAC,KAAK,IAAI;QACvD;IAIJ,EAAE,OAAO,OAAO;QACZ,IAAI,uIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC3B,QAAQ,KAAK,CAAC,sBAAsB,MAAM,QAAQ,EAAE;QACxD,OAAO;YACH,QAAQ,KAAK,CAAC,sBAAsB;QACxC;QAEA,MAAM;IACV;AACJ;AAEO,MAAM,kBAAkB,OAAO,aAAqB;IACvD,IAAI;QACA,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAe,CAAC,yCAAyC,EAAE,SAAS,EAAE;YAClG,QAAQ;gBACJ,aAAa;YACjB;YACA,SAAS;gBACL,iBAAiB,CAAC,OAAO,EAAE,aAAa;YAC5C;QACJ;QACA,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAO;QACZ,IAAI,uIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC3B,QAAQ,KAAK,CAAC,iCAAiC,MAAM,QAAQ,EAAE;QACnE,OAAO;YACH,QAAQ,KAAK,CAAC,4CAA4C;QAC9D;QACA,MAAM;IACV;AACJ;;;IAzFa;IAoBA;IAwBA;IA0BA;;AAtEA,iPAAA;AAoBA,iPAAA;AAwBA,iPAAA;AA0BA,iPAAA","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,oKAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"~/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufstar/Desktop/freedom/src/app/api/aurinko/callback/route.ts"],"sourcesContent":["// /api/aurinko/callback\n\nimport { waitUntil } from \"@vercel/functions\";\nimport { auth } from \"@clerk/nextjs/server\"\nimport { NextRequest, NextResponse } from \"next/server\"\nimport { exchangeAurinkoCodeForToken, getAccountDetails } from \"~/lib/aurinko\";\nimport { db } from \"~/server/db\";\nimport axios from \"axios\";\n\nexport const GET = async (req: NextRequest) => {\n    const { userId } = await auth()\n    if (!userId) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n\n    const params = req.nextUrl.searchParams;\n    const status = params.get(\"status\");\n    if (status !== \"success\") return NextResponse.json({ error: \"Failed to link account\" }, { status: 400 });\n\n    const code = params.get(\"code\");\n    if (!code) return NextResponse.json({ error: \"No code provided\" }, { status: 400 });\n    const token = await exchangeAurinkoCodeForToken(code)\n    if (!token) return NextResponse.json({ error: \"Failed to exchange code for token\" }, { status: 400 });\n\n    const accountDetails = await getAccountDetails(token.accessToken)\n\n    await db.account.upsert({\n        where: {\n            id: token.accountId.toString()\n        },\n        update: {\n            accessToken: token.accessToken,\n        },\n        create: {\n            id: token.accountId.toString(),\n            userId: userId,\n            accessToken: token.accessToken,\n            emailAddress: accountDetails.email,\n            name: accountDetails.name\n        }\n    })\n\n    // trigger initial sync endpoint with delay to allow account initialization\n    waitUntil(\n        (async () => {\n            try {\n                // Wait a bit before triggering sync to allow account to initialize\n                console.log('Waiting 5 seconds before triggering initial sync...');\n                await new Promise(resolve => setTimeout(resolve, 5000));\n                \n                const response = await axios.post(`${process.env.NEXT_PUBLIC_URL}/api/initial-sync`, {\n                    accountId: token.accountId.toString(),\n                    userId\n                });\n                \n                console.log(\"Initial sync triggered successfully\", response.data);\n            } catch (error) {\n                console.error(\"Failed to trigger initial sync\", error);\n                if (axios.isAxiosError(error)) {\n                    console.error(\"Response data:\", error.response?.data);\n                }\n            }\n        })()\n    )\n\n    return NextResponse.redirect(new URL(\"/email\", req.url))\n}"],"names":[],"mappings":"AAAA,wBAAwB;;;;AAExB;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,MAAM,MAAM,OAAO;IACtB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,qLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAe,GAAG;QAAE,QAAQ;IAAI;IAE/E,MAAM,SAAS,IAAI,OAAO,CAAC,YAAY;IACvC,MAAM,SAAS,OAAO,GAAG,CAAC;IAC1B,IAAI,WAAW,WAAW,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAyB,GAAG;QAAE,QAAQ;IAAI;IAEtG,MAAM,OAAO,OAAO,GAAG,CAAC;IACxB,IAAI,CAAC,MAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAmB,GAAG;QAAE,QAAQ;IAAI;IACjF,MAAM,QAAQ,MAAM,CAAA,GAAA,uHAAA,CAAA,8BAA2B,AAAD,EAAE;IAChD,IAAI,CAAC,OAAO,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAoC,GAAG;QAAE,QAAQ;IAAI;IAEnG,MAAM,iBAAiB,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD,EAAE,MAAM,WAAW;IAEhE,MAAM,qHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,MAAM,CAAC;QACpB,OAAO;YACH,IAAI,MAAM,SAAS,CAAC,QAAQ;QAChC;QACA,QAAQ;YACJ,aAAa,MAAM,WAAW;QAClC;QACA,QAAQ;YACJ,IAAI,MAAM,SAAS,CAAC,QAAQ;YAC5B,QAAQ;YACR,aAAa,MAAM,WAAW;YAC9B,cAAc,eAAe,KAAK;YAClC,MAAM,eAAe,IAAI;QAC7B;IACJ;IAEA,2EAA2E;IAC3E,CAAA,GAAA,gJAAA,CAAA,YAAS,AAAD,EACJ,CAAC;QACG,IAAI;YACA,mEAAmE;YACnE,QAAQ,GAAG,CAAC;YACZ,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;YAEjD,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,6DAA+B,iBAAiB,CAAC,EAAE;gBACjF,WAAW,MAAM,SAAS,CAAC,QAAQ;gBACnC;YACJ;YAEA,QAAQ,GAAG,CAAC,uCAAuC,SAAS,IAAI;QACpE,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,kCAAkC;YAChD,IAAI,uIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;gBAC3B,QAAQ,KAAK,CAAC,kBAAkB,MAAM,QAAQ,EAAE;YACpD;QACJ;IACJ,CAAC;IAGL,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;AAC1D","debugId":null}}]
}