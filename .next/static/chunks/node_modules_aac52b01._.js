(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/next/dist/compiled/client-only/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
}}),
"[project]/node_modules/@radix-ui/primitive/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// packages/core/primitive/src/primitive.tsx
__turbopack_context__.s({
    "composeEventHandlers": (()=>composeEventHandlers)
});
function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
    return function handleEvent(event) {
        originalEventHandler?.(event);
        if (checkForDefaultPrevented === false || !event.defaultPrevented) {
            return ourEventHandler?.(event);
        }
    };
}
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-compose-refs/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// packages/react/compose-refs/src/compose-refs.tsx
__turbopack_context__.s({
    "composeRefs": (()=>composeRefs),
    "useComposedRefs": (()=>useComposedRefs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
function setRef(ref, value) {
    if (typeof ref === "function") {
        return ref(value);
    } else if (ref !== null && ref !== void 0) {
        ref.current = value;
    }
}
function composeRefs(...refs) {
    return (node)=>{
        let hasCleanup = false;
        const cleanups = refs.map((ref)=>{
            const cleanup = setRef(ref, node);
            if (!hasCleanup && typeof cleanup == "function") {
                hasCleanup = true;
            }
            return cleanup;
        });
        if (hasCleanup) {
            return ()=>{
                for(let i = 0; i < cleanups.length; i++){
                    const cleanup = cleanups[i];
                    if (typeof cleanup == "function") {
                        cleanup();
                    } else {
                        setRef(refs[i], null);
                    }
                }
            };
        }
    };
}
function useComposedRefs(...refs) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])(composeRefs(...refs), refs);
}
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-context/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// packages/react/context/src/create-context.tsx
__turbopack_context__.s({
    "createContext": (()=>createContext2),
    "createContextScope": (()=>createContextScope)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
;
;
function createContext2(rootComponentName, defaultContext) {
    const Context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(defaultContext);
    const Provider = (props)=>{
        const { children, ...context } = props;
        const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])({
            "createContext2.Provider.useMemo[value]": ()=>context
        }["createContext2.Provider.useMemo[value]"], Object.values(context));
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Context.Provider, {
            value,
            children
        });
    };
    Provider.displayName = rootComponentName + "Provider";
    function useContext2(consumerName) {
        const context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(Context);
        if (context) return context;
        if (defaultContext !== void 0) return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    return [
        Provider,
        useContext2
    ];
}
function createContextScope(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    function createContext3(rootComponentName, defaultContext) {
        const BaseContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(defaultContext);
        const index = defaultContexts.length;
        defaultContexts = [
            ...defaultContexts,
            defaultContext
        ];
        const Provider = (props)=>{
            const { scope, children, ...context } = props;
            const Context = scope?.[scopeName]?.[index] || BaseContext;
            const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])({
                "createContextScope.createContext3.Provider.useMemo[value]": ()=>context
            }["createContextScope.createContext3.Provider.useMemo[value]"], Object.values(context));
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Context.Provider, {
                value,
                children
            });
        };
        Provider.displayName = rootComponentName + "Provider";
        function useContext2(consumerName, scope) {
            const Context = scope?.[scopeName]?.[index] || BaseContext;
            const context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(Context);
            if (context) return context;
            if (defaultContext !== void 0) return defaultContext;
            throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
        }
        return [
            Provider,
            useContext2
        ];
    }
    const createScope = ()=>{
        const scopeContexts = defaultContexts.map((defaultContext)=>{
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(defaultContext);
        });
        return function useScope(scope) {
            const contexts = scope?.[scopeName] || scopeContexts;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])({
                "createContextScope.createScope.useScope.useMemo": ()=>({
                        [`__scope${scopeName}`]: {
                            ...scope,
                            [scopeName]: contexts
                        }
                    })
            }["createContextScope.createScope.useScope.useMemo"], [
                scope,
                contexts
            ]);
        };
    };
    createScope.scopeName = scopeName;
    return [
        createContext3,
        composeContextScopes(createScope, ...createContextScopeDeps)
    ];
}
function composeContextScopes(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1) return baseScope;
    const createScope = ()=>{
        const scopeHooks = scopes.map((createScope2)=>({
                useScope: createScope2(),
                scopeName: createScope2.scopeName
            }));
        return function useComposedScopes(overrideScopes) {
            const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName })=>{
                const scopeProps = useScope(overrideScopes);
                const currentScope = scopeProps[`__scope${scopeName}`];
                return {
                    ...nextScopes2,
                    ...currentScope
                };
            }, {});
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])({
                "composeContextScopes.createScope.useComposedScopes.useMemo": ()=>({
                        [`__scope${baseScope.scopeName}`]: nextScopes
                    })
            }["composeContextScopes.createScope.useComposedScopes.useMemo"], [
                nextScopes
            ]);
        };
    };
    createScope.scopeName = baseScope.scopeName;
    return createScope;
}
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// packages/react/use-layout-effect/src/use-layout-effect.tsx
__turbopack_context__.s({
    "useLayoutEffect": (()=>useLayoutEffect2)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
var useLayoutEffect2 = globalThis?.document ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useLayoutEffect"] : ()=>{};
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-id/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// packages/react/id/src/id.tsx
__turbopack_context__.s({
    "useId": (()=>useId)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$layout$2d$effect$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs [app-client] (ecmascript)");
;
;
var useReactId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[" useId ".trim().toString()] || (()=>void 0);
var count = 0;
function useId(deterministicId) {
    const [id, setId] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.useState(useReactId());
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$layout$2d$effect$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useLayoutEffect"])({
        "useId.useLayoutEffect": ()=>{
            if (!deterministicId) setId({
                "useId.useLayoutEffect": (reactId)=>reactId ?? String(count++)
            }["useId.useLayoutEffect"]);
        }
    }["useId.useLayoutEffect"], [
        deterministicId
    ]);
    return deterministicId || (id ? `radix-${id}` : "");
}
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-slot/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// src/slot.tsx
__turbopack_context__.s({
    "Root": (()=>Slot),
    "Slot": (()=>Slot),
    "Slottable": (()=>Slottable),
    "createSlot": (()=>createSlot),
    "createSlottable": (()=>createSlottable)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$compose$2d$refs$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-compose-refs/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
;
;
;
// @__NO_SIDE_EFFECTS__
function createSlot(ownerName) {
    const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);
    const Slot2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
        const { children, ...slotProps } = props;
        const childrenArray = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Children"].toArray(children);
        const slottable = childrenArray.find(isSlottable);
        if (slottable) {
            const newElement = slottable.props.children;
            const newChildren = childrenArray.map((child)=>{
                if (child === slottable) {
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Children"].count(newElement) > 1) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Children"].only(null);
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidElement"])(newElement) ? newElement.props.children : null;
                } else {
                    return child;
                }
            });
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SlotClone, {
                ...slotProps,
                ref: forwardedRef,
                children: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidElement"])(newElement) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cloneElement"])(newElement, void 0, newChildren) : null
            });
        }
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SlotClone, {
            ...slotProps,
            ref: forwardedRef,
            children
        });
    });
    Slot2.displayName = `${ownerName}.Slot`;
    return Slot2;
}
var Slot = /* @__PURE__ */ createSlot("Slot");
// @__NO_SIDE_EFFECTS__
function createSlotClone(ownerName) {
    const SlotClone = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
        const { children, ...slotProps } = props;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidElement"])(children)) {
            const childrenRef = getElementRef(children);
            const props2 = mergeProps(slotProps, children.props);
            if (children.type !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Fragment"]) {
                props2.ref = forwardedRef ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$compose$2d$refs$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["composeRefs"])(forwardedRef, childrenRef) : childrenRef;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cloneElement"])(children, props2);
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Children"].count(children) > 1 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Children"].only(null) : null;
    });
    SlotClone.displayName = `${ownerName}.SlotClone`;
    return SlotClone;
}
var SLOTTABLE_IDENTIFIER = Symbol("radix.slottable");
// @__NO_SIDE_EFFECTS__
function createSlottable(ownerName) {
    const Slottable2 = ({ children })=>{
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Fragment"], {
            children
        });
    };
    Slottable2.displayName = `${ownerName}.Slottable`;
    Slottable2.__radixId = SLOTTABLE_IDENTIFIER;
    return Slottable2;
}
var Slottable = /* @__PURE__ */ createSlottable("Slottable");
function isSlottable(child) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidElement"])(child) && typeof child.type === "function" && "__radixId" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;
}
function mergeProps(slotProps, childProps) {
    const overrideProps = {
        ...childProps
    };
    for(const propName in childProps){
        const slotPropValue = slotProps[propName];
        const childPropValue = childProps[propName];
        const isHandler = /^on[A-Z]/.test(propName);
        if (isHandler) {
            if (slotPropValue && childPropValue) {
                overrideProps[propName] = (...args)=>{
                    const result = childPropValue(...args);
                    slotPropValue(...args);
                    return result;
                };
            } else if (slotPropValue) {
                overrideProps[propName] = slotPropValue;
            }
        } else if (propName === "style") {
            overrideProps[propName] = {
                ...slotPropValue,
                ...childPropValue
            };
        } else if (propName === "className") {
            overrideProps[propName] = [
                slotPropValue,
                childPropValue
            ].filter(Boolean).join(" ");
        }
    }
    return {
        ...slotProps,
        ...overrideProps
    };
}
function getElementRef(element) {
    let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
    let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
        return element.ref;
    }
    getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
    mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
        return element.props.ref;
    }
    return element.props.ref || element.ref;
}
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-primitive/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// src/primitive.tsx
__turbopack_context__.s({
    "Primitive": (()=>Primitive),
    "Root": (()=>Root),
    "dispatchDiscreteCustomEvent": (()=>dispatchDiscreteCustomEvent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-slot/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
;
;
;
;
var NODES = [
    "a",
    "button",
    "div",
    "form",
    "h2",
    "h3",
    "img",
    "input",
    "label",
    "li",
    "nav",
    "ol",
    "p",
    "select",
    "span",
    "svg",
    "ul"
];
var Primitive = NODES.reduce((primitive, node)=>{
    const Slot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSlot"])(`Primitive.${node}`);
    const Node = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
        const { asChild, ...primitiveProps } = props;
        const Comp = asChild ? Slot : node;
        if (typeof window !== "undefined") {
            window[Symbol.for("radix-ui")] = true;
        }
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
            ...primitiveProps,
            ref: forwardedRef
        });
    });
    Node.displayName = `Primitive.${node}`;
    return {
        ...primitive,
        [node]: Node
    };
}, {});
function dispatchDiscreteCustomEvent(target, event) {
    if (target) (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["flushSync"])(()=>target.dispatchEvent(event));
}
var Root = Primitive;
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-label/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Label": (()=>Label),
    "Root": (()=>Root)
});
// src/label.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-primitive/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
"use client";
;
;
;
var NAME = "Label";
var Label = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Primitive"].label, {
        ...props,
        ref: forwardedRef,
        onMouseDown: (event)=>{
            const target = event.target;
            if (target.closest("button, input, select, textarea")) return;
            props.onMouseDown?.(event);
            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
        }
    });
});
Label.displayName = NAME;
var Root = Label;
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-form/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Control": (()=>Control),
    "Field": (()=>Field),
    "Form": (()=>Form),
    "FormControl": (()=>FormControl),
    "FormField": (()=>FormField),
    "FormLabel": (()=>FormLabel),
    "FormMessage": (()=>FormMessage),
    "FormSubmit": (()=>FormSubmit),
    "FormValidityState": (()=>FormValidityState),
    "Label": (()=>Label),
    "Message": (()=>Message),
    "Root": (()=>Root),
    "Submit": (()=>Submit),
    "ValidityState": (()=>ValidityState),
    "createFormScope": (()=>createFormScope)
});
// src/form.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/primitive/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$compose$2d$refs$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-compose-refs/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$context$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-context/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$id$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-id/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$label$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-label/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-primitive/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
"use client";
;
;
;
;
;
;
;
;
var [createFormContext, createFormScope] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$context$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContextScope"])("Form");
var FORM_NAME = "Form";
var [ValidationProvider, useValidationContext] = createFormContext(FORM_NAME);
var [AriaDescriptionProvider, useAriaDescriptionContext] = createFormContext(FORM_NAME);
var Form = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeForm, onClearServerErrors = ()=>{}, ...rootProps } = props;
    const formRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(null);
    const composedFormRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$compose$2d$refs$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useComposedRefs"])(forwardedRef, formRef);
    const [validityMap, setValidityMap] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])({});
    const getFieldValidity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[getFieldValidity]": (fieldName)=>validityMap[fieldName]
    }["Form.useCallback[getFieldValidity]"], [
        validityMap
    ]);
    const handleFieldValidityChange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[handleFieldValidityChange]": (fieldName, validity)=>setValidityMap({
                "Form.useCallback[handleFieldValidityChange]": (prevValidityMap)=>({
                        ...prevValidityMap,
                        [fieldName]: {
                            ...prevValidityMap[fieldName] ?? {},
                            ...validity
                        }
                    })
            }["Form.useCallback[handleFieldValidityChange]"])
    }["Form.useCallback[handleFieldValidityChange]"], []);
    const handleFieldValiditionClear = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[handleFieldValiditionClear]": (fieldName)=>{
            setValidityMap({
                "Form.useCallback[handleFieldValiditionClear]": (prevValidityMap)=>({
                        ...prevValidityMap,
                        [fieldName]: void 0
                    })
            }["Form.useCallback[handleFieldValiditionClear]"]);
            setCustomErrorsMap({
                "Form.useCallback[handleFieldValiditionClear]": (prevCustomErrorsMap)=>({
                        ...prevCustomErrorsMap,
                        [fieldName]: {}
                    })
            }["Form.useCallback[handleFieldValiditionClear]"]);
        }
    }["Form.useCallback[handleFieldValiditionClear]"], []);
    const [customMatcherEntriesMap, setCustomMatcherEntriesMap] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])({});
    const getFieldCustomMatcherEntries = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[getFieldCustomMatcherEntries]": (fieldName)=>customMatcherEntriesMap[fieldName] ?? []
    }["Form.useCallback[getFieldCustomMatcherEntries]"], [
        customMatcherEntriesMap
    ]);
    const handleFieldCustomMatcherAdd = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[handleFieldCustomMatcherAdd]": (fieldName, matcherEntry)=>{
            setCustomMatcherEntriesMap({
                "Form.useCallback[handleFieldCustomMatcherAdd]": (prevCustomMatcherEntriesMap)=>({
                        ...prevCustomMatcherEntriesMap,
                        [fieldName]: [
                            ...prevCustomMatcherEntriesMap[fieldName] ?? [],
                            matcherEntry
                        ]
                    })
            }["Form.useCallback[handleFieldCustomMatcherAdd]"]);
        }
    }["Form.useCallback[handleFieldCustomMatcherAdd]"], []);
    const handleFieldCustomMatcherRemove = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[handleFieldCustomMatcherRemove]": (fieldName, matcherEntryId)=>{
            setCustomMatcherEntriesMap({
                "Form.useCallback[handleFieldCustomMatcherRemove]": (prevCustomMatcherEntriesMap)=>({
                        ...prevCustomMatcherEntriesMap,
                        [fieldName]: (prevCustomMatcherEntriesMap[fieldName] ?? []).filter({
                            "Form.useCallback[handleFieldCustomMatcherRemove]": (matcherEntry)=>matcherEntry.id !== matcherEntryId
                        }["Form.useCallback[handleFieldCustomMatcherRemove]"])
                    })
            }["Form.useCallback[handleFieldCustomMatcherRemove]"]);
        }
    }["Form.useCallback[handleFieldCustomMatcherRemove]"], []);
    const [customErrorsMap, setCustomErrorsMap] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])({});
    const getFieldCustomErrors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[getFieldCustomErrors]": (fieldName)=>customErrorsMap[fieldName] ?? {}
    }["Form.useCallback[getFieldCustomErrors]"], [
        customErrorsMap
    ]);
    const handleFieldCustomErrorsChange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[handleFieldCustomErrorsChange]": (fieldName, customErrors)=>{
            setCustomErrorsMap({
                "Form.useCallback[handleFieldCustomErrorsChange]": (prevCustomErrorsMap)=>({
                        ...prevCustomErrorsMap,
                        [fieldName]: {
                            ...prevCustomErrorsMap[fieldName] ?? {},
                            ...customErrors
                        }
                    })
            }["Form.useCallback[handleFieldCustomErrorsChange]"]);
        }
    }["Form.useCallback[handleFieldCustomErrorsChange]"], []);
    const [messageIdsMap, setMessageIdsMap] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])({});
    const handleFieldMessageIdAdd = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[handleFieldMessageIdAdd]": (fieldName, id)=>{
            setMessageIdsMap({
                "Form.useCallback[handleFieldMessageIdAdd]": (prevMessageIdsMap)=>{
                    const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]).add(id);
                    return {
                        ...prevMessageIdsMap,
                        [fieldName]: fieldDescriptionIds
                    };
                }
            }["Form.useCallback[handleFieldMessageIdAdd]"]);
        }
    }["Form.useCallback[handleFieldMessageIdAdd]"], []);
    const handleFieldMessageIdRemove = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[handleFieldMessageIdRemove]": (fieldName, id)=>{
            setMessageIdsMap({
                "Form.useCallback[handleFieldMessageIdRemove]": (prevMessageIdsMap)=>{
                    const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]);
                    fieldDescriptionIds.delete(id);
                    return {
                        ...prevMessageIdsMap,
                        [fieldName]: fieldDescriptionIds
                    };
                }
            }["Form.useCallback[handleFieldMessageIdRemove]"]);
        }
    }["Form.useCallback[handleFieldMessageIdRemove]"], []);
    const getFieldDescription = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "Form.useCallback[getFieldDescription]": (fieldName)=>Array.from(messageIdsMap[fieldName] ?? []).join(" ") || void 0
    }["Form.useCallback[getFieldDescription]"], [
        messageIdsMap
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(ValidationProvider, {
        scope: __scopeForm,
        getFieldValidity,
        onFieldValidityChange: handleFieldValidityChange,
        getFieldCustomMatcherEntries,
        onFieldCustomMatcherEntryAdd: handleFieldCustomMatcherAdd,
        onFieldCustomMatcherEntryRemove: handleFieldCustomMatcherRemove,
        getFieldCustomErrors,
        onFieldCustomErrorsChange: handleFieldCustomErrorsChange,
        onFieldValiditionClear: handleFieldValiditionClear,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(AriaDescriptionProvider, {
            scope: __scopeForm,
            onFieldMessageIdAdd: handleFieldMessageIdAdd,
            onFieldMessageIdRemove: handleFieldMessageIdRemove,
            getFieldDescription,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Primitive"].form, {
                ...rootProps,
                ref: composedFormRef,
                onInvalid: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onInvalid, (event)=>{
                    const firstInvalidControl = getFirstInvalidControl(event.currentTarget);
                    if (firstInvalidControl === event.target) firstInvalidControl.focus();
                    event.preventDefault();
                }),
                onSubmit: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onSubmit, onClearServerErrors, {
                    checkForDefaultPrevented: false
                }),
                onReset: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onReset, onClearServerErrors)
            })
        })
    });
});
Form.displayName = FORM_NAME;
var FIELD_NAME = "FormField";
var [FormFieldProvider, useFormFieldContext] = createFormContext(FIELD_NAME);
var FormField = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeForm, name, serverInvalid = false, ...fieldProps } = props;
    const validationContext = useValidationContext(FIELD_NAME, __scopeForm);
    const validity = validationContext.getFieldValidity(name);
    const id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$id$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useId"])();
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FormFieldProvider, {
        scope: __scopeForm,
        id,
        name,
        serverInvalid,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Primitive"].div, {
            "data-valid": getValidAttribute(validity, serverInvalid),
            "data-invalid": getInvalidAttribute(validity, serverInvalid),
            ...fieldProps,
            ref: forwardedRef
        })
    });
});
FormField.displayName = FIELD_NAME;
var LABEL_NAME = "FormLabel";
var FormLabel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeForm, ...labelProps } = props;
    const validationContext = useValidationContext(LABEL_NAME, __scopeForm);
    const fieldContext = useFormFieldContext(LABEL_NAME, __scopeForm);
    const htmlFor = labelProps.htmlFor || fieldContext.id;
    const validity = validationContext.getFieldValidity(fieldContext.name);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$label$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Label"], {
        "data-valid": getValidAttribute(validity, fieldContext.serverInvalid),
        "data-invalid": getInvalidAttribute(validity, fieldContext.serverInvalid),
        ...labelProps,
        ref: forwardedRef,
        htmlFor
    });
});
FormLabel.displayName = LABEL_NAME;
var CONTROL_NAME = "FormControl";
var FormControl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeForm, ...controlProps } = props;
    const validationContext = useValidationContext(CONTROL_NAME, __scopeForm);
    const fieldContext = useFormFieldContext(CONTROL_NAME, __scopeForm);
    const ariaDescriptionContext = useAriaDescriptionContext(CONTROL_NAME, __scopeForm);
    const ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(null);
    const composedRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$compose$2d$refs$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useComposedRefs"])(forwardedRef, ref);
    const name = controlProps.name || fieldContext.name;
    const id = controlProps.id || fieldContext.id;
    const customMatcherEntries = validationContext.getFieldCustomMatcherEntries(name);
    const { onFieldValidityChange, onFieldCustomErrorsChange, onFieldValiditionClear } = validationContext;
    const updateControlValidity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "FormControl.useCallback[updateControlValidity]": async (control)=>{
            if (hasBuiltInError(control.validity)) {
                const controlValidity2 = validityStateToObject(control.validity);
                onFieldValidityChange(name, controlValidity2);
                return;
            }
            const formData = control.form ? new FormData(control.form) : new FormData();
            const matcherArgs = [
                control.value,
                formData
            ];
            const syncCustomMatcherEntries = [];
            const ayncCustomMatcherEntries = [];
            customMatcherEntries.forEach({
                "FormControl.useCallback[updateControlValidity]": (customMatcherEntry)=>{
                    if (isAsyncCustomMatcherEntry(customMatcherEntry, matcherArgs)) {
                        ayncCustomMatcherEntries.push(customMatcherEntry);
                    } else if (isSyncCustomMatcherEntry(customMatcherEntry)) {
                        syncCustomMatcherEntries.push(customMatcherEntry);
                    }
                }
            }["FormControl.useCallback[updateControlValidity]"]);
            const syncCustomErrors = syncCustomMatcherEntries.map({
                "FormControl.useCallback[updateControlValidity].syncCustomErrors": ({ id: id2, match })=>{
                    return [
                        id2,
                        match(...matcherArgs)
                    ];
                }
            }["FormControl.useCallback[updateControlValidity].syncCustomErrors"]);
            const syncCustomErrorsById = Object.fromEntries(syncCustomErrors);
            const hasSyncCustomErrors = Object.values(syncCustomErrorsById).some(Boolean);
            const hasCustomError = hasSyncCustomErrors;
            control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : "");
            const controlValidity = validityStateToObject(control.validity);
            onFieldValidityChange(name, controlValidity);
            onFieldCustomErrorsChange(name, syncCustomErrorsById);
            if (!hasSyncCustomErrors && ayncCustomMatcherEntries.length > 0) {
                const promisedCustomErrors = ayncCustomMatcherEntries.map({
                    "FormControl.useCallback[updateControlValidity].promisedCustomErrors": ({ id: id2, match })=>match(...matcherArgs).then({
                            "FormControl.useCallback[updateControlValidity].promisedCustomErrors": (matches)=>[
                                    id2,
                                    matches
                                ]
                        }["FormControl.useCallback[updateControlValidity].promisedCustomErrors"])
                }["FormControl.useCallback[updateControlValidity].promisedCustomErrors"]);
                const asyncCustomErrors = await Promise.all(promisedCustomErrors);
                const asyncCustomErrorsById = Object.fromEntries(asyncCustomErrors);
                const hasAsyncCustomErrors = Object.values(asyncCustomErrorsById).some(Boolean);
                const hasCustomError2 = hasAsyncCustomErrors;
                control.setCustomValidity(hasCustomError2 ? DEFAULT_INVALID_MESSAGE : "");
                const controlValidity2 = validityStateToObject(control.validity);
                onFieldValidityChange(name, controlValidity2);
                onFieldCustomErrorsChange(name, asyncCustomErrorsById);
            }
        }
    }["FormControl.useCallback[updateControlValidity]"], [
        customMatcherEntries,
        name,
        onFieldCustomErrorsChange,
        onFieldValidityChange
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "FormControl.useEffect": ()=>{
            const control = ref.current;
            if (control) {
                const handleChange = {
                    "FormControl.useEffect.handleChange": ()=>updateControlValidity(control)
                }["FormControl.useEffect.handleChange"];
                control.addEventListener("change", handleChange);
                return ({
                    "FormControl.useEffect": ()=>control.removeEventListener("change", handleChange)
                })["FormControl.useEffect"];
            }
        }
    }["FormControl.useEffect"], [
        updateControlValidity
    ]);
    const resetControlValidity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "FormControl.useCallback[resetControlValidity]": ()=>{
            const control = ref.current;
            if (control) {
                control.setCustomValidity("");
                onFieldValiditionClear(name);
            }
        }
    }["FormControl.useCallback[resetControlValidity]"], [
        name,
        onFieldValiditionClear
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "FormControl.useEffect": ()=>{
            const form = ref.current?.form;
            if (form) {
                form.addEventListener("reset", resetControlValidity);
                return ({
                    "FormControl.useEffect": ()=>form.removeEventListener("reset", resetControlValidity)
                })["FormControl.useEffect"];
            }
        }
    }["FormControl.useEffect"], [
        resetControlValidity
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "FormControl.useEffect": ()=>{
            const control = ref.current;
            const form = control?.closest("form");
            if (form && fieldContext.serverInvalid) {
                const firstInvalidControl = getFirstInvalidControl(form);
                if (firstInvalidControl === control) firstInvalidControl.focus();
            }
        }
    }["FormControl.useEffect"], [
        fieldContext.serverInvalid
    ]);
    const validity = validationContext.getFieldValidity(name);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Primitive"].input, {
        "data-valid": getValidAttribute(validity, fieldContext.serverInvalid),
        "data-invalid": getInvalidAttribute(validity, fieldContext.serverInvalid),
        "aria-invalid": fieldContext.serverInvalid ? true : void 0,
        "aria-describedby": ariaDescriptionContext.getFieldDescription(name),
        title: "",
        ...controlProps,
        ref: composedRef,
        id,
        name,
        onInvalid: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onInvalid, (event)=>{
            const control = event.currentTarget;
            updateControlValidity(control);
        }),
        onChange: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onChange, (_event)=>{
            resetControlValidity();
        })
    });
});
FormControl.displayName = CONTROL_NAME;
var DEFAULT_INVALID_MESSAGE = "This value is not valid";
var DEFAULT_BUILT_IN_MESSAGES = {
    badInput: DEFAULT_INVALID_MESSAGE,
    patternMismatch: "This value does not match the required pattern",
    rangeOverflow: "This value is too large",
    rangeUnderflow: "This value is too small",
    stepMismatch: "This value does not match the required step",
    tooLong: "This value is too long",
    tooShort: "This value is too short",
    typeMismatch: "This value does not match the required type",
    valid: void 0,
    valueMissing: "This value is missing"
};
var MESSAGE_NAME = "FormMessage";
var FormMessage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { match, name: nameProp, ...messageProps } = props;
    const fieldContext = useFormFieldContext(MESSAGE_NAME, props.__scopeForm);
    const name = nameProp ?? fieldContext.name;
    if (match === void 0) {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FormMessageImpl, {
            ...messageProps,
            ref: forwardedRef,
            name,
            children: props.children || DEFAULT_INVALID_MESSAGE
        });
    } else if (typeof match === "function") {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FormCustomMessage, {
            match,
            ...messageProps,
            ref: forwardedRef,
            name
        });
    } else {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FormBuiltInMessage, {
            match,
            ...messageProps,
            ref: forwardedRef,
            name
        });
    }
});
FormMessage.displayName = MESSAGE_NAME;
var FormBuiltInMessage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { match, forceMatch = false, name, children, ...messageProps } = props;
    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);
    const validity = validationContext.getFieldValidity(name);
    const matches = forceMatch || validity?.[match];
    if (matches) {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FormMessageImpl, {
            ref: forwardedRef,
            ...messageProps,
            name,
            children: children ?? DEFAULT_BUILT_IN_MESSAGES[match]
        });
    }
    return null;
});
var FormCustomMessage = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { match, forceMatch = false, name, id: idProp, children, ...messageProps } = props;
    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);
    const ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(null);
    const composedRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$compose$2d$refs$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useComposedRefs"])(forwardedRef, ref);
    const _id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$id$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useId"])();
    const id = idProp ?? _id;
    const customMatcherEntry = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])({
        "FormCustomMessage.useMemo[customMatcherEntry]": ()=>({
                id,
                match
            })
    }["FormCustomMessage.useMemo[customMatcherEntry]"], [
        id,
        match
    ]);
    const { onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove } = validationContext;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "FormCustomMessage.useEffect": ()=>{
            onFieldCustomMatcherEntryAdd(name, customMatcherEntry);
            return ({
                "FormCustomMessage.useEffect": ()=>onFieldCustomMatcherEntryRemove(name, customMatcherEntry.id)
            })["FormCustomMessage.useEffect"];
        }
    }["FormCustomMessage.useEffect"], [
        customMatcherEntry,
        name,
        onFieldCustomMatcherEntryAdd,
        onFieldCustomMatcherEntryRemove
    ]);
    const validity = validationContext.getFieldValidity(name);
    const customErrors = validationContext.getFieldCustomErrors(name);
    const hasMatchingCustomError = customErrors[id];
    const matches = forceMatch || validity && !hasBuiltInError(validity) && hasMatchingCustomError;
    if (matches) {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FormMessageImpl, {
            id,
            ref: composedRef,
            ...messageProps,
            name,
            children: children ?? DEFAULT_INVALID_MESSAGE
        });
    }
    return null;
});
var FormMessageImpl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeForm, id: idProp, name, ...messageProps } = props;
    const ariaDescriptionContext = useAriaDescriptionContext(MESSAGE_NAME, __scopeForm);
    const _id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$id$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useId"])();
    const id = idProp ?? _id;
    const { onFieldMessageIdAdd, onFieldMessageIdRemove } = ariaDescriptionContext;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "FormMessageImpl.useEffect": ()=>{
            onFieldMessageIdAdd(name, id);
            return ({
                "FormMessageImpl.useEffect": ()=>onFieldMessageIdRemove(name, id)
            })["FormMessageImpl.useEffect"];
        }
    }["FormMessageImpl.useEffect"], [
        name,
        id,
        onFieldMessageIdAdd,
        onFieldMessageIdRemove
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Primitive"].span, {
        id,
        ...messageProps,
        ref: forwardedRef
    });
});
var VALIDITY_STATE_NAME = "FormValidityState";
var FormValidityState = (props)=>{
    const { __scopeForm, name: nameProp, children } = props;
    const validationContext = useValidationContext(VALIDITY_STATE_NAME, __scopeForm);
    const fieldContext = useFormFieldContext(VALIDITY_STATE_NAME, __scopeForm);
    const name = nameProp ?? fieldContext.name;
    const validity = validationContext.getFieldValidity(name);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Fragment"], {
        children: children(validity)
    });
};
FormValidityState.displayName = VALIDITY_STATE_NAME;
var SUBMIT_NAME = "FormSubmit";
var FormSubmit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeForm, ...submitProps } = props;
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Primitive"].button, {
        type: "submit",
        ...submitProps,
        ref: forwardedRef
    });
});
FormSubmit.displayName = SUBMIT_NAME;
function validityStateToObject(validity) {
    const object = {};
    for(const key in validity){
        object[key] = validity[key];
    }
    return object;
}
function isHTMLElement(element) {
    return element instanceof HTMLElement;
}
function isFormControl(element) {
    return "validity" in element;
}
function isInvalid(control) {
    return isFormControl(control) && (control.validity.valid === false || control.getAttribute("aria-invalid") === "true");
}
function getFirstInvalidControl(form) {
    const elements = form.elements;
    const [firstInvalidControl] = Array.from(elements).filter(isHTMLElement).filter(isInvalid);
    return firstInvalidControl;
}
function isAsyncCustomMatcherEntry(entry, args) {
    return entry.match.constructor.name === "AsyncFunction" || returnsPromise(entry.match, args);
}
function isSyncCustomMatcherEntry(entry) {
    return entry.match.constructor.name === "Function";
}
function returnsPromise(func, args) {
    return func(...args) instanceof Promise;
}
function hasBuiltInError(validity) {
    let error = false;
    for(const validityKey in validity){
        const key = validityKey;
        if (key !== "valid" && key !== "customError" && validity[key]) {
            error = true;
            break;
        }
    }
    return error;
}
function getValidAttribute(validity, serverInvalid) {
    if (validity?.valid === true && !serverInvalid) return true;
    return void 0;
}
function getInvalidAttribute(validity, serverInvalid) {
    if (validity?.valid === false || serverInvalid) return true;
    return void 0;
}
var Root = Form;
var Field = FormField;
var Label = FormLabel;
var Control = FormControl;
var Message = FormMessage;
var ValidityState = FormValidityState;
var Submit = FormSubmit;
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>index)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
var index = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useLayoutEffect"];
;
}}),
"[project]/node_modules/xstate/dev/dist/xstate-dev.development.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
__turbopack_context__.s({
    "devToolsAdapter": (()=>devToolsAdapter),
    "getGlobal": (()=>getGlobal),
    "registerService": (()=>registerService)
});
function getGlobal() {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    {
        console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');
    }
}
function getDevTools() {
    const w = getGlobal();
    if (w.__xstate__) {
        return w.__xstate__;
    }
    return undefined;
}
function registerService(service) {
    if (typeof window === 'undefined') {
        return;
    }
    const devTools = getDevTools();
    if (devTools) {
        devTools.register(service);
    }
}
const devToolsAdapter = (service)=>{
    if (typeof window === 'undefined') {
        return;
    }
    const devTools = getDevTools();
    if (devTools) {
        devTools.register(service);
    }
};
;
}}),
"[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "$": (()=>$$ACTOR_TYPE),
    "A": (()=>Actor),
    "B": (()=>getCandidates),
    "C": (()=>resolveStateValue),
    "D": (()=>getAllStateNodes),
    "E": (()=>createMachineSnapshot),
    "F": (()=>isInFinalState),
    "G": (()=>macrostep),
    "H": (()=>transitionNode),
    "I": (()=>resolveActionsAndContext),
    "J": (()=>createInitEvent),
    "K": (()=>microstep),
    "L": (()=>getInitialStateNodes),
    "M": (()=>toStatePath),
    "N": (()=>NULL_EVENT),
    "O": (()=>isStateId),
    "P": (()=>getStateNodeByPath),
    "Q": (()=>getPersistedSnapshot),
    "R": (()=>resolveReferencedActor),
    "S": (()=>STATE_DELIMITER),
    "T": (()=>executingCustomAction),
    "U": (()=>XSTATE_ERROR),
    "V": (()=>createErrorActorEvent),
    "W": (()=>ProcessingStatus),
    "X": (()=>XSTATE_STOP),
    "Y": (()=>cloneMachineSnapshot),
    "a": (()=>and),
    "b": (()=>isMachineSnapshot),
    "c": (()=>createActor),
    "d": (()=>getAllOwnEventDescriptors),
    "e": (()=>toObserver),
    "f": (()=>cancel),
    "g": (()=>getStateNodes),
    "h": (()=>spawnChild),
    "i": (()=>interpret),
    "j": (()=>stop),
    "k": (()=>stopChild),
    "l": (()=>mapValues),
    "m": (()=>matchesState),
    "n": (()=>not),
    "o": (()=>or),
    "p": (()=>pathToStateValue),
    "q": (()=>formatTransitions),
    "r": (()=>raise),
    "s": (()=>stateIn),
    "t": (()=>toArray),
    "u": (()=>toTransitionConfigArray),
    "v": (()=>formatTransition),
    "w": (()=>evaluateGuard),
    "x": (()=>createInvokeId),
    "y": (()=>getDelayedTransitions),
    "z": (()=>formatInitialTransition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dev$2f$dist$2f$xstate$2d$dev$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dev/dist/xstate-dev.development.esm.js [app-client] (ecmascript)");
;
class Mailbox {
    constructor(_process){
        this._process = _process;
        this._active = false;
        this._current = null;
        this._last = null;
    }
    start() {
        this._active = true;
        this.flush();
    }
    clear() {
        // we can't set _current to null because we might be currently processing
        // and enqueue following clear shouldn't start processing the enqueued item immediately
        if (this._current) {
            this._current.next = null;
            this._last = this._current;
        }
    }
    enqueue(event) {
        const enqueued = {
            value: event,
            next: null
        };
        if (this._current) {
            this._last.next = enqueued;
            this._last = enqueued;
            return;
        }
        this._current = enqueued;
        this._last = enqueued;
        if (this._active) {
            this.flush();
        }
    }
    flush() {
        while(this._current){
            // atm the given _process is responsible for implementing proper try/catch handling
            // we assume here that this won't throw in a way that can affect this mailbox
            const consumed = this._current;
            this._process(consumed.value);
            this._current = consumed.next;
        }
        this._last = null;
    }
}
const STATE_DELIMITER = '.';
const TARGETLESS_KEY = '';
const NULL_EVENT = '';
const STATE_IDENTIFIER = '#';
const WILDCARD = '*';
const XSTATE_INIT = 'xstate.init';
const XSTATE_ERROR = 'xstate.error';
const XSTATE_STOP = 'xstate.stop';
/**
 * Returns an event that represents an implicit event that is sent after the
 * specified `delay`.
 *
 * @param delayRef The delay in milliseconds
 * @param id The state node ID where this event is handled
 */ function createAfterEvent(delayRef, id) {
    return {
        type: `xstate.after.${delayRef}.${id}`
    };
}
/**
 * Returns an event that represents that a final state node has been reached in
 * the parent state node.
 *
 * @param id The final state node's parent state node `id`
 * @param output The data to pass into the event
 */ function createDoneStateEvent(id, output) {
    return {
        type: `xstate.done.state.${id}`,
        output
    };
}
/**
 * Returns an event that represents that an invoked service has terminated.
 *
 * An invoked service is terminated when it has reached a top-level final state
 * node, but not when it is canceled.
 *
 * @param invokeId The invoked service ID
 * @param output The data to pass into the event
 */ function createDoneActorEvent(invokeId, output) {
    return {
        type: `xstate.done.actor.${invokeId}`,
        output,
        actorId: invokeId
    };
}
function createErrorActorEvent(id, error) {
    return {
        type: `xstate.error.actor.${id}`,
        error,
        actorId: id
    };
}
function createInitEvent(input) {
    return {
        type: XSTATE_INIT,
        input
    };
}
/**
 * This function makes sure that unhandled errors are thrown in a separate
 * macrotask. It allows those errors to be detected by global error handlers and
 * reported to bug tracking services without interrupting our own stack of
 * execution.
 *
 * @param err Error to be thrown
 */ function reportUnhandledError(err) {
    setTimeout(()=>{
        throw err;
    });
}
const symbolObservable = (()=>typeof Symbol === 'function' && Symbol.observable || '@@observable')();
function matchesState(parentStateId, childStateId) {
    const parentStateValue = toStateValue(parentStateId);
    const childStateValue = toStateValue(childStateId);
    if (typeof childStateValue === 'string') {
        if (typeof parentStateValue === 'string') {
            return childStateValue === parentStateValue;
        }
        // Parent more specific than child
        return false;
    }
    if (typeof parentStateValue === 'string') {
        return parentStateValue in childStateValue;
    }
    return Object.keys(parentStateValue).every((key)=>{
        if (!(key in childStateValue)) {
            return false;
        }
        return matchesState(parentStateValue[key], childStateValue[key]);
    });
}
function toStatePath(stateId) {
    if (isArray(stateId)) {
        return stateId;
    }
    const result = [];
    let segment = '';
    for(let i = 0; i < stateId.length; i++){
        const char = stateId.charCodeAt(i);
        switch(char){
            // \
            case 92:
                // consume the next character
                segment += stateId[i + 1];
                // and skip over it
                i++;
                continue;
            // .
            case 46:
                result.push(segment);
                segment = '';
                continue;
        }
        segment += stateId[i];
    }
    result.push(segment);
    return result;
}
function toStateValue(stateValue) {
    if (isMachineSnapshot(stateValue)) {
        return stateValue.value;
    }
    if (typeof stateValue !== 'string') {
        return stateValue;
    }
    const statePath = toStatePath(stateValue);
    return pathToStateValue(statePath);
}
function pathToStateValue(statePath) {
    if (statePath.length === 1) {
        return statePath[0];
    }
    const value = {};
    let marker = value;
    for(let i = 0; i < statePath.length - 1; i++){
        if (i === statePath.length - 2) {
            marker[statePath[i]] = statePath[i + 1];
        } else {
            const previous = marker;
            marker = {};
            previous[statePath[i]] = marker;
        }
    }
    return value;
}
function mapValues(collection, iteratee) {
    const result = {};
    const collectionKeys = Object.keys(collection);
    for(let i = 0; i < collectionKeys.length; i++){
        const key = collectionKeys[i];
        result[key] = iteratee(collection[key], key, collection, i);
    }
    return result;
}
function toArrayStrict(value) {
    if (isArray(value)) {
        return value;
    }
    return [
        value
    ];
}
function toArray(value) {
    if (value === undefined) {
        return [];
    }
    return toArrayStrict(value);
}
function resolveOutput(mapper, context, event, self) {
    if (typeof mapper === 'function') {
        return mapper({
            context,
            event,
            self
        });
    }
    if (!!mapper && typeof mapper === 'object' && Object.values(mapper).some((val)=>typeof val === 'function')) {
        console.warn(`Dynamically mapping values to individual properties is deprecated. Use a single function that returns the mapped object instead.\nFound object containing properties whose values are possibly mapping functions: ${Object.entries(mapper).filter(([, value])=>typeof value === 'function').map(([key, value])=>`\n - ${key}: ${value.toString().replace(/\n\s*/g, '')}`).join('')}`);
    }
    return mapper;
}
function isArray(value) {
    return Array.isArray(value);
}
function isErrorActorEvent(event) {
    return event.type.startsWith('xstate.error.actor');
}
function toTransitionConfigArray(configLike) {
    return toArrayStrict(configLike).map((transitionLike)=>{
        if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string') {
            return {
                target: transitionLike
            };
        }
        return transitionLike;
    });
}
function normalizeTarget(target) {
    if (target === undefined || target === TARGETLESS_KEY) {
        return undefined;
    }
    return toArray(target);
}
function toObserver(nextHandler, errorHandler, completionHandler) {
    const isObserver = typeof nextHandler === 'object';
    const self = isObserver ? nextHandler : undefined;
    return {
        next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),
        error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),
        complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)
    };
}
function createInvokeId(stateNodeId, index) {
    return `${index}.${stateNodeId}`;
}
function resolveReferencedActor(machine, src) {
    const match = src.match(/^xstate\.invoke\.(\d+)\.(.*)/);
    if (!match) {
        return machine.implementations.actors[src];
    }
    const [, indexStr, nodeId] = match;
    const node = machine.getStateNodeById(nodeId);
    const invokeConfig = node.config.invoke;
    return (Array.isArray(invokeConfig) ? invokeConfig[indexStr] : invokeConfig).src;
}
function getAllOwnEventDescriptors(snapshot) {
    return [
        ...new Set([
            ...snapshot._nodes.flatMap((sn)=>sn.ownEvents)
        ])
    ];
}
function createScheduledEventId(actorRef, id) {
    return `${actorRef.sessionId}.${id}`;
}
let idCounter = 0;
function createSystem(rootActor, options) {
    const children = new Map();
    const keyedActors = new Map();
    const reverseKeyedActors = new WeakMap();
    const inspectionObservers = new Set();
    const timerMap = {};
    const { clock, logger } = options;
    const scheduler = {
        schedule: (source, target, event, delay, id = Math.random().toString(36).slice(2))=>{
            const scheduledEvent = {
                source,
                target,
                event,
                delay,
                id,
                startedAt: Date.now()
            };
            const scheduledEventId = createScheduledEventId(source, id);
            system._snapshot._scheduledEvents[scheduledEventId] = scheduledEvent;
            const timeout = clock.setTimeout(()=>{
                delete timerMap[scheduledEventId];
                delete system._snapshot._scheduledEvents[scheduledEventId];
                system._relay(source, target, event);
            }, delay);
            timerMap[scheduledEventId] = timeout;
        },
        cancel: (source, id)=>{
            const scheduledEventId = createScheduledEventId(source, id);
            const timeout = timerMap[scheduledEventId];
            delete timerMap[scheduledEventId];
            delete system._snapshot._scheduledEvents[scheduledEventId];
            if (timeout !== undefined) {
                clock.clearTimeout(timeout);
            }
        },
        cancelAll: (actorRef)=>{
            for(const scheduledEventId in system._snapshot._scheduledEvents){
                const scheduledEvent = system._snapshot._scheduledEvents[scheduledEventId];
                if (scheduledEvent.source === actorRef) {
                    scheduler.cancel(actorRef, scheduledEvent.id);
                }
            }
        }
    };
    const sendInspectionEvent = (event)=>{
        if (!inspectionObservers.size) {
            return;
        }
        const resolvedInspectionEvent = {
            ...event,
            rootId: rootActor.sessionId
        };
        inspectionObservers.forEach((observer)=>observer.next?.(resolvedInspectionEvent));
    };
    const system = {
        _snapshot: {
            _scheduledEvents: (options?.snapshot && options.snapshot.scheduler) ?? {}
        },
        _bookId: ()=>`x:${idCounter++}`,
        _register: (sessionId, actorRef)=>{
            children.set(sessionId, actorRef);
            return sessionId;
        },
        _unregister: (actorRef)=>{
            children.delete(actorRef.sessionId);
            const systemId = reverseKeyedActors.get(actorRef);
            if (systemId !== undefined) {
                keyedActors.delete(systemId);
                reverseKeyedActors.delete(actorRef);
            }
        },
        get: (systemId)=>{
            return keyedActors.get(systemId);
        },
        _set: (systemId, actorRef)=>{
            const existing = keyedActors.get(systemId);
            if (existing && existing !== actorRef) {
                throw new Error(`Actor with system ID '${systemId}' already exists.`);
            }
            keyedActors.set(systemId, actorRef);
            reverseKeyedActors.set(actorRef, systemId);
        },
        inspect: (observerOrFn)=>{
            const observer = toObserver(observerOrFn);
            inspectionObservers.add(observer);
            return {
                unsubscribe () {
                    inspectionObservers.delete(observer);
                }
            };
        },
        _sendInspectionEvent: sendInspectionEvent,
        _relay: (source, target, event)=>{
            system._sendInspectionEvent({
                type: '@xstate.event',
                sourceRef: source,
                actorRef: target,
                event
            });
            target._send(event);
        },
        scheduler,
        getSnapshot: ()=>{
            return {
                _scheduledEvents: {
                    ...system._snapshot._scheduledEvents
                }
            };
        },
        start: ()=>{
            const scheduledEvents = system._snapshot._scheduledEvents;
            system._snapshot._scheduledEvents = {};
            for(const scheduledId in scheduledEvents){
                const { source, target, event, delay, id } = scheduledEvents[scheduledId];
                scheduler.schedule(source, target, event, delay, id);
            }
        },
        _clock: clock,
        _logger: logger
    };
    return system;
}
// those are needed to make JSDoc `@link` work properly
let executingCustomAction = false;
const $$ACTOR_TYPE = 1;
// those values are currently used by @xstate/react directly so it's important to keep the assigned values in sync
let ProcessingStatus = /*#__PURE__*/ function(ProcessingStatus) {
    ProcessingStatus[ProcessingStatus["NotStarted"] = 0] = "NotStarted";
    ProcessingStatus[ProcessingStatus["Running"] = 1] = "Running";
    ProcessingStatus[ProcessingStatus["Stopped"] = 2] = "Stopped";
    return ProcessingStatus;
}({});
const defaultOptions = {
    clock: {
        setTimeout: (fn, ms)=>{
            return setTimeout(fn, ms);
        },
        clearTimeout: (id)=>{
            return clearTimeout(id);
        }
    },
    logger: console.log.bind(console),
    devTools: false
};
/**
 * An Actor is a running process that can receive events, send events and change
 * its behavior based on the events it receives, which can cause effects outside
 * of the actor. When you run a state machine, it becomes an actor.
 */ class Actor {
    /**
   * Creates a new actor instance for the given logic with the provided options,
   * if any.
   *
   * @param logic The logic to create an actor from
   * @param options Actor options
   */ constructor(logic, options){
        this.logic = logic;
        /** The current internal state of the actor. */ this._snapshot = void 0;
        /**
     * The clock that is responsible for setting and clearing timeouts, such as
     * delayed events and transitions.
     */ this.clock = void 0;
        this.options = void 0;
        /** The unique identifier for this actor relative to its parent. */ this.id = void 0;
        this.mailbox = new Mailbox(this._process.bind(this));
        this.observers = new Set();
        this.eventListeners = new Map();
        this.logger = void 0;
        /** @internal */ this._processingStatus = ProcessingStatus.NotStarted;
        // Actor Ref
        this._parent = void 0;
        /** @internal */ this._syncSnapshot = void 0;
        this.ref = void 0;
        // TODO: add typings for system
        this._actorScope = void 0;
        this._systemId = void 0;
        /** The globally unique process ID for this invocation. */ this.sessionId = void 0;
        /** The system to which this actor belongs. */ this.system = void 0;
        this._doneEvent = void 0;
        this.src = void 0;
        // array of functions to defer
        this._deferred = [];
        const resolvedOptions = {
            ...defaultOptions,
            ...options
        };
        const { clock, logger, parent, syncSnapshot, id, systemId, inspect } = resolvedOptions;
        this.system = parent ? parent.system : createSystem(this, {
            clock,
            logger
        });
        if (inspect && !parent) {
            // Always inspect at the system-level
            this.system.inspect(toObserver(inspect));
        }
        this.sessionId = this.system._bookId();
        this.id = id ?? this.sessionId;
        this.logger = options?.logger ?? this.system._logger;
        this.clock = options?.clock ?? this.system._clock;
        this._parent = parent;
        this._syncSnapshot = syncSnapshot;
        this.options = resolvedOptions;
        this.src = resolvedOptions.src ?? logic;
        this.ref = this;
        this._actorScope = {
            self: this,
            id: this.id,
            sessionId: this.sessionId,
            logger: this.logger,
            defer: (fn)=>{
                this._deferred.push(fn);
            },
            system: this.system,
            stopChild: (child)=>{
                if (child._parent !== this) {
                    throw new Error(`Cannot stop child actor ${child.id} of ${this.id} because it is not a child`);
                }
                child._stop();
            },
            emit: (emittedEvent)=>{
                const listeners = this.eventListeners.get(emittedEvent.type);
                const wildcardListener = this.eventListeners.get('*');
                if (!listeners && !wildcardListener) {
                    return;
                }
                const allListeners = [
                    ...listeners ? listeners.values() : [],
                    ...wildcardListener ? wildcardListener.values() : []
                ];
                for (const handler of allListeners){
                    handler(emittedEvent);
                }
            },
            actionExecutor: (action)=>{
                const exec = ()=>{
                    this._actorScope.system._sendInspectionEvent({
                        type: '@xstate.action',
                        actorRef: this,
                        action: {
                            type: action.type,
                            params: action.params
                        }
                    });
                    if (!action.exec) {
                        return;
                    }
                    const saveExecutingCustomAction = executingCustomAction;
                    try {
                        executingCustomAction = true;
                        action.exec(action.info, action.params);
                    } finally{
                        executingCustomAction = saveExecutingCustomAction;
                    }
                };
                if (this._processingStatus === ProcessingStatus.Running) {
                    exec();
                } else {
                    this._deferred.push(exec);
                }
            }
        };
        // Ensure that the send method is bound to this Actor instance
        // if destructured
        this.send = this.send.bind(this);
        this.system._sendInspectionEvent({
            type: '@xstate.actor',
            actorRef: this
        });
        if (systemId) {
            this._systemId = systemId;
            this.system._set(systemId, this);
        }
        this._initState(options?.snapshot ?? options?.state);
        if (systemId && this._snapshot.status !== 'active') {
            this.system._unregister(this);
        }
    }
    _initState(persistedState) {
        try {
            this._snapshot = persistedState ? this.logic.restoreSnapshot ? this.logic.restoreSnapshot(persistedState, this._actorScope) : persistedState : this.logic.getInitialSnapshot(this._actorScope, this.options?.input);
        } catch (err) {
            // if we get here then it means that we assign a value to this._snapshot that is not of the correct type
            // we can't get the true `TSnapshot & { status: 'error'; }`, it's impossible
            // so right now this is a lie of sorts
            this._snapshot = {
                status: 'error',
                output: undefined,
                error: err
            };
        }
    }
    update(snapshot, event) {
        // Update state
        this._snapshot = snapshot;
        // Execute deferred effects
        let deferredFn;
        while(deferredFn = this._deferred.shift()){
            try {
                deferredFn();
            } catch (err) {
                // this error can only be caught when executing *initial* actions
                // it's the only time when we call actions provided by the user through those deferreds
                // when the actor is already running we always execute them synchronously while transitioning
                // no "builtin deferred" should actually throw an error since they are either safe
                // or the control flow is passed through the mailbox and errors should be caught by the `_process` used by the mailbox
                this._deferred.length = 0;
                this._snapshot = {
                    ...snapshot,
                    status: 'error',
                    error: err
                };
            }
        }
        switch(this._snapshot.status){
            case 'active':
                for (const observer of this.observers){
                    try {
                        observer.next?.(snapshot);
                    } catch (err) {
                        reportUnhandledError(err);
                    }
                }
                break;
            case 'done':
                // next observers are meant to be notified about done snapshots
                // this can be seen as something that is different from how observable work
                // but with observables `complete` callback is called without any arguments
                // it's more ergonomic for XState to treat a done snapshot as a "next" value
                // and the completion event as something that is separate,
                // something that merely follows emitting that done snapshot
                for (const observer of this.observers){
                    try {
                        observer.next?.(snapshot);
                    } catch (err) {
                        reportUnhandledError(err);
                    }
                }
                this._stopProcedure();
                this._complete();
                this._doneEvent = createDoneActorEvent(this.id, this._snapshot.output);
                if (this._parent) {
                    this.system._relay(this, this._parent, this._doneEvent);
                }
                break;
            case 'error':
                this._error(this._snapshot.error);
                break;
        }
        this.system._sendInspectionEvent({
            type: '@xstate.snapshot',
            actorRef: this,
            event,
            snapshot
        });
    }
    /**
   * Subscribe an observer to an actor’s snapshot values.
   *
   * @remarks
   * The observer will receive the actor’s snapshot value when it is emitted.
   * The observer can be:
   *
   * - A plain function that receives the latest snapshot, or
   * - An observer object whose `.next(snapshot)` method receives the latest
   *   snapshot
   *
   * @example
   *
   * ```ts
   * // Observer as a plain function
   * const subscription = actor.subscribe((snapshot) => {
   *   console.log(snapshot);
   * });
   * ```
   *
   * @example
   *
   * ```ts
   * // Observer as an object
   * const subscription = actor.subscribe({
   *   next(snapshot) {
   *     console.log(snapshot);
   *   },
   *   error(err) {
   *     // ...
   *   },
   *   complete() {
   *     // ...
   *   }
   * });
   * ```
   *
   * The return value of `actor.subscribe(observer)` is a subscription object
   * that has an `.unsubscribe()` method. You can call
   * `subscription.unsubscribe()` to unsubscribe the observer:
   *
   * @example
   *
   * ```ts
   * const subscription = actor.subscribe((snapshot) => {
   *   // ...
   * });
   *
   * // Unsubscribe the observer
   * subscription.unsubscribe();
   * ```
   *
   * When the actor is stopped, all of its observers will automatically be
   * unsubscribed.
   *
   * @param observer - Either a plain function that receives the latest
   *   snapshot, or an observer object whose `.next(snapshot)` method receives
   *   the latest snapshot
   */ subscribe(nextListenerOrObserver, errorListener, completeListener) {
        const observer = toObserver(nextListenerOrObserver, errorListener, completeListener);
        if (this._processingStatus !== ProcessingStatus.Stopped) {
            this.observers.add(observer);
        } else {
            switch(this._snapshot.status){
                case 'done':
                    try {
                        observer.complete?.();
                    } catch (err) {
                        reportUnhandledError(err);
                    }
                    break;
                case 'error':
                    {
                        const err = this._snapshot.error;
                        if (!observer.error) {
                            reportUnhandledError(err);
                        } else {
                            try {
                                observer.error(err);
                            } catch (err) {
                                reportUnhandledError(err);
                            }
                        }
                        break;
                    }
            }
        }
        return {
            unsubscribe: ()=>{
                this.observers.delete(observer);
            }
        };
    }
    on(type, handler) {
        let listeners = this.eventListeners.get(type);
        if (!listeners) {
            listeners = new Set();
            this.eventListeners.set(type, listeners);
        }
        const wrappedHandler = handler.bind(undefined);
        listeners.add(wrappedHandler);
        return {
            unsubscribe: ()=>{
                listeners.delete(wrappedHandler);
            }
        };
    }
    /** Starts the Actor from the initial state */ start() {
        if (this._processingStatus === ProcessingStatus.Running) {
            // Do not restart the service if it is already started
            return this;
        }
        if (this._syncSnapshot) {
            this.subscribe({
                next: (snapshot)=>{
                    if (snapshot.status === 'active') {
                        this.system._relay(this, this._parent, {
                            type: `xstate.snapshot.${this.id}`,
                            snapshot
                        });
                    }
                },
                error: ()=>{}
            });
        }
        this.system._register(this.sessionId, this);
        if (this._systemId) {
            this.system._set(this._systemId, this);
        }
        this._processingStatus = ProcessingStatus.Running;
        // TODO: this isn't correct when rehydrating
        const initEvent = createInitEvent(this.options.input);
        this.system._sendInspectionEvent({
            type: '@xstate.event',
            sourceRef: this._parent,
            actorRef: this,
            event: initEvent
        });
        const status = this._snapshot.status;
        switch(status){
            case 'done':
                // a state machine can be "done" upon initialization (it could reach a final state using initial microsteps)
                // we still need to complete observers, flush deferreds etc
                this.update(this._snapshot, initEvent);
                // TODO: rethink cleanup of observers, mailbox, etc
                return this;
            case 'error':
                this._error(this._snapshot.error);
                return this;
        }
        if (!this._parent) {
            this.system.start();
        }
        if (this.logic.start) {
            try {
                this.logic.start(this._snapshot, this._actorScope);
            } catch (err) {
                this._snapshot = {
                    ...this._snapshot,
                    status: 'error',
                    error: err
                };
                this._error(err);
                return this;
            }
        }
        // TODO: this notifies all subscribers but usually this is redundant
        // there is no real change happening here
        // we need to rethink if this needs to be refactored
        this.update(this._snapshot, initEvent);
        if (this.options.devTools) {
            this.attachDevTools();
        }
        this.mailbox.start();
        return this;
    }
    _process(event) {
        let nextState;
        let caughtError;
        try {
            nextState = this.logic.transition(this._snapshot, event, this._actorScope);
        } catch (err) {
            // we wrap it in a box so we can rethrow it later even if falsy value gets caught here
            caughtError = {
                err
            };
        }
        if (caughtError) {
            const { err } = caughtError;
            this._snapshot = {
                ...this._snapshot,
                status: 'error',
                error: err
            };
            this._error(err);
            return;
        }
        this.update(nextState, event);
        if (event.type === XSTATE_STOP) {
            this._stopProcedure();
            this._complete();
        }
    }
    _stop() {
        if (this._processingStatus === ProcessingStatus.Stopped) {
            return this;
        }
        this.mailbox.clear();
        if (this._processingStatus === ProcessingStatus.NotStarted) {
            this._processingStatus = ProcessingStatus.Stopped;
            return this;
        }
        this.mailbox.enqueue({
            type: XSTATE_STOP
        });
        return this;
    }
    /** Stops the Actor and unsubscribe all listeners. */ stop() {
        if (this._parent) {
            throw new Error('A non-root actor cannot be stopped directly.');
        }
        return this._stop();
    }
    _complete() {
        for (const observer of this.observers){
            try {
                observer.complete?.();
            } catch (err) {
                reportUnhandledError(err);
            }
        }
        this.observers.clear();
    }
    _reportError(err) {
        if (!this.observers.size) {
            if (!this._parent) {
                reportUnhandledError(err);
            }
            return;
        }
        let reportError = false;
        for (const observer of this.observers){
            const errorListener = observer.error;
            reportError ||= !errorListener;
            try {
                errorListener?.(err);
            } catch (err2) {
                reportUnhandledError(err2);
            }
        }
        this.observers.clear();
        if (reportError) {
            reportUnhandledError(err);
        }
    }
    _error(err) {
        this._stopProcedure();
        this._reportError(err);
        if (this._parent) {
            this.system._relay(this, this._parent, createErrorActorEvent(this.id, err));
        }
    }
    // TODO: atm children don't belong entirely to the actor so
    // in a way - it's not even super aware of them
    // so we can't stop them from here but we really should!
    // right now, they are being stopped within the machine's transition
    // but that could throw and leave us with "orphaned" active actors
    _stopProcedure() {
        if (this._processingStatus !== ProcessingStatus.Running) {
            // Actor already stopped; do nothing
            return this;
        }
        // Cancel all delayed events
        this.system.scheduler.cancelAll(this);
        // TODO: mailbox.reset
        this.mailbox.clear();
        // TODO: after `stop` we must prepare ourselves for receiving events again
        // events sent *after* stop signal must be queued
        // it seems like this should be the common behavior for all of our consumers
        // so perhaps this should be unified somehow for all of them
        this.mailbox = new Mailbox(this._process.bind(this));
        this._processingStatus = ProcessingStatus.Stopped;
        this.system._unregister(this);
        return this;
    }
    /** @internal */ _send(event) {
        if (this._processingStatus === ProcessingStatus.Stopped) {
            // do nothing
            {
                const eventString = JSON.stringify(event);
                console.warn(`Event "${event.type}" was sent to stopped actor "${this.id} (${this.sessionId})". This actor has already reached its final state, and will not transition.\nEvent: ${eventString}`);
            }
            return;
        }
        this.mailbox.enqueue(event);
    }
    /**
   * Sends an event to the running Actor to trigger a transition.
   *
   * @param event The event to send
   */ send(event) {
        if (typeof event === 'string') {
            throw new Error(`Only event objects may be sent to actors; use .send({ type: "${event}" }) instead`);
        }
        this.system._relay(undefined, this, event);
    }
    attachDevTools() {
        const { devTools } = this.options;
        if (devTools) {
            const resolvedDevToolsAdapter = typeof devTools === 'function' ? devTools : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dev$2f$dist$2f$xstate$2d$dev$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["devToolsAdapter"];
            resolvedDevToolsAdapter(this);
        }
    }
    toJSON() {
        return {
            xstate$$type: $$ACTOR_TYPE,
            id: this.id
        };
    }
    /**
   * Obtain the internal state of the actor, which can be persisted.
   *
   * @remarks
   * The internal state can be persisted from any actor, not only machines.
   *
   * Note that the persisted state is not the same as the snapshot from
   * {@link Actor.getSnapshot}. Persisted state represents the internal state of
   * the actor, while snapshots represent the actor's last emitted value.
   *
   * Can be restored with {@link ActorOptions.state}
   * @see https://stately.ai/docs/persistence
   */ getPersistedSnapshot(options) {
        return this.logic.getPersistedSnapshot(this._snapshot, options);
    }
    [symbolObservable]() {
        return this;
    }
    /**
   * Read an actor’s snapshot synchronously.
   *
   * @remarks
   * The snapshot represent an actor's last emitted value.
   *
   * When an actor receives an event, its internal state may change. An actor
   * may emit a snapshot when a state transition occurs.
   *
   * Note that some actors, such as callback actors generated with
   * `fromCallback`, will not emit snapshots.
   * @see {@link Actor.subscribe} to subscribe to an actor’s snapshot values.
   * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).
   */ getSnapshot() {
        if (!this._snapshot) {
            throw new Error(`Snapshot can't be read while the actor initializes itself`);
        }
        return this._snapshot;
    }
}
/**
 * Creates a new actor instance for the given actor logic with the provided
 * options, if any.
 *
 * @remarks
 * When you create an actor from actor logic via `createActor(logic)`, you
 * implicitly create an actor system where the created actor is the root actor.
 * Any actors spawned from this root actor and its descendants are part of that
 * actor system.
 * @example
 *
 * ```ts
 * import { createActor } from 'xstate';
 * import { someActorLogic } from './someActorLogic.ts';
 *
 * // Creating the actor, which implicitly creates an actor system with itself as the root actor
 * const actor = createActor(someActorLogic);
 *
 * actor.subscribe((snapshot) => {
 *   console.log(snapshot);
 * });
 *
 * // Actors must be started by calling `actor.start()`, which will also start the actor system.
 * actor.start();
 *
 * // Actors can receive events
 * actor.send({ type: 'someEvent' });
 *
 * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.
 * actor.stop();
 * ```
 *
 * @param logic - The actor logic to create an actor from. For a state machine
 *   actor logic creator, see {@link createMachine}. Other actor logic creators
 *   include {@link fromCallback}, {@link fromEventObservable},
 *   {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.
 * @param options - Actor options
 */ function createActor(logic, ...[options]) {
    return new Actor(logic, options);
}
/**
 * Creates a new Interpreter instance for the given machine with the provided
 * options, if any.
 *
 * @deprecated Use `createActor` instead
 * @alias
 */ const interpret = createActor;
/**
 * @deprecated Use `Actor` instead.
 * @alias
 */ function resolveCancel(_, snapshot, actionArgs, actionParams, { sendId }) {
    const resolvedSendId = typeof sendId === 'function' ? sendId(actionArgs, actionParams) : sendId;
    return [
        snapshot,
        {
            sendId: resolvedSendId
        },
        undefined
    ];
}
function executeCancel(actorScope, params) {
    actorScope.defer(()=>{
        actorScope.system.scheduler.cancel(actorScope.self, params.sendId);
    });
}
/**
 * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The
 * canceled `sendTo(...)` action will not send its event or execute, unless the
 * `delay` has already elapsed before `cancel(...)` is called.
 *
 * @example
 *
 * ```ts
 * import { createMachine, sendTo, cancel } from 'xstate';
 *
 * const machine = createMachine({
 *   // ...
 *   on: {
 *     sendEvent: {
 *       actions: sendTo(
 *         'some-actor',
 *         { type: 'someEvent' },
 *         {
 *           id: 'some-id',
 *           delay: 1000
 *         }
 *       )
 *     },
 *     cancelEvent: {
 *       actions: cancel('some-id')
 *     }
 *   }
 * });
 * ```
 *
 * @param sendId The `id` of the `sendTo(...)` action to cancel.
 */ function cancel(sendId) {
    function cancel(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    cancel.type = 'xstate.cancel';
    cancel.sendId = sendId;
    cancel.resolve = resolveCancel;
    cancel.execute = executeCancel;
    return cancel;
}
function resolveSpawn(actorScope, snapshot, actionArgs, _actionParams, { id, systemId, src, input, syncSnapshot }) {
    const logic = typeof src === 'string' ? resolveReferencedActor(snapshot.machine, src) : src;
    const resolvedId = typeof id === 'function' ? id(actionArgs) : id;
    let actorRef;
    let resolvedInput = undefined;
    if (logic) {
        resolvedInput = typeof input === 'function' ? input({
            context: snapshot.context,
            event: actionArgs.event,
            self: actorScope.self
        }) : input;
        actorRef = createActor(logic, {
            id: resolvedId,
            src,
            parent: actorScope.self,
            syncSnapshot,
            systemId,
            input: resolvedInput
        });
    }
    if (!actorRef) {
        console.warn(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-base-to-string
        `Actor type '${src}' not found in machine '${actorScope.id}'.`);
    }
    return [
        cloneMachineSnapshot(snapshot, {
            children: {
                ...snapshot.children,
                [resolvedId]: actorRef
            }
        }),
        {
            id,
            systemId,
            actorRef,
            src,
            input: resolvedInput
        },
        undefined
    ];
}
function executeSpawn(actorScope, { actorRef }) {
    if (!actorRef) {
        return;
    }
    actorScope.defer(()=>{
        if (actorRef._processingStatus === ProcessingStatus.Stopped) {
            return;
        }
        actorRef.start();
    });
}
function spawnChild(...[src, { id, systemId, input, syncSnapshot = false } = {}]) {
    function spawnChild1(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    spawnChild1.type = 'xstate.spawnChild';
    spawnChild1.id = id;
    spawnChild1.systemId = systemId;
    spawnChild1.src = src;
    spawnChild1.input = input;
    spawnChild1.syncSnapshot = syncSnapshot;
    spawnChild1.resolve = resolveSpawn;
    spawnChild1.execute = executeSpawn;
    return spawnChild1;
}
function resolveStop(_, snapshot, args, actionParams, { actorRef }) {
    const actorRefOrString = typeof actorRef === 'function' ? actorRef(args, actionParams) : actorRef;
    const resolvedActorRef = typeof actorRefOrString === 'string' ? snapshot.children[actorRefOrString] : actorRefOrString;
    let children = snapshot.children;
    if (resolvedActorRef) {
        children = {
            ...children
        };
        delete children[resolvedActorRef.id];
    }
    return [
        cloneMachineSnapshot(snapshot, {
            children
        }),
        resolvedActorRef,
        undefined
    ];
}
function executeStop(actorScope, actorRef) {
    if (!actorRef) {
        return;
    }
    // we need to eagerly unregister it here so a new actor with the same systemId can be registered immediately
    // since we defer actual stopping of the actor but we don't defer actor creations (and we can't do that)
    // this could throw on `systemId` collision, for example, when dealing with reentering transitions
    actorScope.system._unregister(actorRef);
    // this allows us to prevent an actor from being started if it gets stopped within the same macrostep
    // this can happen, for example, when the invoking state is being exited immediately by an always transition
    if (actorRef._processingStatus !== ProcessingStatus.Running) {
        actorScope.stopChild(actorRef);
        return;
    }
    // stopping a child enqueues a stop event in the child actor's mailbox
    // we need for all of the already enqueued events to be processed before we stop the child
    // the parent itself might want to send some events to a child (for example from exit actions on the invoking state)
    // and we don't want to ignore those events
    actorScope.defer(()=>{
        actorScope.stopChild(actorRef);
    });
}
/**
 * Stops a child actor.
 *
 * @param actorRef The actor to stop.
 */ function stopChild(actorRef) {
    function stop(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    stop.type = 'xstate.stopChild';
    stop.actorRef = actorRef;
    stop.resolve = resolveStop;
    stop.execute = executeStop;
    return stop;
}
/**
 * Stops a child actor.
 *
 * @deprecated Use `stopChild(...)` instead
 * @alias
 */ const stop = stopChild;
function checkStateIn(snapshot, _, { stateValue }) {
    if (typeof stateValue === 'string' && isStateId(stateValue)) {
        const target = snapshot.machine.getStateNodeById(stateValue);
        return snapshot._nodes.some((sn)=>sn === target);
    }
    return snapshot.matches(stateValue);
}
function stateIn(stateValue) {
    function stateIn() {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    stateIn.check = checkStateIn;
    stateIn.stateValue = stateValue;
    return stateIn;
}
function checkNot(snapshot, { context, event }, { guards }) {
    return !evaluateGuard(guards[0], context, event, snapshot);
}
/**
 * Higher-order guard that evaluates to `true` if the `guard` passed to it
 * evaluates to `false`.
 *
 * @category Guards
 * @example
 *
 * ```ts
 * import { setup, not } from 'xstate';
 *
 * const machine = setup({
 *   guards: {
 *     someNamedGuard: () => false
 *   }
 * }).createMachine({
 *   on: {
 *     someEvent: {
 *       guard: not('someNamedGuard'),
 *       actions: () => {
 *         // will be executed if guard in `not(...)`
 *         // evaluates to `false`
 *       }
 *     }
 *   }
 * });
 * ```
 *
 * @returns A guard
 */ function not(guard) {
    function not(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    not.check = checkNot;
    not.guards = [
        guard
    ];
    return not;
}
function checkAnd(snapshot, { context, event }, { guards }) {
    return guards.every((guard)=>evaluateGuard(guard, context, event, snapshot));
}
/**
 * Higher-order guard that evaluates to `true` if all `guards` passed to it
 * evaluate to `true`.
 *
 * @category Guards
 * @example
 *
 * ```ts
 * import { setup, and } from 'xstate';
 *
 * const machine = setup({
 *   guards: {
 *     someNamedGuard: () => true
 *   }
 * }).createMachine({
 *   on: {
 *     someEvent: {
 *       guard: and([({ context }) => context.value > 0, 'someNamedGuard']),
 *       actions: () => {
 *         // will be executed if all guards in `and(...)`
 *         // evaluate to true
 *       }
 *     }
 *   }
 * });
 * ```
 *
 * @returns A guard action object
 */ function and(guards) {
    function and(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    and.check = checkAnd;
    and.guards = guards;
    return and;
}
function checkOr(snapshot, { context, event }, { guards }) {
    return guards.some((guard)=>evaluateGuard(guard, context, event, snapshot));
}
/**
 * Higher-order guard that evaluates to `true` if any of the `guards` passed to
 * it evaluate to `true`.
 *
 * @category Guards
 * @example
 *
 * ```ts
 * import { setup, or } from 'xstate';
 *
 * const machine = setup({
 *   guards: {
 *     someNamedGuard: () => true
 *   }
 * }).createMachine({
 *   on: {
 *     someEvent: {
 *       guard: or([({ context }) => context.value > 0, 'someNamedGuard']),
 *       actions: () => {
 *         // will be executed if any of the guards in `or(...)`
 *         // evaluate to true
 *       }
 *     }
 *   }
 * });
 * ```
 *
 * @returns A guard action object
 */ function or(guards) {
    function or(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    or.check = checkOr;
    or.guards = guards;
    return or;
}
// TODO: throw on cycles (depth check should be enough)
function evaluateGuard(guard, context, event, snapshot) {
    const { machine } = snapshot;
    const isInline = typeof guard === 'function';
    const resolved = isInline ? guard : machine.implementations.guards[typeof guard === 'string' ? guard : guard.type];
    if (!isInline && !resolved) {
        throw new Error(`Guard '${typeof guard === 'string' ? guard : guard.type}' is not implemented.'.`);
    }
    if (typeof resolved !== 'function') {
        return evaluateGuard(resolved, context, event, snapshot);
    }
    const guardArgs = {
        context,
        event
    };
    const guardParams = isInline || typeof guard === 'string' ? undefined : 'params' in guard ? typeof guard.params === 'function' ? guard.params({
        context,
        event
    }) : guard.params : undefined;
    if (!('check' in resolved)) {
        // the existing type of `.guards` assumes non-nullable `TExpressionGuard`
        // inline guards expect `TExpressionGuard` to be set to `undefined`
        // it's fine to cast this here, our logic makes sure that we call those 2 "variants" correctly
        return resolved(guardArgs, guardParams);
    }
    const builtinGuard = resolved;
    return builtinGuard.check(snapshot, guardArgs, resolved // this holds all params
    );
}
const isAtomicStateNode = (stateNode)=>stateNode.type === 'atomic' || stateNode.type === 'final';
function getChildren(stateNode) {
    return Object.values(stateNode.states).filter((sn)=>sn.type !== 'history');
}
function getProperAncestors(stateNode, toStateNode) {
    const ancestors = [];
    if (toStateNode === stateNode) {
        return ancestors;
    }
    // add all ancestors
    let m = stateNode.parent;
    while(m && m !== toStateNode){
        ancestors.push(m);
        m = m.parent;
    }
    return ancestors;
}
function getAllStateNodes(stateNodes) {
    const nodeSet = new Set(stateNodes);
    const adjList = getAdjList(nodeSet);
    // add descendants
    for (const s of nodeSet){
        // if previously active, add existing child nodes
        if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {
            getInitialStateNodesWithTheirAncestors(s).forEach((sn)=>nodeSet.add(sn));
        } else {
            if (s.type === 'parallel') {
                for (const child of getChildren(s)){
                    if (child.type === 'history') {
                        continue;
                    }
                    if (!nodeSet.has(child)) {
                        const initialStates = getInitialStateNodesWithTheirAncestors(child);
                        for (const initialStateNode of initialStates){
                            nodeSet.add(initialStateNode);
                        }
                    }
                }
            }
        }
    }
    // add all ancestors
    for (const s of nodeSet){
        let m = s.parent;
        while(m){
            nodeSet.add(m);
            m = m.parent;
        }
    }
    return nodeSet;
}
function getValueFromAdj(baseNode, adjList) {
    const childStateNodes = adjList.get(baseNode);
    if (!childStateNodes) {
        return {}; // todo: fix?
    }
    if (baseNode.type === 'compound') {
        const childStateNode = childStateNodes[0];
        if (childStateNode) {
            if (isAtomicStateNode(childStateNode)) {
                return childStateNode.key;
            }
        } else {
            return {};
        }
    }
    const stateValue = {};
    for (const childStateNode of childStateNodes){
        stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);
    }
    return stateValue;
}
function getAdjList(stateNodes) {
    const adjList = new Map();
    for (const s of stateNodes){
        if (!adjList.has(s)) {
            adjList.set(s, []);
        }
        if (s.parent) {
            if (!adjList.has(s.parent)) {
                adjList.set(s.parent, []);
            }
            adjList.get(s.parent).push(s);
        }
    }
    return adjList;
}
function getStateValue(rootNode, stateNodes) {
    const config = getAllStateNodes(stateNodes);
    return getValueFromAdj(rootNode, getAdjList(config));
}
function isInFinalState(stateNodeSet, stateNode) {
    if (stateNode.type === 'compound') {
        return getChildren(stateNode).some((s)=>s.type === 'final' && stateNodeSet.has(s));
    }
    if (stateNode.type === 'parallel') {
        return getChildren(stateNode).every((sn)=>isInFinalState(stateNodeSet, sn));
    }
    return stateNode.type === 'final';
}
const isStateId = (str)=>str[0] === STATE_IDENTIFIER;
function getCandidates(stateNode, receivedEventType) {
    const candidates = stateNode.transitions.get(receivedEventType) || [
        ...stateNode.transitions.keys()
    ].filter((eventDescriptor)=>{
        // check if transition is a wildcard transition,
        // which matches any non-transient events
        if (eventDescriptor === WILDCARD) {
            return true;
        }
        if (!eventDescriptor.endsWith('.*')) {
            return false;
        }
        if (/.*\*.+/.test(eventDescriptor)) {
            console.warn(`Wildcards can only be the last token of an event descriptor (e.g., "event.*") or the entire event descriptor ("*"). Check the "${eventDescriptor}" event.`);
        }
        const partialEventTokens = eventDescriptor.split('.');
        const eventTokens = receivedEventType.split('.');
        for(let tokenIndex = 0; tokenIndex < partialEventTokens.length; tokenIndex++){
            const partialEventToken = partialEventTokens[tokenIndex];
            const eventToken = eventTokens[tokenIndex];
            if (partialEventToken === '*') {
                const isLastToken = tokenIndex === partialEventTokens.length - 1;
                if (!isLastToken) {
                    console.warn(`Infix wildcards in transition events are not allowed. Check the "${eventDescriptor}" transition.`);
                }
                return isLastToken;
            }
            if (partialEventToken !== eventToken) {
                return false;
            }
        }
        return true;
    }).sort((a, b)=>b.length - a.length).flatMap((key)=>stateNode.transitions.get(key));
    return candidates;
}
/** All delayed transitions from the config. */ function getDelayedTransitions(stateNode) {
    const afterConfig = stateNode.config.after;
    if (!afterConfig) {
        return [];
    }
    const mutateEntryExit = (delay)=>{
        const afterEvent = createAfterEvent(delay, stateNode.id);
        const eventType = afterEvent.type;
        stateNode.entry.push(raise(afterEvent, {
            id: eventType,
            delay
        }));
        stateNode.exit.push(cancel(eventType));
        return eventType;
    };
    const delayedTransitions = Object.keys(afterConfig).flatMap((delay)=>{
        const configTransition = afterConfig[delay];
        const resolvedTransition = typeof configTransition === 'string' ? {
            target: configTransition
        } : configTransition;
        const resolvedDelay = Number.isNaN(+delay) ? delay : +delay;
        const eventType = mutateEntryExit(resolvedDelay);
        return toArray(resolvedTransition).map((transition)=>({
                ...transition,
                event: eventType,
                delay: resolvedDelay
            }));
    });
    return delayedTransitions.map((delayedTransition)=>{
        const { delay } = delayedTransition;
        return {
            ...formatTransition(stateNode, delayedTransition.event, delayedTransition),
            delay
        };
    });
}
function formatTransition(stateNode, descriptor, transitionConfig) {
    const normalizedTarget = normalizeTarget(transitionConfig.target);
    const reenter = transitionConfig.reenter ?? false;
    const target = resolveTarget(stateNode, normalizedTarget);
    // TODO: should this be part of a lint rule instead?
    if (transitionConfig.cond) {
        throw new Error(`State "${stateNode.id}" has declared \`cond\` for one of its transitions. This property has been renamed to \`guard\`. Please update your code.`);
    }
    const transition = {
        ...transitionConfig,
        actions: toArray(transitionConfig.actions),
        guard: transitionConfig.guard,
        target,
        source: stateNode,
        reenter,
        eventType: descriptor,
        toJSON: ()=>({
                ...transition,
                source: `#${stateNode.id}`,
                target: target ? target.map((t)=>`#${t.id}`) : undefined
            })
    };
    return transition;
}
function formatTransitions(stateNode) {
    const transitions = new Map();
    if (stateNode.config.on) {
        for (const descriptor of Object.keys(stateNode.config.on)){
            if (descriptor === NULL_EVENT) {
                throw new Error('Null events ("") cannot be specified as a transition key. Use `always: { ... }` instead.');
            }
            const transitionsConfig = stateNode.config.on[descriptor];
            transitions.set(descriptor, toTransitionConfigArray(transitionsConfig).map((t)=>formatTransition(stateNode, descriptor, t)));
        }
    }
    if (stateNode.config.onDone) {
        const descriptor = `xstate.done.state.${stateNode.id}`;
        transitions.set(descriptor, toTransitionConfigArray(stateNode.config.onDone).map((t)=>formatTransition(stateNode, descriptor, t)));
    }
    for (const invokeDef of stateNode.invoke){
        if (invokeDef.onDone) {
            const descriptor = `xstate.done.actor.${invokeDef.id}`;
            transitions.set(descriptor, toTransitionConfigArray(invokeDef.onDone).map((t)=>formatTransition(stateNode, descriptor, t)));
        }
        if (invokeDef.onError) {
            const descriptor = `xstate.error.actor.${invokeDef.id}`;
            transitions.set(descriptor, toTransitionConfigArray(invokeDef.onError).map((t)=>formatTransition(stateNode, descriptor, t)));
        }
        if (invokeDef.onSnapshot) {
            const descriptor = `xstate.snapshot.${invokeDef.id}`;
            transitions.set(descriptor, toTransitionConfigArray(invokeDef.onSnapshot).map((t)=>formatTransition(stateNode, descriptor, t)));
        }
    }
    for (const delayedTransition of stateNode.after){
        let existing = transitions.get(delayedTransition.eventType);
        if (!existing) {
            existing = [];
            transitions.set(delayedTransition.eventType, existing);
        }
        existing.push(delayedTransition);
    }
    return transitions;
}
function formatInitialTransition(stateNode, _target) {
    const resolvedTarget = typeof _target === 'string' ? stateNode.states[_target] : _target ? stateNode.states[_target.target] : undefined;
    if (!resolvedTarget && _target) {
        throw new Error(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-base-to-string
        `Initial state node "${_target}" not found on parent state node #${stateNode.id}`);
    }
    const transition = {
        source: stateNode,
        actions: !_target || typeof _target === 'string' ? [] : toArray(_target.actions),
        eventType: null,
        reenter: false,
        target: resolvedTarget ? [
            resolvedTarget
        ] : [],
        toJSON: ()=>({
                ...transition,
                source: `#${stateNode.id}`,
                target: resolvedTarget ? [
                    `#${resolvedTarget.id}`
                ] : []
            })
    };
    return transition;
}
function resolveTarget(stateNode, targets) {
    if (targets === undefined) {
        // an undefined target signals that the state node should not transition from that state when receiving that event
        return undefined;
    }
    return targets.map((target)=>{
        if (typeof target !== 'string') {
            return target;
        }
        if (isStateId(target)) {
            return stateNode.machine.getStateNodeById(target);
        }
        const isInternalTarget = target[0] === STATE_DELIMITER;
        // If internal target is defined on machine,
        // do not include machine key on target
        if (isInternalTarget && !stateNode.parent) {
            return getStateNodeByPath(stateNode, target.slice(1));
        }
        const resolvedTarget = isInternalTarget ? stateNode.key + target : target;
        if (stateNode.parent) {
            try {
                const targetStateNode = getStateNodeByPath(stateNode.parent, resolvedTarget);
                return targetStateNode;
            } catch (err) {
                throw new Error(`Invalid transition definition for state node '${stateNode.id}':\n${err.message}`);
            }
        } else {
            throw new Error(`Invalid target: "${target}" is not a valid target from the root node. Did you mean ".${target}"?`);
        }
    });
}
function resolveHistoryDefaultTransition(stateNode) {
    const normalizedTarget = normalizeTarget(stateNode.config.target);
    if (!normalizedTarget) {
        return stateNode.parent.initial;
    }
    return {
        target: normalizedTarget.map((t)=>typeof t === 'string' ? getStateNodeByPath(stateNode.parent, t) : t)
    };
}
function isHistoryNode(stateNode) {
    return stateNode.type === 'history';
}
function getInitialStateNodesWithTheirAncestors(stateNode) {
    const states = getInitialStateNodes(stateNode);
    for (const initialState of states){
        for (const ancestor of getProperAncestors(initialState, stateNode)){
            states.add(ancestor);
        }
    }
    return states;
}
function getInitialStateNodes(stateNode) {
    const set = new Set();
    function iter(descStateNode) {
        if (set.has(descStateNode)) {
            return;
        }
        set.add(descStateNode);
        if (descStateNode.type === 'compound') {
            iter(descStateNode.initial.target[0]);
        } else if (descStateNode.type === 'parallel') {
            for (const child of getChildren(descStateNode)){
                iter(child);
            }
        }
    }
    iter(stateNode);
    return set;
}
/** Returns the child state node from its relative `stateKey`, or throws. */ function getStateNode(stateNode, stateKey) {
    if (isStateId(stateKey)) {
        return stateNode.machine.getStateNodeById(stateKey);
    }
    if (!stateNode.states) {
        throw new Error(`Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`);
    }
    const result = stateNode.states[stateKey];
    if (!result) {
        throw new Error(`Child state '${stateKey}' does not exist on '${stateNode.id}'`);
    }
    return result;
}
/**
 * Returns the relative state node from the given `statePath`, or throws.
 *
 * @param statePath The string or string array relative path to the state node.
 */ function getStateNodeByPath(stateNode, statePath) {
    if (typeof statePath === 'string' && isStateId(statePath)) {
        try {
            return stateNode.machine.getStateNodeById(statePath);
        } catch  {
        // try individual paths
        // throw e;
        }
    }
    const arrayStatePath = toStatePath(statePath).slice();
    let currentStateNode = stateNode;
    while(arrayStatePath.length){
        const key = arrayStatePath.shift();
        if (!key.length) {
            break;
        }
        currentStateNode = getStateNode(currentStateNode, key);
    }
    return currentStateNode;
}
/**
 * Returns the state nodes represented by the current state value.
 *
 * @param stateValue The state value or State instance
 */ function getStateNodes(stateNode, stateValue) {
    if (typeof stateValue === 'string') {
        const childStateNode = stateNode.states[stateValue];
        if (!childStateNode) {
            throw new Error(`State '${stateValue}' does not exist on '${stateNode.id}'`);
        }
        return [
            stateNode,
            childStateNode
        ];
    }
    const childStateKeys = Object.keys(stateValue);
    const childStateNodes = childStateKeys.map((subStateKey)=>getStateNode(stateNode, subStateKey)).filter(Boolean);
    return [
        stateNode.machine.root,
        stateNode
    ].concat(childStateNodes, childStateKeys.reduce((allSubStateNodes, subStateKey)=>{
        const subStateNode = getStateNode(stateNode, subStateKey);
        if (!subStateNode) {
            return allSubStateNodes;
        }
        const subStateNodes = getStateNodes(subStateNode, stateValue[subStateKey]);
        return allSubStateNodes.concat(subStateNodes);
    }, []));
}
function transitionAtomicNode(stateNode, stateValue, snapshot, event) {
    const childStateNode = getStateNode(stateNode, stateValue);
    const next = childStateNode.next(snapshot, event);
    if (!next || !next.length) {
        return stateNode.next(snapshot, event);
    }
    return next;
}
function transitionCompoundNode(stateNode, stateValue, snapshot, event) {
    const subStateKeys = Object.keys(stateValue);
    const childStateNode = getStateNode(stateNode, subStateKeys[0]);
    const next = transitionNode(childStateNode, stateValue[subStateKeys[0]], snapshot, event);
    if (!next || !next.length) {
        return stateNode.next(snapshot, event);
    }
    return next;
}
function transitionParallelNode(stateNode, stateValue, snapshot, event) {
    const allInnerTransitions = [];
    for (const subStateKey of Object.keys(stateValue)){
        const subStateValue = stateValue[subStateKey];
        if (!subStateValue) {
            continue;
        }
        const subStateNode = getStateNode(stateNode, subStateKey);
        const innerTransitions = transitionNode(subStateNode, subStateValue, snapshot, event);
        if (innerTransitions) {
            allInnerTransitions.push(...innerTransitions);
        }
    }
    if (!allInnerTransitions.length) {
        return stateNode.next(snapshot, event);
    }
    return allInnerTransitions;
}
function transitionNode(stateNode, stateValue, snapshot, event) {
    // leaf node
    if (typeof stateValue === 'string') {
        return transitionAtomicNode(stateNode, stateValue, snapshot, event);
    }
    // compound node
    if (Object.keys(stateValue).length === 1) {
        return transitionCompoundNode(stateNode, stateValue, snapshot, event);
    }
    // parallel node
    return transitionParallelNode(stateNode, stateValue, snapshot, event);
}
function getHistoryNodes(stateNode) {
    return Object.keys(stateNode.states).map((key)=>stateNode.states[key]).filter((sn)=>sn.type === 'history');
}
function isDescendant(childStateNode, parentStateNode) {
    let marker = childStateNode;
    while(marker.parent && marker.parent !== parentStateNode){
        marker = marker.parent;
    }
    return marker.parent === parentStateNode;
}
function hasIntersection(s1, s2) {
    const set1 = new Set(s1);
    const set2 = new Set(s2);
    for (const item of set1){
        if (set2.has(item)) {
            return true;
        }
    }
    for (const item of set2){
        if (set1.has(item)) {
            return true;
        }
    }
    return false;
}
function removeConflictingTransitions(enabledTransitions, stateNodeSet, historyValue) {
    const filteredTransitions = new Set();
    for (const t1 of enabledTransitions){
        let t1Preempted = false;
        const transitionsToRemove = new Set();
        for (const t2 of filteredTransitions){
            if (hasIntersection(computeExitSet([
                t1
            ], stateNodeSet, historyValue), computeExitSet([
                t2
            ], stateNodeSet, historyValue))) {
                if (isDescendant(t1.source, t2.source)) {
                    transitionsToRemove.add(t2);
                } else {
                    t1Preempted = true;
                    break;
                }
            }
        }
        if (!t1Preempted) {
            for (const t3 of transitionsToRemove){
                filteredTransitions.delete(t3);
            }
            filteredTransitions.add(t1);
        }
    }
    return Array.from(filteredTransitions);
}
function findLeastCommonAncestor(stateNodes) {
    const [head, ...tail] = stateNodes;
    for (const ancestor of getProperAncestors(head, undefined)){
        if (tail.every((sn)=>isDescendant(sn, ancestor))) {
            return ancestor;
        }
    }
}
function getEffectiveTargetStates(transition, historyValue) {
    if (!transition.target) {
        return [];
    }
    const targets = new Set();
    for (const targetNode of transition.target){
        if (isHistoryNode(targetNode)) {
            if (historyValue[targetNode.id]) {
                for (const node of historyValue[targetNode.id]){
                    targets.add(node);
                }
            } else {
                for (const node of getEffectiveTargetStates(resolveHistoryDefaultTransition(targetNode), historyValue)){
                    targets.add(node);
                }
            }
        } else {
            targets.add(targetNode);
        }
    }
    return [
        ...targets
    ];
}
function getTransitionDomain(transition, historyValue) {
    const targetStates = getEffectiveTargetStates(transition, historyValue);
    if (!targetStates) {
        return;
    }
    if (!transition.reenter && targetStates.every((target)=>target === transition.source || isDescendant(target, transition.source))) {
        return transition.source;
    }
    const lca = findLeastCommonAncestor(targetStates.concat(transition.source));
    if (lca) {
        return lca;
    }
    // at this point we know that it's a root transition since LCA couldn't be found
    if (transition.reenter) {
        return;
    }
    return transition.source.machine.root;
}
function computeExitSet(transitions, stateNodeSet, historyValue) {
    const statesToExit = new Set();
    for (const t of transitions){
        if (t.target?.length) {
            const domain = getTransitionDomain(t, historyValue);
            if (t.reenter && t.source === domain) {
                statesToExit.add(domain);
            }
            for (const stateNode of stateNodeSet){
                if (isDescendant(stateNode, domain)) {
                    statesToExit.add(stateNode);
                }
            }
        }
    }
    return [
        ...statesToExit
    ];
}
function areStateNodeCollectionsEqual(prevStateNodes, nextStateNodeSet) {
    if (prevStateNodes.length !== nextStateNodeSet.size) {
        return false;
    }
    for (const node of prevStateNodes){
        if (!nextStateNodeSet.has(node)) {
            return false;
        }
    }
    return true;
}
/** https://www.w3.org/TR/scxml/#microstepProcedure */ function microstep(transitions, currentSnapshot, actorScope, event, isInitial, internalQueue) {
    if (!transitions.length) {
        return currentSnapshot;
    }
    const mutStateNodeSet = new Set(currentSnapshot._nodes);
    let historyValue = currentSnapshot.historyValue;
    const filteredTransitions = removeConflictingTransitions(transitions, mutStateNodeSet, historyValue);
    let nextState = currentSnapshot;
    // Exit states
    if (!isInitial) {
        [nextState, historyValue] = exitStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, historyValue, internalQueue, actorScope.actionExecutor);
    }
    // Execute transition content
    nextState = resolveActionsAndContext(nextState, event, actorScope, filteredTransitions.flatMap((t)=>t.actions), internalQueue, undefined);
    // Enter states
    nextState = enterStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial);
    const nextStateNodes = [
        ...mutStateNodeSet
    ];
    if (nextState.status === 'done') {
        nextState = resolveActionsAndContext(nextState, event, actorScope, nextStateNodes.sort((a, b)=>b.order - a.order).flatMap((state)=>state.exit), internalQueue, undefined);
    }
    // eslint-disable-next-line no-useless-catch
    try {
        if (historyValue === currentSnapshot.historyValue && areStateNodeCollectionsEqual(currentSnapshot._nodes, mutStateNodeSet)) {
            return nextState;
        }
        return cloneMachineSnapshot(nextState, {
            _nodes: nextStateNodes,
            historyValue
        });
    } catch (e) {
        // TODO: Refactor this once proper error handling is implemented.
        // See https://github.com/statelyai/rfcs/pull/4
        throw e;
    }
}
function getMachineOutput(snapshot, event, actorScope, rootNode, rootCompletionNode) {
    if (rootNode.output === undefined) {
        return;
    }
    const doneStateEvent = createDoneStateEvent(rootCompletionNode.id, rootCompletionNode.output !== undefined && rootCompletionNode.parent ? resolveOutput(rootCompletionNode.output, snapshot.context, event, actorScope.self) : undefined);
    return resolveOutput(rootNode.output, snapshot.context, doneStateEvent, actorScope.self);
}
function enterStates(currentSnapshot, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial) {
    let nextSnapshot = currentSnapshot;
    const statesToEnter = new Set();
    // those are states that were directly targeted or indirectly targeted by the explicit target
    // in other words, those are states for which initial actions should be executed
    // when we target `#deep_child` initial actions of its ancestors shouldn't be executed
    const statesForDefaultEntry = new Set();
    computeEntrySet(filteredTransitions, historyValue, statesForDefaultEntry, statesToEnter);
    // In the initial state, the root state node is "entered".
    if (isInitial) {
        statesForDefaultEntry.add(currentSnapshot.machine.root);
    }
    const completedNodes = new Set();
    for (const stateNodeToEnter of [
        ...statesToEnter
    ].sort((a, b)=>a.order - b.order)){
        mutStateNodeSet.add(stateNodeToEnter);
        const actions = [];
        // Add entry actions
        actions.push(...stateNodeToEnter.entry);
        for (const invokeDef of stateNodeToEnter.invoke){
            actions.push(spawnChild(invokeDef.src, {
                ...invokeDef,
                syncSnapshot: !!invokeDef.onSnapshot
            }));
        }
        if (statesForDefaultEntry.has(stateNodeToEnter)) {
            const initialActions = stateNodeToEnter.initial.actions;
            actions.push(...initialActions);
        }
        nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, actions, internalQueue, stateNodeToEnter.invoke.map((invokeDef)=>invokeDef.id));
        if (stateNodeToEnter.type === 'final') {
            const parent = stateNodeToEnter.parent;
            let ancestorMarker = parent?.type === 'parallel' ? parent : parent?.parent;
            let rootCompletionNode = ancestorMarker || stateNodeToEnter;
            if (parent?.type === 'compound') {
                internalQueue.push(createDoneStateEvent(parent.id, stateNodeToEnter.output !== undefined ? resolveOutput(stateNodeToEnter.output, nextSnapshot.context, event, actorScope.self) : undefined));
            }
            while(ancestorMarker?.type === 'parallel' && !completedNodes.has(ancestorMarker) && isInFinalState(mutStateNodeSet, ancestorMarker)){
                completedNodes.add(ancestorMarker);
                internalQueue.push(createDoneStateEvent(ancestorMarker.id));
                rootCompletionNode = ancestorMarker;
                ancestorMarker = ancestorMarker.parent;
            }
            if (ancestorMarker) {
                continue;
            }
            nextSnapshot = cloneMachineSnapshot(nextSnapshot, {
                status: 'done',
                output: getMachineOutput(nextSnapshot, event, actorScope, nextSnapshot.machine.root, rootCompletionNode)
            });
        }
    }
    return nextSnapshot;
}
function computeEntrySet(transitions, historyValue, statesForDefaultEntry, statesToEnter) {
    for (const t of transitions){
        const domain = getTransitionDomain(t, historyValue);
        for (const s of t.target || []){
            if (!isHistoryNode(s) && (// if the target is different than the source then it will *definitely* be entered
            t.source !== s || // we know that the domain can't lie within the source
            // if it's different than the source then it's outside of it and it means that the target has to be entered as well
            t.source !== domain || // reentering transitions always enter the target, even if it's the source itself
            t.reenter)) {
                statesToEnter.add(s);
                statesForDefaultEntry.add(s);
            }
            addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);
        }
        const targetStates = getEffectiveTargetStates(t, historyValue);
        for (const s of targetStates){
            const ancestors = getProperAncestors(s, domain);
            if (domain?.type === 'parallel') {
                ancestors.push(domain);
            }
            addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, !t.source.parent && t.reenter ? undefined : domain);
        }
    }
}
function addDescendantStatesToEnter(stateNode, historyValue, statesForDefaultEntry, statesToEnter) {
    if (isHistoryNode(stateNode)) {
        if (historyValue[stateNode.id]) {
            const historyStateNodes = historyValue[stateNode.id];
            for (const s of historyStateNodes){
                statesToEnter.add(s);
                addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);
            }
            for (const s of historyStateNodes){
                addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);
            }
        } else {
            const historyDefaultTransition = resolveHistoryDefaultTransition(stateNode);
            for (const s of historyDefaultTransition.target){
                statesToEnter.add(s);
                if (historyDefaultTransition === stateNode.parent?.initial) {
                    statesForDefaultEntry.add(stateNode.parent);
                }
                addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);
            }
            for (const s of historyDefaultTransition.target){
                addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);
            }
        }
    } else {
        if (stateNode.type === 'compound') {
            const [initialState] = stateNode.initial.target;
            if (!isHistoryNode(initialState)) {
                statesToEnter.add(initialState);
                statesForDefaultEntry.add(initialState);
            }
            addDescendantStatesToEnter(initialState, historyValue, statesForDefaultEntry, statesToEnter);
            addProperAncestorStatesToEnter(initialState, stateNode, statesToEnter, historyValue, statesForDefaultEntry);
        } else {
            if (stateNode.type === 'parallel') {
                for (const child of getChildren(stateNode).filter((sn)=>!isHistoryNode(sn))){
                    if (![
                        ...statesToEnter
                    ].some((s)=>isDescendant(s, child))) {
                        if (!isHistoryNode(child)) {
                            statesToEnter.add(child);
                            statesForDefaultEntry.add(child);
                        }
                        addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);
                    }
                }
            }
        }
    }
}
function addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, reentrancyDomain) {
    for (const anc of ancestors){
        if (!reentrancyDomain || isDescendant(anc, reentrancyDomain)) {
            statesToEnter.add(anc);
        }
        if (anc.type === 'parallel') {
            for (const child of getChildren(anc).filter((sn)=>!isHistoryNode(sn))){
                if (![
                    ...statesToEnter
                ].some((s)=>isDescendant(s, child))) {
                    statesToEnter.add(child);
                    addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);
                }
            }
        }
    }
}
function addProperAncestorStatesToEnter(stateNode, toStateNode, statesToEnter, historyValue, statesForDefaultEntry) {
    addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, getProperAncestors(stateNode, toStateNode));
}
function exitStates(currentSnapshot, event, actorScope, transitions, mutStateNodeSet, historyValue, internalQueue, _actionExecutor) {
    let nextSnapshot = currentSnapshot;
    const statesToExit = computeExitSet(transitions, mutStateNodeSet, historyValue);
    statesToExit.sort((a, b)=>b.order - a.order);
    let changedHistory;
    // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates
    for (const exitStateNode of statesToExit){
        for (const historyNode of getHistoryNodes(exitStateNode)){
            let predicate;
            if (historyNode.history === 'deep') {
                predicate = (sn)=>isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);
            } else {
                predicate = (sn)=>{
                    return sn.parent === exitStateNode;
                };
            }
            changedHistory ??= {
                ...historyValue
            };
            changedHistory[historyNode.id] = Array.from(mutStateNodeSet).filter(predicate);
        }
    }
    for (const s of statesToExit){
        nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, [
            ...s.exit,
            ...s.invoke.map((def)=>stopChild(def.id))
        ], internalQueue, undefined);
        mutStateNodeSet.delete(s);
    }
    return [
        nextSnapshot,
        changedHistory || historyValue
    ];
}
function getAction(machine, actionType) {
    return machine.implementations.actions[actionType];
}
function resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, extra, retries) {
    const { machine } = currentSnapshot;
    let intermediateSnapshot = currentSnapshot;
    for (const action of actions){
        const isInline = typeof action === 'function';
        const resolvedAction = isInline ? action : // the existing type of `.actions` assumes non-nullable `TExpressionAction`
        // it's fine to cast this here to get a common type and lack of errors in the rest of the code
        // our logic below makes sure that we call those 2 "variants" correctly
        getAction(machine, typeof action === 'string' ? action : action.type);
        const actionArgs = {
            context: intermediateSnapshot.context,
            event,
            self: actorScope.self,
            system: actorScope.system
        };
        const actionParams = isInline || typeof action === 'string' ? undefined : 'params' in action ? typeof action.params === 'function' ? action.params({
            context: intermediateSnapshot.context,
            event
        }) : action.params : undefined;
        if (!resolvedAction || !('resolve' in resolvedAction)) {
            actorScope.actionExecutor({
                type: typeof action === 'string' ? action : typeof action === 'object' ? action.type : action.name || '(anonymous)',
                info: actionArgs,
                params: actionParams,
                exec: resolvedAction
            });
            continue;
        }
        const builtinAction = resolvedAction;
        const [nextState, params, actions] = builtinAction.resolve(actorScope, intermediateSnapshot, actionArgs, actionParams, resolvedAction, // this holds all params
        extra);
        intermediateSnapshot = nextState;
        if ('retryResolve' in builtinAction) {
            retries?.push([
                builtinAction,
                params
            ]);
        }
        if ('execute' in builtinAction) {
            actorScope.actionExecutor({
                type: builtinAction.type,
                info: actionArgs,
                params,
                exec: builtinAction.execute.bind(null, actorScope, params)
            });
        }
        if (actions) {
            intermediateSnapshot = resolveAndExecuteActionsWithContext(intermediateSnapshot, event, actorScope, actions, extra, retries);
        }
    }
    return intermediateSnapshot;
}
function resolveActionsAndContext(currentSnapshot, event, actorScope, actions, internalQueue, deferredActorIds) {
    const retries = deferredActorIds ? [] : undefined;
    const nextState = resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, {
        internalQueue,
        deferredActorIds
    }, retries);
    retries?.forEach(([builtinAction, params])=>{
        builtinAction.retryResolve(actorScope, nextState, params);
    });
    return nextState;
}
function macrostep(snapshot, event, actorScope, internalQueue) {
    if (event.type === WILDCARD) {
        throw new Error(`An event cannot have the wildcard type ('${WILDCARD}')`);
    }
    let nextSnapshot = snapshot;
    const microstates = [];
    function addMicrostate(microstate, event, transitions) {
        actorScope.system._sendInspectionEvent({
            type: '@xstate.microstep',
            actorRef: actorScope.self,
            event,
            snapshot: microstate,
            _transitions: transitions
        });
        microstates.push(microstate);
    }
    // Handle stop event
    if (event.type === XSTATE_STOP) {
        nextSnapshot = cloneMachineSnapshot(stopChildren(nextSnapshot, event, actorScope), {
            status: 'stopped'
        });
        addMicrostate(nextSnapshot, event, []);
        return {
            snapshot: nextSnapshot,
            microstates
        };
    }
    let nextEvent = event;
    // Assume the state is at rest (no raised events)
    // Determine the next state based on the next microstep
    if (nextEvent.type !== XSTATE_INIT) {
        const currentEvent = nextEvent;
        const isErr = isErrorActorEvent(currentEvent);
        const transitions = selectTransitions(currentEvent, nextSnapshot);
        if (isErr && !transitions.length) {
            // TODO: we should likely only allow transitions selected by very explicit descriptors
            // `*` shouldn't be matched, likely `xstate.error.*` shouldn't be either
            // similarly `xstate.error.actor.*` and `xstate.error.actor.todo.*` have to be considered too
            nextSnapshot = cloneMachineSnapshot(snapshot, {
                status: 'error',
                error: currentEvent.error
            });
            addMicrostate(nextSnapshot, currentEvent, []);
            return {
                snapshot: nextSnapshot,
                microstates
            };
        }
        nextSnapshot = microstep(transitions, snapshot, actorScope, nextEvent, false, // isInitial
        internalQueue);
        addMicrostate(nextSnapshot, currentEvent, transitions);
    }
    let shouldSelectEventlessTransitions = true;
    while(nextSnapshot.status === 'active'){
        let enabledTransitions = shouldSelectEventlessTransitions ? selectEventlessTransitions(nextSnapshot, nextEvent) : [];
        // eventless transitions should always be selected after selecting *regular* transitions
        // by assigning `undefined` to `previousState` we ensure that `shouldSelectEventlessTransitions` gets always computed to true in such a case
        const previousState = enabledTransitions.length ? nextSnapshot : undefined;
        if (!enabledTransitions.length) {
            if (!internalQueue.length) {
                break;
            }
            nextEvent = internalQueue.shift();
            enabledTransitions = selectTransitions(nextEvent, nextSnapshot);
        }
        nextSnapshot = microstep(enabledTransitions, nextSnapshot, actorScope, nextEvent, false, internalQueue);
        shouldSelectEventlessTransitions = nextSnapshot !== previousState;
        addMicrostate(nextSnapshot, nextEvent, enabledTransitions);
    }
    if (nextSnapshot.status !== 'active') {
        stopChildren(nextSnapshot, nextEvent, actorScope);
    }
    return {
        snapshot: nextSnapshot,
        microstates
    };
}
function stopChildren(nextState, event, actorScope) {
    return resolveActionsAndContext(nextState, event, actorScope, Object.values(nextState.children).map((child)=>stopChild(child)), [], undefined);
}
function selectTransitions(event, nextState) {
    return nextState.machine.getTransitionData(nextState, event);
}
function selectEventlessTransitions(nextState, event) {
    const enabledTransitionSet = new Set();
    const atomicStates = nextState._nodes.filter(isAtomicStateNode);
    for (const stateNode of atomicStates){
        loop: for (const s of [
            stateNode
        ].concat(getProperAncestors(stateNode, undefined))){
            if (!s.always) {
                continue;
            }
            for (const transition of s.always){
                if (transition.guard === undefined || evaluateGuard(transition.guard, nextState.context, event, nextState)) {
                    enabledTransitionSet.add(transition);
                    break loop;
                }
            }
        }
    }
    return removeConflictingTransitions(Array.from(enabledTransitionSet), new Set(nextState._nodes), nextState.historyValue);
}
/**
 * Resolves a partial state value with its full representation in the state
 * node's machine.
 *
 * @param stateValue The partial state value to resolve.
 */ function resolveStateValue(rootNode, stateValue) {
    const allStateNodes = getAllStateNodes(getStateNodes(rootNode, stateValue));
    return getStateValue(rootNode, [
        ...allStateNodes
    ]);
}
function isMachineSnapshot(value) {
    return !!value && typeof value === 'object' && 'machine' in value && 'value' in value;
}
const machineSnapshotMatches = function matches(testValue) {
    return matchesState(testValue, this.value);
};
const machineSnapshotHasTag = function hasTag(tag) {
    return this.tags.has(tag);
};
const machineSnapshotCan = function can(event) {
    if (!this.machine) {
        console.warn(`state.can(...) used outside of a machine-created State object; this will always return false.`);
    }
    const transitionData = this.machine.getTransitionData(this, event);
    return !!transitionData?.length && // Check that at least one transition is not forbidden
    transitionData.some((t)=>t.target !== undefined || t.actions.length);
};
const machineSnapshotToJSON = function toJSON() {
    const { _nodes: nodes, tags, machine, getMeta, toJSON, can, hasTag, matches, ...jsonValues } = this;
    return {
        ...jsonValues,
        tags: Array.from(tags)
    };
};
const machineSnapshotGetMeta = function getMeta() {
    return this._nodes.reduce((acc, stateNode)=>{
        if (stateNode.meta !== undefined) {
            acc[stateNode.id] = stateNode.meta;
        }
        return acc;
    }, {});
};
function createMachineSnapshot(config, machine) {
    return {
        status: config.status,
        output: config.output,
        error: config.error,
        machine,
        context: config.context,
        _nodes: config._nodes,
        value: getStateValue(machine.root, config._nodes),
        tags: new Set(config._nodes.flatMap((sn)=>sn.tags)),
        children: config.children,
        historyValue: config.historyValue || {},
        matches: machineSnapshotMatches,
        hasTag: machineSnapshotHasTag,
        can: machineSnapshotCan,
        getMeta: machineSnapshotGetMeta,
        toJSON: machineSnapshotToJSON
    };
}
function cloneMachineSnapshot(snapshot, config = {}) {
    return createMachineSnapshot({
        ...snapshot,
        ...config
    }, snapshot.machine);
}
function serializeHistoryValue(historyValue) {
    if (typeof historyValue !== 'object' || historyValue === null) {
        return {};
    }
    const result = {};
    for(const key in historyValue){
        const value = historyValue[key];
        if (Array.isArray(value)) {
            result[key] = value.map((item)=>({
                    id: item.id
                }));
        }
    }
    return result;
}
function getPersistedSnapshot(snapshot, options) {
    const { _nodes: nodes, tags, machine, children, context, can, hasTag, matches, getMeta, toJSON, ...jsonValues } = snapshot;
    const childrenJson = {};
    for(const id in children){
        const child = children[id];
        if (typeof child.src !== 'string' && (!options || !('__unsafeAllowInlineActors' in options))) {
            throw new Error('An inline child actor cannot be persisted.');
        }
        childrenJson[id] = {
            snapshot: child.getPersistedSnapshot(options),
            src: child.src,
            systemId: child._systemId,
            syncSnapshot: child._syncSnapshot
        };
    }
    const persisted = {
        ...jsonValues,
        context: persistContext(context),
        children: childrenJson,
        historyValue: serializeHistoryValue(jsonValues.historyValue)
    };
    return persisted;
}
function persistContext(contextPart) {
    let copy;
    for(const key in contextPart){
        const value = contextPart[key];
        if (value && typeof value === 'object') {
            if ('sessionId' in value && 'send' in value && 'ref' in value) {
                copy ??= Array.isArray(contextPart) ? contextPart.slice() : {
                    ...contextPart
                };
                copy[key] = {
                    xstate$$type: $$ACTOR_TYPE,
                    id: value.id
                };
            } else {
                const result = persistContext(value);
                if (result !== value) {
                    copy ??= Array.isArray(contextPart) ? contextPart.slice() : {
                        ...contextPart
                    };
                    copy[key] = result;
                }
            }
        }
    }
    return copy ?? contextPart;
}
function resolveRaise(_, snapshot, args, actionParams, { event: eventOrExpr, id, delay }, { internalQueue }) {
    const delaysMap = snapshot.machine.implementations.delays;
    if (typeof eventOrExpr === 'string') {
        throw new Error(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `Only event objects may be used with raise; use raise({ type: "${eventOrExpr}" }) instead`);
    }
    const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;
    let resolvedDelay;
    if (typeof delay === 'string') {
        const configDelay = delaysMap && delaysMap[delay];
        resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;
    } else {
        resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;
    }
    if (typeof resolvedDelay !== 'number') {
        internalQueue.push(resolvedEvent);
    }
    return [
        snapshot,
        {
            event: resolvedEvent,
            id,
            delay: resolvedDelay
        },
        undefined
    ];
}
function executeRaise(actorScope, params) {
    const { event, delay, id } = params;
    if (typeof delay === 'number') {
        actorScope.defer(()=>{
            const self = actorScope.self;
            actorScope.system.scheduler.schedule(self, self, event, delay, id);
        });
        return;
    }
}
/**
 * Raises an event. This places the event in the internal event queue, so that
 * the event is immediately consumed by the machine in the current step.
 *
 * @param eventType The event to raise.
 */ function raise(eventOrExpr, options) {
    if (executingCustomAction) {
        console.warn('Custom actions should not call `raise()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');
    }
    function raise(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    raise.type = 'xstate.raise';
    raise.event = eventOrExpr;
    raise.id = options?.id;
    raise.delay = options?.delay;
    raise.resolve = resolveRaise;
    raise.execute = executeRaise;
    return raise;
}
;
}}),
"[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export e as toObserver>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "toObserver": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export c as createActor>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createActor": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function is(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var React = __turbopack_context__.r("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"), shim = __turbopack_context__.r("[project]/node_modules/use-sync-external-store/shim/index.js [app-client] (ecmascript)"), objectIs = "function" === typeof Object.is ? Object.is : is, useSyncExternalStore = shim.useSyncExternalStore, useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue;
    exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
        var instRef = useRef(null);
        if (null === instRef.current) {
            var inst = {
                hasValue: !1,
                value: null
            };
            instRef.current = inst;
        } else inst = instRef.current;
        instRef = useMemo(function() {
            function memoizedSelector(nextSnapshot) {
                if (!hasMemo) {
                    hasMemo = !0;
                    memoizedSnapshot = nextSnapshot;
                    nextSnapshot = selector(nextSnapshot);
                    if (void 0 !== isEqual && inst.hasValue) {
                        var currentSelection = inst.value;
                        if (isEqual(currentSelection, nextSnapshot)) return memoizedSelection = currentSelection;
                    }
                    return memoizedSelection = nextSnapshot;
                }
                currentSelection = memoizedSelection;
                if (objectIs(memoizedSnapshot, nextSnapshot)) return currentSelection;
                var nextSelection = selector(nextSnapshot);
                if (void 0 !== isEqual && isEqual(currentSelection, nextSelection)) return memoizedSnapshot = nextSnapshot, currentSelection;
                memoizedSnapshot = nextSnapshot;
                return memoizedSelection = nextSelection;
            }
            var hasMemo = !1, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
            return [
                function() {
                    return memoizedSelector(getSnapshot());
                },
                null === maybeGetServerSnapshot ? void 0 : function() {
                    return memoizedSelector(maybeGetServerSnapshot());
                }
            ];
        }, [
            getSnapshot,
            getServerSnapshot,
            selector,
            isEqual
        ]);
        var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
        useEffect(function() {
            inst.hasValue = !0;
            inst.value = value;
        }, [
            value
        ]);
        useDebugValue(value);
        return value;
    };
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
}();
}}),
"[project]/node_modules/use-sync-external-store/shim/with-selector.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_context__.r("[project]/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js [app-client] (ecmascript)");
}
}}),
"[project]/node_modules/@xstate/react/dist/xstate-react.development.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createActorContext": (()=>createActorContext),
    "shallowEqual": (()=>shallowEqual),
    "useActor": (()=>useActor),
    "useActorRef": (()=>useActorRef),
    "useMachine": (()=>useMachine),
    "useSelector": (()=>useSelector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$isomorphic$2d$layout$2d$effect$2f$dist$2f$use$2d$isomorphic$2d$layout$2d$effect$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__e__as__toObserver$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export e as toObserver>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__c__as__createActor$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export c as createActor>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$sync$2d$external$2d$store$2f$shim$2f$with$2d$selector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/use-sync-external-store/shim/with-selector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$sync$2d$external$2d$store$2f$shim$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/use-sync-external-store/shim/index.js [app-client] (ecmascript)");
;
;
;
;
;
;
const forEachActor = (actorRef, callback)=>{
    callback(actorRef);
    const children = actorRef.getSnapshot().children;
    if (children) {
        Object.values(children).forEach((child)=>{
            forEachActor(child, callback);
        });
    }
};
function stopRootWithRehydration(actorRef) {
    // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references
    // we do it to avoid setState in useEffect when the effect gets "reconnected"
    // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API
    // it also just allows us to end up with a somewhat more predictable behavior for the users
    const persistedSnapshots = [];
    forEachActor(actorRef, (ref)=>{
        persistedSnapshots.push([
            ref,
            ref.getSnapshot()
        ]);
        // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot
        // React reconnects its subscribers (from the useSyncExternalStore) on its own
        // and userland subscribers should basically always do the same anyway
        // as each subscription should have its own cleanup logic and that should be called each such reconnect
        ref.observers = new Set();
    });
    const systemSnapshot = actorRef.system.getSnapshot?.();
    actorRef.stop();
    actorRef.system._snapshot = systemSnapshot;
    persistedSnapshots.forEach(([ref, snapshot])=>{
        ref._processingStatus = 0;
        ref._snapshot = snapshot;
    });
}
function useIdleActorRef(logic, ...[options]) {
    let [[currentConfig, actorRef], setCurrent] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])({
        "useIdleActorRef.useState": ()=>{
            const actorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__c__as__createActor$3e$__["createActor"])(logic, options);
            return [
                logic.config,
                actorRef
            ];
        }
    }["useIdleActorRef.useState"]);
    if (logic.config !== currentConfig) {
        const newActorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__c__as__createActor$3e$__["createActor"])(logic, {
            ...options,
            snapshot: actorRef.getPersistedSnapshot({
                __unsafeAllowInlineActors: true
            })
        });
        setCurrent([
            logic.config,
            newActorRef
        ]);
        actorRef = newActorRef;
    }
    // TODO: consider using `useAsapEffect` that would do this in `useInsertionEffect` is that's available
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$isomorphic$2d$layout$2d$effect$2f$dist$2f$use$2d$isomorphic$2d$layout$2d$effect$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
        "useIdleActorRef.useIsomorphicLayoutEffect": ()=>{
            actorRef.logic.implementations = logic.implementations;
        }
    }["useIdleActorRef.useIsomorphicLayoutEffect"]);
    return actorRef;
}
function useActorRef(machine, ...[options, observerOrListener]) {
    const actorRef = useIdleActorRef(machine, options);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "useActorRef.useEffect": ()=>{
            if (!observerOrListener) {
                return;
            }
            const sub = actorRef.subscribe((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__e__as__toObserver$3e$__["toObserver"])(observerOrListener));
            return ({
                "useActorRef.useEffect": ()=>{
                    sub.unsubscribe();
                }
            })["useActorRef.useEffect"];
        }
    }["useActorRef.useEffect"], [
        observerOrListener
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "useActorRef.useEffect": ()=>{
            actorRef.start();
            return ({
                "useActorRef.useEffect": ()=>{
                    stopRootWithRehydration(actorRef);
                }
            })["useActorRef.useEffect"];
        }
    }["useActorRef.useEffect"], [
        actorRef
    ]);
    return actorRef;
}
function defaultCompare(a, b) {
    return a === b;
}
function useSelector(actor, selector, compare = defaultCompare) {
    const subscribe = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useSelector.useCallback[subscribe]": (handleStoreChange)=>{
            if (!actor) {
                return ({
                    "useSelector.useCallback[subscribe]": ()=>{}
                })["useSelector.useCallback[subscribe]"];
            }
            const { unsubscribe } = actor.subscribe(handleStoreChange);
            return unsubscribe;
        }
    }["useSelector.useCallback[subscribe]"], [
        actor
    ]);
    const boundGetSnapshot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useSelector.useCallback[boundGetSnapshot]": ()=>actor?.getSnapshot()
    }["useSelector.useCallback[boundGetSnapshot]"], [
        actor
    ]);
    const selectedSnapshot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$sync$2d$external$2d$store$2f$shim$2f$with$2d$selector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSyncExternalStoreWithSelector"])(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);
    return selectedSnapshot;
}
function createActorContext(actorLogic, actorOptions) {
    const ReactContext = /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(null);
    const OriginalProvider = ReactContext.Provider;
    function Provider({ children, logic: providedLogic = actorLogic, machine, options: providedOptions }) {
        if (machine) {
            throw new Error(`The "machine" prop has been deprecated. Please use "logic" instead.`);
        }
        const actor = useActorRef(providedLogic, {
            ...actorOptions,
            ...providedOptions
        });
        return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createElement"])(OriginalProvider, {
            value: actor,
            children
        });
    }
    // TODO: add properties to actor ref to make more descriptive
    Provider.displayName = `ActorProvider`;
    function useContext() {
        const actor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(ReactContext);
        if (!actor) {
            throw new Error(`You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}> component.`);
        }
        return actor;
    }
    function useSelector$1(selector, compare) {
        const actor = useContext();
        return useSelector(actor, selector, compare);
    }
    return {
        Provider: Provider,
        useActorRef: useContext,
        useSelector: useSelector$1
    };
}
// From https://github.com/reduxjs/react-redux/blob/720f0ba79236cdc3e1115f4ef9a7760a21784b48/src/utils/shallowEqual.ts
function is(x, y) {
    if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
        return x !== x && y !== y;
    }
}
function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
    }
    const keysA = Object.keys(objA);
    const keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for(let i = 0; i < keysA.length; i++){
        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
            return false;
        }
    }
    return true;
}
function useActor(logic, ...[options]) {
    if (!!logic && 'send' in logic && typeof logic.send === 'function') {
        throw new Error(`useActor() expects actor logic (e.g. a machine), but received an ActorRef. Use the useSelector(actorRef, ...) hook instead to read the ActorRef's snapshot.`);
    }
    const actorRef = useIdleActorRef(logic, options);
    const getSnapshot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useActor.useCallback[getSnapshot]": ()=>{
            return actorRef.getSnapshot();
        }
    }["useActor.useCallback[getSnapshot]"], [
        actorRef
    ]);
    const subscribe = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useActor.useCallback[subscribe]": (handleStoreChange)=>{
            const { unsubscribe } = actorRef.subscribe(handleStoreChange);
            return unsubscribe;
        }
    }["useActor.useCallback[subscribe]"], [
        actorRef
    ]);
    const actorSnapshot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$sync$2d$external$2d$store$2f$shim$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSyncExternalStore"])(subscribe, getSnapshot, getSnapshot);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "useActor.useEffect": ()=>{
            actorRef.start();
            return ({
                "useActor.useEffect": ()=>{
                    stopRootWithRehydration(actorRef);
                }
            })["useActor.useEffect"];
        }
    }["useActor.useEffect"], [
        actorRef
    ]);
    return [
        actorSnapshot,
        actorRef.send,
        actorRef
    ];
}
/** @alias useActor */ function useMachine(machine, ...[options]) {
    return useActor(machine, options);
}
;
}}),
"[project]/node_modules/xstate/dist/assign-6313ccb3.development.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "a": (()=>assign)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
;
function createSpawner(actorScope, { machine, context }, event, spawnedChildren) {
    const spawn = (src, options)=>{
        if (typeof src === 'string') {
            const logic = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"])(machine, src);
            if (!logic) {
                throw new Error(`Actor logic '${src}' not implemented in machine '${machine.id}'`);
            }
            const actorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(logic, {
                id: options?.id,
                parent: actorScope.self,
                syncSnapshot: options?.syncSnapshot,
                input: typeof options?.input === 'function' ? options.input({
                    context,
                    event,
                    self: actorScope.self
                }) : options?.input,
                src,
                systemId: options?.systemId
            });
            spawnedChildren[actorRef.id] = actorRef;
            return actorRef;
        } else {
            const actorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(src, {
                id: options?.id,
                parent: actorScope.self,
                syncSnapshot: options?.syncSnapshot,
                input: options?.input,
                src,
                systemId: options?.systemId
            });
            return actorRef;
        }
    };
    return (src, options)=>{
        const actorRef = spawn(src, options); // TODO: fix types
        spawnedChildren[actorRef.id] = actorRef;
        actorScope.defer(()=>{
            if (actorRef._processingStatus === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["W"].Stopped) {
                return;
            }
            actorRef.start();
        });
        return actorRef;
    };
}
function resolveAssign(actorScope, snapshot, actionArgs, actionParams, { assignment }) {
    if (!snapshot.context) {
        throw new Error('Cannot assign to undefined `context`. Ensure that `context` is defined in the machine config.');
    }
    const spawnedChildren = {};
    const assignArgs = {
        context: snapshot.context,
        event: actionArgs.event,
        spawn: createSpawner(actorScope, snapshot, actionArgs.event, spawnedChildren),
        self: actorScope.self,
        system: actorScope.system
    };
    let partialUpdate = {};
    if (typeof assignment === 'function') {
        partialUpdate = assignment(assignArgs, actionParams);
    } else {
        for (const key of Object.keys(assignment)){
            const propAssignment = assignment[key];
            partialUpdate[key] = typeof propAssignment === 'function' ? propAssignment(assignArgs, actionParams) : propAssignment;
        }
    }
    const updatedContext = Object.assign({}, snapshot.context, partialUpdate);
    return [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Y"])(snapshot, {
            context: updatedContext,
            children: Object.keys(spawnedChildren).length ? {
                ...snapshot.children,
                ...spawnedChildren
            } : snapshot.children
        }),
        undefined,
        undefined
    ];
}
/**
 * Updates the current context of the machine.
 *
 * @example
 *
 * ```ts
 * import { createMachine, assign } from 'xstate';
 *
 * const countMachine = createMachine({
 *   context: {
 *     count: 0,
 *     message: ''
 *   },
 *   on: {
 *     inc: {
 *       actions: assign({
 *         count: ({ context }) => context.count + 1
 *       })
 *     },
 *     updateMessage: {
 *       actions: assign(({ context, event }) => {
 *         return {
 *           message: event.message.trim()
 *         };
 *       })
 *     }
 *   }
 * });
 * ```
 *
 * @param assignment An object that represents the partial context to update, or
 *   a function that returns an object that represents the partial context to
 *   update.
 */ function assign(assignment) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"]) {
        console.warn('Custom actions should not call `assign()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');
    }
    function assign(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    assign.type = 'xstate.assign';
    assign.assignment = assignment;
    assign.resolve = resolveAssign;
    return assign;
}
;
}}),
"[project]/node_modules/xstate/dist/assign-6313ccb3.development.esm.js [app-client] (ecmascript) <export a as assign>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "assign": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/assign-6313ccb3.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "S": (()=>SpecialTargets),
    "a": (()=>enqueueActions),
    "b": (()=>sendTo),
    "e": (()=>emit),
    "f": (()=>forwardTo),
    "l": (()=>log),
    "s": (()=>sendParent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/assign-6313ccb3.development.esm.js [app-client] (ecmascript)");
;
;
function resolveEmit(_, snapshot, args, actionParams, { event: eventOrExpr }) {
    const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;
    return [
        snapshot,
        {
            event: resolvedEvent
        },
        undefined
    ];
}
function executeEmit(actorScope, { event }) {
    actorScope.defer(()=>actorScope.emit(event));
}
/**
 * Emits an event to event handlers registered on the actor via `actor.on(event,
 * handler)`.
 *
 * @example
 *
 * ```ts
 * import { emit } from 'xstate';
 *
 * const machine = createMachine({
 *   // ...
 *   on: {
 *     something: {
 *       actions: emit({
 *         type: 'emitted',
 *         some: 'data'
 *       })
 *     }
 *   }
 *   // ...
 * });
 *
 * const actor = createActor(machine).start();
 *
 * actor.on('emitted', (event) => {
 *   console.log(event);
 * });
 *
 * actor.send({ type: 'something' });
 * // logs:
 * // {
 * //   type: 'emitted',
 * //   some: 'data'
 * // }
 * ```
 */ function emit(/** The event to emit, or an expression that returns an event to emit. */ eventOrExpr) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"]) {
        console.warn('Custom actions should not call `emit()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');
    }
    function emit(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    emit.type = 'xstate.emit';
    emit.event = eventOrExpr;
    emit.resolve = resolveEmit;
    emit.execute = executeEmit;
    return emit;
}
// this is needed to make JSDoc `@link` work properly
/**
 * @remarks
 * `T | unknown` reduces to `unknown` and that can be problematic when it comes
 * to contextual typing. It especially is a problem when the union has a
 * function member, like here:
 *
 * ```ts
 * declare function test(
 *   cbOrVal: ((arg: number) => unknown) | unknown
 * ): void;
 * test((arg) => {}); // oops, implicit any
 * ```
 *
 * This type can be used to avoid this problem. This union represents the same
 * value space as `unknown`.
 */ // https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887
// @TODO: we can't use native `NoInfer` as we need those:
// https://github.com/microsoft/TypeScript/pull/61092
// https://github.com/microsoft/TypeScript/pull/61077
// but even with those fixes native NoInfer still doesn't work - further issues have to be reproduced and fixed
/** @deprecated Use the built-in `NoInfer` type instead */ /** The full definition of an event, with a string `type`. */ /**
 * The string or object representing the state value relative to the parent
 * state node.
 *
 * @remarks
 * - For a child atomic state node, this is a string, e.g., `"pending"`.
 * - For complex state nodes, this is an object, e.g., `{ success:
 *   "someChildState" }`.
 */ /** @deprecated Use `AnyMachineSnapshot` instead */ // TODO: possibly refactor this somehow, use even a simpler type, and maybe even make `machine.options` private or something
/** @ignore */ let SpecialTargets = /*#__PURE__*/ function(SpecialTargets) {
    SpecialTargets["Parent"] = "#_parent";
    SpecialTargets["Internal"] = "#_internal";
    return SpecialTargets;
}({});
/** @deprecated Use `AnyActor` instead. */ // Based on RxJS types
// TODO: in v6, this should only accept AnyActorLogic, like ActorRefFromLogic
/** @deprecated Use `Actor<T>` instead. */ /**
 * Represents logic which can be used by an actor.
 *
 * @template TSnapshot - The type of the snapshot.
 * @template TEvent - The type of the event object.
 * @template TInput - The type of the input.
 * @template TSystem - The type of the actor system.
 */ /** @deprecated */ // TODO: cover all that can be actually returned
function resolveSendTo(actorScope, snapshot, args, actionParams, { to, event: eventOrExpr, id, delay }, extra) {
    const delaysMap = snapshot.machine.implementations.delays;
    if (typeof eventOrExpr === 'string') {
        throw new Error(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `Only event objects may be used with sendTo; use sendTo({ type: "${eventOrExpr}" }) instead`);
    }
    const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;
    let resolvedDelay;
    if (typeof delay === 'string') {
        const configDelay = delaysMap && delaysMap[delay];
        resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;
    } else {
        resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;
    }
    const resolvedTarget = typeof to === 'function' ? to(args, actionParams) : to;
    let targetActorRef;
    if (typeof resolvedTarget === 'string') {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison
        if (resolvedTarget === SpecialTargets.Parent) {
            targetActorRef = actorScope.self._parent;
        } else if (resolvedTarget === SpecialTargets.Internal) {
            targetActorRef = actorScope.self;
        } else if (resolvedTarget.startsWith('#_')) {
            // SCXML compatibility: https://www.w3.org/TR/scxml/#SCXMLEventProcessor
            // #_invokeid. If the target is the special term '#_invokeid', where invokeid is the invokeid of an SCXML session that the sending session has created by <invoke>, the Processor must add the event to the external queue of that session.
            targetActorRef = snapshot.children[resolvedTarget.slice(2)];
        } else {
            targetActorRef = extra.deferredActorIds?.includes(resolvedTarget) ? resolvedTarget : snapshot.children[resolvedTarget];
        }
        if (!targetActorRef) {
            throw new Error(`Unable to send event to actor '${resolvedTarget}' from machine '${snapshot.machine.id}'.`);
        }
    } else {
        targetActorRef = resolvedTarget || actorScope.self;
    }
    return [
        snapshot,
        {
            to: targetActorRef,
            targetId: typeof resolvedTarget === 'string' ? resolvedTarget : undefined,
            event: resolvedEvent,
            id,
            delay: resolvedDelay
        },
        undefined
    ];
}
function retryResolveSendTo(_, snapshot, params) {
    if (typeof params.to === 'string') {
        params.to = snapshot.children[params.to];
    }
}
function executeSendTo(actorScope, params) {
    // this forms an outgoing events queue
    // thanks to that the recipient actors are able to read the *updated* snapshot value of the sender
    actorScope.defer(()=>{
        const { to, event, delay, id } = params;
        if (typeof delay === 'number') {
            actorScope.system.scheduler.schedule(actorScope.self, to, event, delay, id);
            return;
        }
        actorScope.system._relay(actorScope.self, // at this point, in a deferred task, it should already be mutated by retryResolveSendTo
        // if it initially started as a string
        to, event.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["U"] ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["V"])(actorScope.self.id, event.data) : event);
    });
}
/**
 * Sends an event to an actor.
 *
 * @param actor The `ActorRef` to send the event to.
 * @param event The event to send, or an expression that evaluates to the event
 *   to send
 * @param options Send action options
 *
 *   - `id` - The unique send event identifier (used with `cancel()`).
 *   - `delay` - The number of milliseconds to delay the sending of the event.
 */ function sendTo(to, eventOrExpr, options) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"]) {
        console.warn('Custom actions should not call `sendTo()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');
    }
    function sendTo(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    sendTo.type = 'xstate.sendTo';
    sendTo.to = to;
    sendTo.event = eventOrExpr;
    sendTo.id = options?.id;
    sendTo.delay = options?.delay;
    sendTo.resolve = resolveSendTo;
    sendTo.retryResolve = retryResolveSendTo;
    sendTo.execute = executeSendTo;
    return sendTo;
}
/**
 * Sends an event to this machine's parent.
 *
 * @param event The event to send to the parent machine.
 * @param options Options to pass into the send event.
 */ function sendParent(event, options) {
    return sendTo(SpecialTargets.Parent, event, options);
}
/**
 * Forwards (sends) an event to the `target` actor.
 *
 * @param target The target actor to forward the event to.
 * @param options Options to pass into the send action creator.
 */ function forwardTo(target, options) {
    if (!target || typeof target === 'function') {
        const originalTarget = target;
        target = (...args)=>{
            const resolvedTarget = typeof originalTarget === 'function' ? originalTarget(...args) : originalTarget;
            if (!resolvedTarget) {
                throw new Error(`Attempted to forward event to undefined actor. This risks an infinite loop in the sender.`);
            }
            return resolvedTarget;
        };
    }
    return sendTo(target, ({ event })=>event, options);
}
function resolveEnqueueActions(actorScope, snapshot, args, actionParams, { collect }) {
    const actions = [];
    const enqueue = function enqueue(action) {
        actions.push(action);
    };
    enqueue.assign = (...args)=>{
        actions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(...args));
    };
    enqueue.cancel = (...args)=>{
        actions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(...args));
    };
    enqueue.raise = (...args)=>{
        // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)
        // then it fails to typecheck that because `...args` use `string` in place of `TDelay`
        actions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["r"])(...args));
    };
    enqueue.sendTo = (...args)=>{
        // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)
        // then it fails to typecheck that because `...args` use `string` in place of `TDelay
        actions.push(sendTo(...args));
    };
    enqueue.sendParent = (...args)=>{
        actions.push(sendParent(...args));
    };
    enqueue.spawnChild = (...args)=>{
        actions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])(...args));
    };
    enqueue.stopChild = (...args)=>{
        actions.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"])(...args));
    };
    enqueue.emit = (...args)=>{
        actions.push(emit(...args));
    };
    collect({
        context: args.context,
        event: args.event,
        enqueue,
        check: (guard)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"])(guard, snapshot.context, args.event, snapshot),
        self: actorScope.self,
        system: actorScope.system
    }, actionParams);
    return [
        snapshot,
        undefined,
        actions
    ];
}
/**
 * Creates an action object that will execute actions that are queued by the
 * `enqueue(action)` function.
 *
 * @example
 *
 * ```ts
 * import { createMachine, enqueueActions } from 'xstate';
 *
 * const machine = createMachine({
 *   entry: enqueueActions(({ enqueue, check }) => {
 *     enqueue.assign({ count: 0 });
 *
 *     if (check('someGuard')) {
 *       enqueue.assign({ count: 1 });
 *     }
 *
 *     enqueue('someAction');
 *   })
 * });
 * ```
 */ function enqueueActions(collect) {
    function enqueueActions(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    enqueueActions.type = 'xstate.enqueueActions';
    enqueueActions.collect = collect;
    enqueueActions.resolve = resolveEnqueueActions;
    return enqueueActions;
}
function resolveLog(_, snapshot, actionArgs, actionParams, { value, label }) {
    return [
        snapshot,
        {
            value: typeof value === 'function' ? value(actionArgs, actionParams) : value,
            label
        },
        undefined
    ];
}
function executeLog({ logger }, { value, label }) {
    if (label) {
        logger(label, value);
    } else {
        logger(value);
    }
}
/**
 * @param expr The expression function to evaluate which will be logged. Takes
 *   in 2 arguments:
 *
 *   - `ctx` - the current state context
 *   - `event` - the event that caused this action to be executed.
 *
 * @param label The label to give to the logged expression.
 */ function log(value = ({ context, event })=>({
        context,
        event
    }), label) {
    function log1(_args, _params) {
        {
            throw new Error(`This isn't supposed to be called`);
        }
    }
    log1.type = 'xstate.log';
    log1.value = value;
    log1.label = label;
    log1.resolve = resolveLog;
    log1.execute = executeLog;
    return log1;
}
;
}}),
"[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export a as enqueueActions>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "enqueueActions": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/xstate/actors/dist/xstate-actors.development.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEmptyActor": (()=>createEmptyActor),
    "fromCallback": (()=>fromCallback),
    "fromEventObservable": (()=>fromEventObservable),
    "fromObservable": (()=>fromObservable),
    "fromPromise": (()=>fromPromise),
    "fromTransition": (()=>fromTransition)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dev$2f$dist$2f$xstate$2d$dev$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dev/dist/xstate-dev.development.esm.js [app-client] (ecmascript)");
;
;
/**
 * Represents an actor created by `fromTransition`.
 *
 * The type of `self` within the actor's logic.
 *
 * @example
 *
 * ```ts
 * import {
 *   fromTransition,
 *   createActor,
 *   type AnyActorSystem
 * } from 'xstate';
 *
 * //* The actor's stored context.
 * type Context = {
 *   // The current count.
 *   count: number;
 *   // The amount to increase `count` by.
 *   step: number;
 * };
 * // The events the actor receives.
 * type Event = { type: 'increment' };
 * // The actor's input.
 * type Input = { step?: number };
 *
 * // Actor logic that increments `count` by `step` when it receives an event of
 * // type `increment`.
 * const logic = fromTransition<Context, Event, AnyActorSystem, Input>(
 *   (state, event, actorScope) => {
 *     actorScope.self;
 *     //         ^? TransitionActorRef<Context, Event>
 *
 *     if (event.type === 'increment') {
 *       return {
 *         ...state,
 *         count: state.count + state.step
 *       };
 *     }
 *     return state;
 *   },
 *   ({ input, self }) => {
 *     self;
 *     // ^? TransitionActorRef<Context, Event>
 *
 *     return {
 *       count: 0,
 *       step: input.step ?? 1
 *     };
 *   }
 * );
 *
 * const actor = createActor(logic, { input: { step: 10 } });
 * //    ^? TransitionActorRef<Context, Event>
 * ```
 *
 * @see {@link fromTransition}
 */ /**
 * Returns actor logic given a transition function and its initial state.
 *
 * A “transition function” is a function that takes the current `state` and
 * received `event` object as arguments, and returns the next state, similar to
 * a reducer.
 *
 * Actors created from transition logic (“transition actors”) can:
 *
 * - Receive events
 * - Emit snapshots of its state
 *
 * The transition function’s `state` is used as its transition actor’s
 * `context`.
 *
 * Note that the "state" for a transition function is provided by the initial
 * state argument, and is not the same as the State object of an actor or a
 * state within a machine configuration.
 *
 * @example
 *
 * ```ts
 * const transitionLogic = fromTransition(
 *   (state, event) => {
 *     if (event.type === 'increment') {
 *       return {
 *         ...state,
 *         count: state.count + 1
 *       };
 *     }
 *     return state;
 *   },
 *   { count: 0 }
 * );
 *
 * const transitionActor = createActor(transitionLogic);
 * transitionActor.subscribe((snapshot) => {
 *   console.log(snapshot);
 * });
 * transitionActor.start();
 * // => {
 * //   status: 'active',
 * //   context: { count: 0 },
 * //   ...
 * // }
 *
 * transitionActor.send({ type: 'increment' });
 * // => {
 * //   status: 'active',
 * //   context: { count: 1 },
 * //   ...
 * // }
 * ```
 *
 * @param transition The transition function used to describe the transition
 *   logic. It should return the next state given the current state and event.
 *   It receives the following arguments:
 *
 *   - `state` - the current state.
 *   - `event` - the received event.
 *   - `actorScope` - the actor scope object, with properties like `self` and
 *       `system`.
 *
 * @param initialContext The initial state of the transition function, either an
 *   object representing the state, or a function which returns a state object.
 *   If a function, it will receive as its only argument an object with the
 *   following properties:
 *
 *   - `input` - the `input` provided to its parent transition actor.
 *   - `self` - a reference to its parent transition actor.
 *
 * @returns Actor logic
 * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed
 */ function fromTransition(transition, initialContext) {
    return {
        config: transition,
        transition: (snapshot, event, actorScope)=>{
            return {
                ...snapshot,
                context: transition(snapshot.context, event, actorScope)
            };
        },
        getInitialSnapshot: (_, input)=>{
            return {
                status: 'active',
                output: undefined,
                error: undefined,
                context: typeof initialContext === 'function' ? initialContext({
                    input
                }) : initialContext
            };
        },
        getPersistedSnapshot: (snapshot)=>snapshot,
        restoreSnapshot: (snapshot)=>snapshot
    };
}
const instanceStates = /* #__PURE__ */ new WeakMap();
/**
 * Represents an actor created by `fromCallback`.
 *
 * The type of `self` within the actor's logic.
 *
 * @example
 *
 * ```ts
 * import { fromCallback, createActor } from 'xstate';
 *
 * // The events the actor receives.
 * type Event = { type: 'someEvent' };
 * // The actor's input.
 * type Input = { name: string };
 *
 * // Actor logic that logs whenever it receives an event of type `someEvent`.
 * const logic = fromCallback<Event, Input>(({ self, input, receive }) => {
 *   self;
 *   // ^? CallbackActorRef<Event, Input>
 *
 *   receive((event) => {
 *     if (event.type === 'someEvent') {
 *       console.log(`${input.name}: received "someEvent" event`);
 *       // logs 'myActor: received "someEvent" event'
 *     }
 *   });
 * });
 *
 * const actor = createActor(logic, { input: { name: 'myActor' } });
 * //    ^? CallbackActorRef<Event, Input>
 * ```
 *
 * @see {@link fromCallback}
 */ /**
 * An actor logic creator which returns callback logic as defined by a callback
 * function.
 *
 * @remarks
 * Useful for subscription-based or other free-form logic that can send events
 * back to the parent actor.
 *
 * Actors created from callback logic (“callback actors”) can:
 *
 * - Receive events via the `receive` function
 * - Send events to the parent actor via the `sendBack` function
 *
 * Callback actors are a bit different from other actors in that they:
 *
 * - Do not work with `onDone`
 * - Do not produce a snapshot using `.getSnapshot()`
 * - Do not emit values when used with `.subscribe()`
 * - Can not be stopped with `.stop()`
 *
 * @example
 *
 * ```typescript
 * const callbackLogic = fromCallback(({ sendBack, receive }) => {
 *   let lockStatus = 'unlocked';
 *
 *   const handler = (event) => {
 *     if (lockStatus === 'locked') {
 *       return;
 *     }
 *     sendBack(event);
 *   };
 *
 *   receive((event) => {
 *     if (event.type === 'lock') {
 *       lockStatus = 'locked';
 *     } else if (event.type === 'unlock') {
 *       lockStatus = 'unlocked';
 *     }
 *   });
 *
 *   document.body.addEventListener('click', handler);
 *
 *   return () => {
 *     document.body.removeEventListener('click', handler);
 *   };
 * });
 * ```
 *
 * @param callback - The callback function used to describe the callback logic
 *   The callback function is passed an object with the following properties:
 *
 *   - `receive` - A function that can send events back to the parent actor; the
 *       listener is then called whenever events are received by the callback
 *       actor
 *   - `sendBack` - A function that can send events back to the parent actor
 *   - `input` - Data that was provided to the callback actor
 *   - `self` - The parent actor of the callback actor
 *   - `system` - The actor system to which the callback actor belongs The callback
 *       function can (optionally) return a cleanup function, which is called
 *       when the actor is stopped.
 *
 * @returns Callback logic
 * @see {@link CallbackLogicFunction} for more information about the callback function and its object argument
 * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed
 */ function fromCallback(callback) {
    const logic = {
        config: callback,
        start: (state, actorScope)=>{
            const { self, system, emit } = actorScope;
            const callbackState = {
                receivers: undefined,
                dispose: undefined
            };
            instanceStates.set(self, callbackState);
            callbackState.dispose = callback({
                input: state.input,
                system,
                self,
                sendBack: (event)=>{
                    if (self.getSnapshot().status === 'stopped') {
                        return;
                    }
                    if (self._parent) {
                        system._relay(self, self._parent, event);
                    }
                },
                receive: (listener)=>{
                    callbackState.receivers ??= new Set();
                    callbackState.receivers.add(listener);
                },
                emit
            });
        },
        transition: (state, event, actorScope)=>{
            const callbackState = instanceStates.get(actorScope.self);
            if (event.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["X"]) {
                state = {
                    ...state,
                    status: 'stopped',
                    error: undefined
                };
                callbackState.dispose?.();
                return state;
            }
            callbackState.receivers?.forEach((receiver)=>receiver(event));
            return state;
        },
        getInitialSnapshot: (_, input)=>{
            return {
                status: 'active',
                output: undefined,
                error: undefined,
                input
            };
        },
        getPersistedSnapshot: (snapshot)=>snapshot,
        restoreSnapshot: (snapshot)=>snapshot
    };
    return logic;
}
const XSTATE_OBSERVABLE_NEXT = 'xstate.observable.next';
const XSTATE_OBSERVABLE_ERROR = 'xstate.observable.error';
const XSTATE_OBSERVABLE_COMPLETE = 'xstate.observable.complete';
/**
 * Represents an actor created by `fromObservable` or `fromEventObservable`.
 *
 * The type of `self` within the actor's logic.
 *
 * @example
 *
 * ```ts
 * import { fromObservable, createActor } from 'xstate';
 * import { interval } from 'rxjs';
 *
 * // The type of the value observed by the actor's logic.
 * type Context = number;
 * // The actor's input.
 * type Input = { period?: number };
 *
 * // Actor logic that observes a number incremented every `input.period`
 * // milliseconds (default: 1_000).
 * const logic = fromObservable<Context, Input>(({ input, self }) => {
 *   self;
 *   // ^? ObservableActorRef<Event, Input>
 *
 *   return interval(input.period ?? 1_000);
 * });
 *
 * const actor = createActor(logic, { input: { period: 2_000 } });
 * //    ^? ObservableActorRef<Event, Input>
 * ```
 *
 * @see {@link fromObservable}
 * @see {@link fromEventObservable}
 */ /**
 * Observable actor logic is described by an observable stream of values. Actors
 * created from observable logic (“observable actors”) can:
 *
 * - Emit snapshots of the observable’s emitted value
 *
 * The observable’s emitted value is used as its observable actor’s `context`.
 *
 * Sending events to observable actors will have no effect.
 *
 * @example
 *
 * ```ts
 * import { fromObservable, createActor } from 'xstate';
 * import { interval } from 'rxjs';
 *
 * const logic = fromObservable((obj) => interval(1000));
 *
 * const actor = createActor(logic);
 *
 * actor.subscribe((snapshot) => {
 *   console.log(snapshot.context);
 * });
 *
 * actor.start();
 * // At every second:
 * // Logs 0
 * // Logs 1
 * // Logs 2
 * // ...
 * ```
 *
 * @param observableCreator A function that creates an observable. It receives
 *   one argument, an object with the following properties:
 *
 *   - `input` - Data that was provided to the observable actor
 *   - `self` - The parent actor
 *   - `system` - The actor system to which the observable actor belongs
 *
 *   It should return a {@link Subscribable}, which is compatible with an RxJS
 *   Observable, although RxJS is not required to create them.
 * @see {@link https://rxjs.dev} for documentation on RxJS Observable and observable creators.
 * @see {@link Subscribable} interface in XState, which is based on and compatible with RxJS Observable.
 */ function fromObservable(observableCreator) {
    // TODO: add event types
    const logic = {
        config: observableCreator,
        transition: (snapshot, event)=>{
            if (snapshot.status !== 'active') {
                return snapshot;
            }
            switch(event.type){
                case XSTATE_OBSERVABLE_NEXT:
                    {
                        const newSnapshot = {
                            ...snapshot,
                            context: event.data
                        };
                        return newSnapshot;
                    }
                case XSTATE_OBSERVABLE_ERROR:
                    return {
                        ...snapshot,
                        status: 'error',
                        error: event.data,
                        input: undefined,
                        _subscription: undefined
                    };
                case XSTATE_OBSERVABLE_COMPLETE:
                    return {
                        ...snapshot,
                        status: 'done',
                        input: undefined,
                        _subscription: undefined
                    };
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["X"]:
                    snapshot._subscription.unsubscribe();
                    return {
                        ...snapshot,
                        status: 'stopped',
                        input: undefined,
                        _subscription: undefined
                    };
                default:
                    return snapshot;
            }
        },
        getInitialSnapshot: (_, input)=>{
            return {
                status: 'active',
                output: undefined,
                error: undefined,
                context: undefined,
                input,
                _subscription: undefined
            };
        },
        start: (state, { self, system, emit })=>{
            if (state.status === 'done') {
                // Do not restart a completed observable
                return;
            }
            state._subscription = observableCreator({
                input: state.input,
                system,
                self,
                emit
            }).subscribe({
                next: (value)=>{
                    system._relay(self, self, {
                        type: XSTATE_OBSERVABLE_NEXT,
                        data: value
                    });
                },
                error: (err)=>{
                    system._relay(self, self, {
                        type: XSTATE_OBSERVABLE_ERROR,
                        data: err
                    });
                },
                complete: ()=>{
                    system._relay(self, self, {
                        type: XSTATE_OBSERVABLE_COMPLETE
                    });
                }
            });
        },
        getPersistedSnapshot: ({ _subscription, ...state })=>state,
        restoreSnapshot: (state)=>({
                ...state,
                _subscription: undefined
            })
    };
    return logic;
}
/**
 * Creates event observable logic that listens to an observable that delivers
 * event objects.
 *
 * Event observable actor logic is described by an observable stream of
 * {@link https://stately.ai/docs/transitions#event-objects | event objects}.
 * Actors created from event observable logic (“event observable actors”) can:
 *
 * - Implicitly send events to its parent actor
 * - Emit snapshots of its emitted event objects
 *
 * Sending events to event observable actors will have no effect.
 *
 * @example
 *
 * ```ts
 * import {
 *   fromEventObservable,
 *   Subscribable,
 *   EventObject,
 *   createMachine,
 *   createActor
 * } from 'xstate';
 * import { fromEvent } from 'rxjs';
 *
 * const mouseClickLogic = fromEventObservable(
 *   () => fromEvent(document.body, 'click') as Subscribable<EventObject>
 * );
 *
 * const canvasMachine = createMachine({
 *   invoke: {
 *     // Will send mouse `click` events to the canvas actor
 *     src: mouseClickLogic
 *   }
 * });
 *
 * const canvasActor = createActor(canvasMachine);
 * canvasActor.start();
 * ```
 *
 * @param lazyObservable A function that creates an observable that delivers
 *   event objects. It receives one argument, an object with the following
 *   properties:
 *
 *   - `input` - Data that was provided to the event observable actor
 *   - `self` - The parent actor
 *   - `system` - The actor system to which the event observable actor belongs.
 *
 *   It should return a {@link Subscribable}, which is compatible with an RxJS
 *   Observable, although RxJS is not required to create them.
 */ function fromEventObservable(lazyObservable) {
    // TODO: event types
    const logic = {
        config: lazyObservable,
        transition: (state, event)=>{
            if (state.status !== 'active') {
                return state;
            }
            switch(event.type){
                case XSTATE_OBSERVABLE_ERROR:
                    return {
                        ...state,
                        status: 'error',
                        error: event.data,
                        input: undefined,
                        _subscription: undefined
                    };
                case XSTATE_OBSERVABLE_COMPLETE:
                    return {
                        ...state,
                        status: 'done',
                        input: undefined,
                        _subscription: undefined
                    };
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["X"]:
                    state._subscription.unsubscribe();
                    return {
                        ...state,
                        status: 'stopped',
                        input: undefined,
                        _subscription: undefined
                    };
                default:
                    return state;
            }
        },
        getInitialSnapshot: (_, input)=>{
            return {
                status: 'active',
                output: undefined,
                error: undefined,
                context: undefined,
                input,
                _subscription: undefined
            };
        },
        start: (state, { self, system, emit })=>{
            if (state.status === 'done') {
                // Do not restart a completed observable
                return;
            }
            state._subscription = lazyObservable({
                input: state.input,
                system,
                self,
                emit
            }).subscribe({
                next: (value)=>{
                    if (self._parent) {
                        system._relay(self, self._parent, value);
                    }
                },
                error: (err)=>{
                    system._relay(self, self, {
                        type: XSTATE_OBSERVABLE_ERROR,
                        data: err
                    });
                },
                complete: ()=>{
                    system._relay(self, self, {
                        type: XSTATE_OBSERVABLE_COMPLETE
                    });
                }
            });
        },
        getPersistedSnapshot: ({ _subscription, ...snapshot })=>snapshot,
        restoreSnapshot: (snapshot)=>({
                ...snapshot,
                _subscription: undefined
            })
    };
    return logic;
}
const XSTATE_PROMISE_RESOLVE = 'xstate.promise.resolve';
const XSTATE_PROMISE_REJECT = 'xstate.promise.reject';
/**
 * Represents an actor created by `fromPromise`.
 *
 * The type of `self` within the actor's logic.
 *
 * @example
 *
 * ```ts
 * import { fromPromise, createActor } from 'xstate';
 *
 * // The actor's resolved output
 * type Output = string;
 * // The actor's input.
 * type Input = { message: string };
 *
 * // Actor logic that fetches the url of an image of a cat saying `input.message`.
 * const logic = fromPromise<Output, Input>(async ({ input, self }) => {
 *   self;
 *   // ^? PromiseActorRef<Output, Input>
 *
 *   const data = await fetch(
 *     `https://cataas.com/cat/says/${input.message}`
 *   );
 *   const url = await data.json();
 *   return url;
 * });
 *
 * const actor = createActor(logic, { input: { message: 'hello world' } });
 * //    ^? PromiseActorRef<Output, Input>
 * ```
 *
 * @see {@link fromPromise}
 */ const controllerMap = new WeakMap();
/**
 * An actor logic creator which returns promise logic as defined by an async
 * process that resolves or rejects after some time.
 *
 * Actors created from promise actor logic (“promise actors”) can:
 *
 * - Emit the resolved value of the promise
 * - Output the resolved value of the promise
 *
 * Sending events to promise actors will have no effect.
 *
 * @example
 *
 * ```ts
 * const promiseLogic = fromPromise(async () => {
 *   const result = await fetch('https://example.com/...').then((data) =>
 *     data.json()
 *   );
 *
 *   return result;
 * });
 *
 * const promiseActor = createActor(promiseLogic);
 * promiseActor.subscribe((snapshot) => {
 *   console.log(snapshot);
 * });
 * promiseActor.start();
 * // => {
 * //   output: undefined,
 * //   status: 'active'
 * //   ...
 * // }
 *
 * // After promise resolves
 * // => {
 * //   output: { ... },
 * //   status: 'done',
 * //   ...
 * // }
 * ```
 *
 * @param promiseCreator A function which returns a Promise, and accepts an
 *   object with the following properties:
 *
 *   - `input` - Data that was provided to the promise actor
 *   - `self` - The parent actor of the promise actor
 *   - `system` - The actor system to which the promise actor belongs
 *
 * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed
 */ function fromPromise(promiseCreator) {
    const logic = {
        config: promiseCreator,
        transition: (state, event, scope)=>{
            if (state.status !== 'active') {
                return state;
            }
            switch(event.type){
                case XSTATE_PROMISE_RESOLVE:
                    {
                        const resolvedValue = event.data;
                        return {
                            ...state,
                            status: 'done',
                            output: resolvedValue,
                            input: undefined
                        };
                    }
                case XSTATE_PROMISE_REJECT:
                    return {
                        ...state,
                        status: 'error',
                        error: event.data,
                        input: undefined
                    };
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["X"]:
                    {
                        controllerMap.get(scope.self)?.abort();
                        return {
                            ...state,
                            status: 'stopped',
                            input: undefined
                        };
                    }
                default:
                    return state;
            }
        },
        start: (state, { self, system, emit })=>{
            // TODO: determine how to allow customizing this so that promises
            // can be restarted if necessary
            if (state.status !== 'active') {
                return;
            }
            const controller = new AbortController();
            controllerMap.set(self, controller);
            const resolvedPromise = Promise.resolve(promiseCreator({
                input: state.input,
                system,
                self,
                signal: controller.signal,
                emit
            }));
            resolvedPromise.then((response)=>{
                if (self.getSnapshot().status !== 'active') {
                    return;
                }
                controllerMap.delete(self);
                system._relay(self, self, {
                    type: XSTATE_PROMISE_RESOLVE,
                    data: response
                });
            }, (errorData)=>{
                if (self.getSnapshot().status !== 'active') {
                    return;
                }
                controllerMap.delete(self);
                system._relay(self, self, {
                    type: XSTATE_PROMISE_REJECT,
                    data: errorData
                });
            });
        },
        getInitialSnapshot: (_, input)=>{
            return {
                status: 'active',
                output: undefined,
                error: undefined,
                input
            };
        },
        getPersistedSnapshot: (snapshot)=>snapshot,
        restoreSnapshot: (snapshot)=>snapshot
    };
    return logic;
}
const emptyLogic = fromTransition((_)=>undefined, undefined);
function createEmptyActor() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(emptyLogic);
}
;
}}),
"[project]/node_modules/xstate/dist/StateMachine-b4e94439.development.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "S": (()=>StateMachine),
    "a": (()=>StateNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/assign-6313ccb3.development.esm.js [app-client] (ecmascript)");
;
;
const cache = new WeakMap();
function memo(object, key, fn) {
    let memoizedData = cache.get(object);
    if (!memoizedData) {
        memoizedData = {
            [key]: fn()
        };
        cache.set(object, memoizedData);
    } else if (!(key in memoizedData)) {
        memoizedData[key] = fn();
    }
    return memoizedData[key];
}
const EMPTY_OBJECT = {};
const toSerializableAction = (action)=>{
    if (typeof action === 'string') {
        return {
            type: action
        };
    }
    if (typeof action === 'function') {
        if ('resolve' in action) {
            return {
                type: action.type
            };
        }
        return {
            type: action.name
        };
    }
    return action;
};
class StateNode {
    constructor(/** The raw config used to create the machine. */ config, options){
        this.config = config;
        /**
     * The relative key of the state node, which represents its location in the
     * overall state value.
     */ this.key = void 0;
        /** The unique ID of the state node. */ this.id = void 0;
        /**
     * The type of this state node:
     *
     * - `'atomic'` - no child state nodes
     * - `'compound'` - nested child state nodes (XOR)
     * - `'parallel'` - orthogonal nested child state nodes (AND)
     * - `'history'` - history state node
     * - `'final'` - final state node
     */ this.type = void 0;
        /** The string path from the root machine node to this node. */ this.path = void 0;
        /** The child state nodes. */ this.states = void 0;
        /**
     * The type of history on this state node. Can be:
     *
     * - `'shallow'` - recalls only top-level historical state value
     * - `'deep'` - recalls historical state value at all levels
     */ this.history = void 0;
        /** The action(s) to be executed upon entering the state node. */ this.entry = void 0;
        /** The action(s) to be executed upon exiting the state node. */ this.exit = void 0;
        /** The parent state node. */ this.parent = void 0;
        /** The root machine node. */ this.machine = void 0;
        /**
     * The meta data associated with this state node, which will be returned in
     * State instances.
     */ this.meta = void 0;
        /**
     * The output data sent with the "xstate.done.state._id_" event if this is a
     * final state node.
     */ this.output = void 0;
        /**
     * The order this state node appears. Corresponds to the implicit document
     * order.
     */ this.order = -1;
        this.description = void 0;
        this.tags = [];
        this.transitions = void 0;
        this.always = void 0;
        this.parent = options._parent;
        this.key = options._key;
        this.machine = options._machine;
        this.path = this.parent ? this.parent.path.concat(this.key) : [];
        this.id = this.config.id || [
            this.machine.id,
            ...this.path
        ].join(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["S"]);
        this.type = this.config.type || (this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');
        this.description = this.config.description;
        this.order = this.machine.idMap.size;
        this.machine.idMap.set(this.id, this);
        this.states = this.config.states ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"])(this.config.states, (stateConfig, key)=>{
            const stateNode = new StateNode(stateConfig, {
                _parent: this,
                _key: key,
                _machine: this.machine
            });
            return stateNode;
        }) : EMPTY_OBJECT;
        if (this.type === 'compound' && !this.config.initial) {
            throw new Error(`No initial state specified for compound state node "#${this.id}". Try adding { initial: "${Object.keys(this.states)[0]}" } to the state config.`);
        }
        // History config
        this.history = this.config.history === true ? 'shallow' : this.config.history || false;
        this.entry = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])(this.config.entry).slice();
        this.exit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])(this.config.exit).slice();
        this.meta = this.config.meta;
        this.output = this.type === 'final' || !this.parent ? this.config.output : undefined;
        this.tags = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])(config.tags).slice();
    }
    /** @internal */ _initialize() {
        this.transitions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["q"])(this);
        if (this.config.always) {
            this.always = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])(this.config.always).map((t)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"])(this, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["N"], t));
        }
        Object.keys(this.states).forEach((key)=>{
            this.states[key]._initialize();
        });
    }
    /** The well-structured state node definition. */ get definition() {
        return {
            id: this.id,
            key: this.key,
            version: this.machine.version,
            type: this.type,
            initial: this.initial ? {
                target: this.initial.target,
                source: this,
                actions: this.initial.actions.map(toSerializableAction),
                eventType: null,
                reenter: false,
                toJSON: ()=>({
                        target: this.initial.target.map((t)=>`#${t.id}`),
                        source: `#${this.id}`,
                        actions: this.initial.actions.map(toSerializableAction),
                        eventType: null
                    })
            } : undefined,
            history: this.history,
            states: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"])(this.states, (state)=>{
                return state.definition;
            }),
            on: this.on,
            transitions: [
                ...this.transitions.values()
            ].flat().map((t)=>({
                    ...t,
                    actions: t.actions.map(toSerializableAction)
                })),
            entry: this.entry.map(toSerializableAction),
            exit: this.exit.map(toSerializableAction),
            meta: this.meta,
            order: this.order || -1,
            output: this.output,
            invoke: this.invoke,
            description: this.description,
            tags: this.tags
        };
    }
    /** @internal */ toJSON() {
        return this.definition;
    }
    /** The logic invoked as actors by this state node. */ get invoke() {
        return memo(this, 'invoke', ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])(this.config.invoke).map((invokeConfig, i)=>{
                const { src, systemId } = invokeConfig;
                const resolvedId = invokeConfig.id ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(this.id, i);
                const sourceName = typeof src === 'string' ? src : `xstate.invoke.${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"])(this.id, i)}`;
                return {
                    ...invokeConfig,
                    src: sourceName,
                    id: resolvedId,
                    systemId: systemId,
                    toJSON () {
                        const { onDone, onError, ...invokeDefValues } = invokeConfig;
                        return {
                            ...invokeDefValues,
                            type: 'xstate.invoke',
                            src: sourceName,
                            id: resolvedId
                        };
                    }
                };
            }));
    }
    /** The mapping of events to transitions. */ get on() {
        return memo(this, 'on', ()=>{
            const transitions = this.transitions;
            return [
                ...transitions
            ].flatMap(([descriptor, t])=>t.map((t)=>[
                        descriptor,
                        t
                    ])).reduce((map, [descriptor, transition])=>{
                map[descriptor] = map[descriptor] || [];
                map[descriptor].push(transition);
                return map;
            }, {});
        });
    }
    get after() {
        return memo(this, 'delayedTransitions', ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["y"])(this));
    }
    get initial() {
        return memo(this, 'initial', ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["z"])(this, this.config.initial));
    }
    /** @internal */ next(snapshot, event) {
        const eventType = event.type;
        const actions = [];
        let selectedTransition;
        const candidates = memo(this, `candidates-${eventType}`, ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"])(this, eventType));
        for (const candidate of candidates){
            const { guard } = candidate;
            const resolvedContext = snapshot.context;
            let guardPassed = false;
            try {
                guardPassed = !guard || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"])(guard, resolvedContext, event, snapshot);
            } catch (err) {
                const guardType = typeof guard === 'string' ? guard : typeof guard === 'object' ? guard.type : undefined;
                throw new Error(`Unable to evaluate guard ${guardType ? `'${guardType}' ` : ''}in transition for event '${eventType}' in state node '${this.id}':\n${err.message}`);
            }
            if (guardPassed) {
                actions.push(...candidate.actions);
                selectedTransition = candidate;
                break;
            }
        }
        return selectedTransition ? [
            selectedTransition
        ] : undefined;
    }
    /** All the event types accepted by this state node and its descendants. */ get events() {
        return memo(this, 'events', ()=>{
            const { states } = this;
            const events = new Set(this.ownEvents);
            if (states) {
                for (const stateId of Object.keys(states)){
                    const state = states[stateId];
                    if (state.states) {
                        for (const event of state.events){
                            events.add(`${event}`);
                        }
                    }
                }
            }
            return Array.from(events);
        });
    }
    /**
   * All the events that have transitions directly from this state node.
   *
   * Excludes any inert events.
   */ get ownEvents() {
        const events = new Set([
            ...this.transitions.keys()
        ].filter((descriptor)=>{
            return this.transitions.get(descriptor).some((transition)=>!(!transition.target && !transition.actions.length && !transition.reenter));
        }));
        return Array.from(events);
    }
}
const STATE_IDENTIFIER = '#';
class StateMachine {
    constructor(/** The raw config used to create the machine. */ config, implementations){
        this.config = config;
        /** The machine's own version. */ this.version = void 0;
        this.schemas = void 0;
        this.implementations = void 0;
        /** @internal */ this.__xstatenode = true;
        /** @internal */ this.idMap = new Map();
        this.root = void 0;
        this.id = void 0;
        this.states = void 0;
        this.events = void 0;
        this.id = config.id || '(machine)';
        this.implementations = {
            actors: implementations?.actors ?? {},
            actions: implementations?.actions ?? {},
            delays: implementations?.delays ?? {},
            guards: implementations?.guards ?? {}
        };
        this.version = this.config.version;
        this.schemas = this.config.schemas;
        this.transition = this.transition.bind(this);
        this.getInitialSnapshot = this.getInitialSnapshot.bind(this);
        this.getPersistedSnapshot = this.getPersistedSnapshot.bind(this);
        this.restoreSnapshot = this.restoreSnapshot.bind(this);
        this.start = this.start.bind(this);
        this.root = new StateNode(config, {
            _key: this.id,
            _machine: this
        });
        this.root._initialize();
        this.states = this.root.states; // TODO: remove!
        this.events = this.root.events;
        if (!('output' in this.root) && Object.values(this.states).some((state)=>state.type === 'final' && 'output' in state)) {
            console.warn('Missing `machine.output` declaration (top-level final state with output detected)');
        }
    }
    /**
   * Clones this state machine with the provided implementations.
   *
   * @param implementations Options (`actions`, `guards`, `actors`, `delays`) to
   *   recursively merge with the existing options.
   * @returns A new `StateMachine` instance with the provided implementations.
   */ provide(implementations) {
        const { actions, guards, actors, delays } = this.implementations;
        return new StateMachine(this.config, {
            actions: {
                ...actions,
                ...implementations.actions
            },
            guards: {
                ...guards,
                ...implementations.guards
            },
            actors: {
                ...actors,
                ...implementations.actors
            },
            delays: {
                ...delays,
                ...implementations.delays
            }
        });
    }
    resolveState(config) {
        const resolvedStateValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"])(this.root, config.value);
        const nodeSet = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(this.root, resolvedStateValue));
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"])({
            _nodes: [
                ...nodeSet
            ],
            context: config.context || {},
            children: {},
            status: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["F"])(nodeSet, this.root) ? 'done' : config.status || 'active',
            output: config.output,
            error: config.error,
            historyValue: config.historyValue
        }, this);
    }
    /**
   * Determines the next snapshot given the current `snapshot` and received
   * `event`. Calculates a full macrostep from all microsteps.
   *
   * @param snapshot The current snapshot
   * @param event The received event
   */ transition(snapshot, event, actorScope) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["G"])(snapshot, event, actorScope, []).snapshot;
    }
    /**
   * Determines the next state given the current `state` and `event`. Calculates
   * a microstep.
   *
   * @param state The current state
   * @param event The received event
   */ microstep(snapshot, event, actorScope) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["G"])(snapshot, event, actorScope, []).microstates;
    }
    getTransitionData(snapshot, event) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(this.root, snapshot.value, snapshot, event) || [];
    }
    /**
   * The initial state _before_ evaluating any microsteps. This "pre-initial"
   * state is provided to initial actions executed in the initial state.
   */ getPreInitialState(actorScope, initEvent, internalQueue) {
        const { context } = this.config;
        const preInitial = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"])({
            context: typeof context !== 'function' && context ? context : {},
            _nodes: [
                this.root
            ],
            children: {},
            status: 'active'
        }, this);
        if (typeof context === 'function') {
            const assignment = ({ spawn, event, self })=>context({
                    spawn,
                    input: event.input,
                    self
                });
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["I"])(preInitial, initEvent, actorScope, [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(assignment)
            ], internalQueue, undefined);
        }
        return preInitial;
    }
    /**
   * Returns the initial `State` instance, with reference to `self` as an
   * `ActorRef`.
   */ getInitialSnapshot(actorScope, input) {
        const initEvent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["J"])(input); // TODO: fix;
        const internalQueue = [];
        const preInitialState = this.getPreInitialState(actorScope, initEvent, internalQueue);
        const nextState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])([
            {
                target: [
                    ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["L"])(this.root)
                ],
                source: this.root,
                reenter: true,
                actions: [],
                eventType: null,
                toJSON: null // TODO: fix
            }
        ], preInitialState, actorScope, initEvent, true, internalQueue);
        const { snapshot: macroState } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["G"])(nextState, initEvent, actorScope, internalQueue);
        return macroState;
    }
    start(snapshot) {
        Object.values(snapshot.children).forEach((child)=>{
            if (child.getSnapshot().status === 'active') {
                child.start();
            }
        });
    }
    getStateNodeById(stateId) {
        const fullPath = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["M"])(stateId);
        const relativePath = fullPath.slice(1);
        const resolvedStateId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["O"])(fullPath[0]) ? fullPath[0].slice(STATE_IDENTIFIER.length) : fullPath[0];
        const stateNode = this.idMap.get(resolvedStateId);
        if (!stateNode) {
            throw new Error(`Child state node '#${resolvedStateId}' does not exist on machine '${this.id}'`);
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["P"])(stateNode, relativePath);
    }
    get definition() {
        return this.root.definition;
    }
    toJSON() {
        return this.definition;
    }
    getPersistedSnapshot(snapshot, options) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Q"])(snapshot, options);
    }
    restoreSnapshot(snapshot, _actorScope) {
        const children = {};
        const snapshotChildren = snapshot.children;
        Object.keys(snapshotChildren).forEach((actorId)=>{
            const actorData = snapshotChildren[actorId];
            const childState = actorData.snapshot;
            const src = actorData.src;
            const logic = typeof src === 'string' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"])(this, src) : src;
            if (!logic) {
                return;
            }
            const actorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(logic, {
                id: actorId,
                parent: _actorScope.self,
                syncSnapshot: actorData.syncSnapshot,
                snapshot: childState,
                src,
                systemId: actorData.systemId
            });
            children[actorId] = actorRef;
        });
        function resolveHistoryReferencedState(root, referenced) {
            if (referenced instanceof StateNode) {
                return referenced;
            }
            try {
                return root.machine.getStateNodeById(referenced.id);
            } catch  {
                {
                    console.warn(`Could not resolve StateNode for id: ${referenced.id}`);
                }
            }
        }
        function reviveHistoryValue(root, historyValue) {
            if (!historyValue || typeof historyValue !== 'object') {
                return {};
            }
            const revived = {};
            for(const key in historyValue){
                const arr = historyValue[key];
                for (const item of arr){
                    const resolved = resolveHistoryReferencedState(root, item);
                    if (!resolved) {
                        continue;
                    }
                    revived[key] ??= [];
                    revived[key].push(resolved);
                }
            }
            return revived;
        }
        const revivedHistoryValue = reviveHistoryValue(this.root, snapshot.historyValue);
        const restoredSnapshot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"])({
            ...snapshot,
            children,
            _nodes: Array.from((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(this.root, snapshot.value))),
            historyValue: revivedHistoryValue
        }, this);
        const seen = new Set();
        function reviveContext(contextPart, children) {
            if (seen.has(contextPart)) {
                return;
            }
            seen.add(contextPart);
            for(const key in contextPart){
                const value = contextPart[key];
                if (value && typeof value === 'object') {
                    if ('xstate$$type' in value && value.xstate$$type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["$"]) {
                        contextPart[key] = children[value.id];
                        continue;
                    }
                    reviveContext(value, children);
                }
            }
        }
        reviveContext(restoredSnapshot.context, children);
        return restoredSnapshot;
    }
}
;
}}),
"[project]/node_modules/xstate/dist/xstate.development.esm.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SimulatedClock": (()=>SimulatedClock),
    "assertEvent": (()=>assertEvent),
    "createMachine": (()=>createMachine),
    "getInitialSnapshot": (()=>getInitialSnapshot),
    "getNextSnapshot": (()=>getNextSnapshot),
    "initialTransition": (()=>initialTransition),
    "setup": (()=>setup),
    "toPromise": (()=>toPromise),
    "transition": (()=>transition),
    "waitFor": (()=>waitFor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/actors/dist/xstate-actors.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$StateMachine$2d$b4e94439$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/StateMachine-b4e94439.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dev$2f$dist$2f$xstate$2d$dev$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dev/dist/xstate-dev.development.esm.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
/**
 * Asserts that the given event object is of the specified type or types. Throws
 * an error if the event object is not of the specified types.
 *
 * @example
 *
 * ```ts
 * // ...
 * entry: ({ event }) => {
 *   assertEvent(event, 'doNothing');
 *   // event is { type: 'doNothing' }
 * },
 * // ...
 * exit: ({ event }) => {
 *   assertEvent(event, 'greet');
 *   // event is { type: 'greet'; message: string }
 *
 *   assertEvent(event, ['greet', 'notify']);
 *   // event is { type: 'greet'; message: string }
 *   // or { type: 'notify'; message: string; level: 'info' | 'error' }
 * },
 * ```
 */ function assertEvent(event, type) {
    const types = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])(type);
    if (!types.includes(event.type)) {
        const typesText = types.length === 1 ? `type "${types[0]}"` : `one of types "${types.join('", "')}"`;
        throw new Error(`Expected event ${JSON.stringify(event)} to have ${typesText}`);
    }
}
/**
 * Creates a state machine (statechart) with the given configuration.
 *
 * The state machine represents the pure logic of a state machine actor.
 *
 * @example
 *
 * ```ts
 * import { createMachine } from 'xstate';
 *
 * const lightMachine = createMachine({
 *   id: 'light',
 *   initial: 'green',
 *   states: {
 *     green: {
 *       on: {
 *         TIMER: { target: 'yellow' }
 *       }
 *     },
 *     yellow: {
 *       on: {
 *         TIMER: { target: 'red' }
 *       }
 *     },
 *     red: {
 *       on: {
 *         TIMER: { target: 'green' }
 *       }
 *     }
 *   }
 * });
 *
 * const lightActor = createActor(lightMachine);
 * lightActor.start();
 *
 * lightActor.send({ type: 'TIMER' });
 * ```
 *
 * @param config The state machine configuration.
 * @param options DEPRECATED: use `setup({ ... })` or `machine.provide({ ... })`
 *   to provide machine implementations instead.
 */ function createMachine(config, implementations) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$StateMachine$2d$b4e94439$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["S"](config, implementations);
}
/** @internal */ function createInertActorScope(actorLogic) {
    const self = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(actorLogic);
    const inertActorScope = {
        self,
        defer: ()=>{},
        id: '',
        logger: ()=>{},
        sessionId: '',
        stopChild: ()=>{},
        system: self.system,
        emit: ()=>{},
        actionExecutor: ()=>{}
    };
    return inertActorScope;
}
/** @deprecated Use `initialTransition(…)` instead. */ function getInitialSnapshot(actorLogic, ...[input]) {
    const actorScope = createInertActorScope(actorLogic);
    return actorLogic.getInitialSnapshot(actorScope, input);
}
/**
 * Determines the next snapshot for the given `actorLogic` based on the given
 * `snapshot` and `event`.
 *
 * If the `snapshot` is `undefined`, the initial snapshot of the `actorLogic` is
 * used.
 *
 * @deprecated Use `transition(…)` instead.
 * @example
 *
 * ```ts
 * import { getNextSnapshot } from 'xstate';
 * import { trafficLightMachine } from './trafficLightMachine.ts';
 *
 * const nextSnapshot = getNextSnapshot(
 *   trafficLightMachine, // actor logic
 *   undefined, // snapshot (or initial state if undefined)
 *   { type: 'TIMER' }
 * ); // event object
 *
 * console.log(nextSnapshot.value);
 * // => 'yellow'
 *
 * const nextSnapshot2 = getNextSnapshot(
 *   trafficLightMachine, // actor logic
 *   nextSnapshot, // snapshot
 *   { type: 'TIMER' }
 * ); // event object
 *
 * console.log(nextSnapshot2.value);
 * // =>'red'
 * ```
 */ function getNextSnapshot(actorLogic, snapshot, event) {
    const inertActorScope = createInertActorScope(actorLogic);
    inertActorScope.self._snapshot = snapshot;
    return actorLogic.transition(snapshot, event, inertActorScope);
}
// at the moment we allow extra actors - ones that are not specified by `children`
// this could be reconsidered in the future
function setup({ schemas, actors, actions, guards, delays }) {
    return {
        createMachine: (config)=>createMachine({
                ...config,
                schemas
            }, {
                actors,
                actions,
                guards,
                delays
            })
    };
}
// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging
// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging
class SimulatedClock {
    constructor(){
        this.timeouts = new Map();
        this._now = 0;
        this._id = 0;
        this._flushing = false;
        this._flushingInvalidated = false;
    }
    now() {
        return this._now;
    }
    getId() {
        return this._id++;
    }
    setTimeout(fn, timeout) {
        this._flushingInvalidated = this._flushing;
        const id = this.getId();
        this.timeouts.set(id, {
            start: this.now(),
            timeout,
            fn
        });
        return id;
    }
    clearTimeout(id) {
        this._flushingInvalidated = this._flushing;
        this.timeouts.delete(id);
    }
    set(time) {
        if (this._now > time) {
            throw new Error('Unable to travel back in time');
        }
        this._now = time;
        this.flushTimeouts();
    }
    flushTimeouts() {
        if (this._flushing) {
            this._flushingInvalidated = true;
            return;
        }
        this._flushing = true;
        const sorted = [
            ...this.timeouts
        ].sort(([_idA, timeoutA], [_idB, timeoutB])=>{
            const endA = timeoutA.start + timeoutA.timeout;
            const endB = timeoutB.start + timeoutB.timeout;
            return endB > endA ? -1 : 1;
        });
        for (const [id, timeout] of sorted){
            if (this._flushingInvalidated) {
                this._flushingInvalidated = false;
                this._flushing = false;
                this.flushTimeouts();
                return;
            }
            if (this.now() - timeout.start >= timeout.timeout) {
                this.timeouts.delete(id);
                timeout.fn.call(null);
            }
        }
        this._flushing = false;
    }
    increment(ms) {
        this._now += ms;
        this.flushTimeouts();
    }
}
/**
 * Returns a promise that resolves to the `output` of the actor when it is done.
 *
 * @example
 *
 * ```ts
 * const machine = createMachine({
 *   // ...
 *   output: {
 *     count: 42
 *   }
 * });
 *
 * const actor = createActor(machine);
 *
 * actor.start();
 *
 * const output = await toPromise(actor);
 *
 * console.log(output);
 * // logs { count: 42 }
 * ```
 */ function toPromise(actor) {
    return new Promise((resolve, reject)=>{
        actor.subscribe({
            complete: ()=>{
                resolve(actor.getSnapshot().output);
            },
            error: reject
        });
    });
}
/**
 * Given actor `logic`, a `snapshot`, and an `event`, returns a tuple of the
 * `nextSnapshot` and `actions` to execute.
 *
 * This is a pure function that does not execute `actions`.
 */ function transition(logic, snapshot, event) {
    const executableActions = [];
    const actorScope = createInertActorScope(logic);
    actorScope.actionExecutor = (action)=>{
        executableActions.push(action);
    };
    const nextSnapshot = logic.transition(snapshot, event, actorScope);
    return [
        nextSnapshot,
        executableActions
    ];
}
/**
 * Given actor `logic` and optional `input`, returns a tuple of the
 * `nextSnapshot` and `actions` to execute from the initial transition (no
 * previous state).
 *
 * This is a pure function that does not execute `actions`.
 */ function initialTransition(logic, ...[input]) {
    const executableActions = [];
    const actorScope = createInertActorScope(logic);
    actorScope.actionExecutor = (action)=>{
        executableActions.push(action);
    };
    const nextSnapshot = logic.getInitialSnapshot(actorScope, input);
    return [
        nextSnapshot,
        executableActions
    ];
}
const defaultWaitForOptions = {
    timeout: Infinity // much more than 10 seconds
};
/**
 * Subscribes to an actor ref and waits for its emitted value to satisfy a
 * predicate, and then resolves with that value. Will throw if the desired state
 * is not reached after an optional timeout. (defaults to Infinity).
 *
 * @example
 *
 * ```js
 * const state = await waitFor(someService, (state) => {
 *   return state.hasTag('loaded');
 * });
 *
 * state.hasTag('loaded'); // true
 * ```
 *
 * @param actorRef The actor ref to subscribe to
 * @param predicate Determines if a value matches the condition to wait for
 * @param options
 * @returns A promise that eventually resolves to the emitted value that matches
 *   the condition
 */ function waitFor(actorRef, predicate, options) {
    const resolvedOptions = {
        ...defaultWaitForOptions,
        ...options
    };
    return new Promise((res, rej)=>{
        const { signal } = resolvedOptions;
        if (signal?.aborted) {
            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors
            rej(signal.reason);
            return;
        }
        let done = false;
        if (resolvedOptions.timeout < 0) {
            console.error('`timeout` passed to `waitFor` is negative and it will reject its internal promise immediately.');
        }
        const handle = resolvedOptions.timeout === Infinity ? undefined : setTimeout(()=>{
            dispose();
            rej(new Error(`Timeout of ${resolvedOptions.timeout} ms exceeded`));
        }, resolvedOptions.timeout);
        const dispose = ()=>{
            clearTimeout(handle);
            done = true;
            sub?.unsubscribe();
            if (abortListener) {
                signal.removeEventListener('abort', abortListener);
            }
        };
        function checkEmitted(emitted) {
            if (predicate(emitted)) {
                dispose();
                res(emitted);
            }
        }
        /**
     * If the `signal` option is provided, this will be the listener for its
     * `abort` event
     */ let abortListener;
        // eslint-disable-next-line prefer-const
        let sub; // avoid TDZ when disposing synchronously
        // See if the current snapshot already matches the predicate
        checkEmitted(actorRef.getSnapshot());
        if (done) {
            return;
        }
        // only define the `abortListener` if the `signal` option is provided
        if (signal) {
            abortListener = ()=>{
                dispose();
                // XState does not "own" the signal, so we should reject with its reason (if any)
                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors
                rej(signal.reason);
            };
            signal.addEventListener('abort', abortListener);
        }
        sub = actorRef.subscribe({
            next: checkEmitted,
            error: (err)=>{
                dispose();
                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors
                rej(err);
            },
            complete: ()=>{
                dispose();
                rej(new Error(`Actor terminated without satisfying predicate`));
            }
        });
        if (done) {
            sub.unsubscribe();
        }
    });
}
;
}}),
"[project]/node_modules/@clerk/shared/dist/constants.mjs [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$I6MTSTOF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-I6MTSTOF.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
;
;
;
 //# sourceMappingURL=constants.mjs.map
}}),
"[project]/node_modules/@clerk/shared/dist/constants.mjs [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$I6MTSTOF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-I6MTSTOF.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$constants$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/constants.mjs [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@clerk/shared/dist/oauth.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OAUTH_PROVIDERS": (()=>OAUTH_PROVIDERS),
    "getOAuthProviderData": (()=>getOAuthProviderData)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
;
// src/oauth.ts
var OAUTH_PROVIDERS = [
    {
        provider: "google",
        strategy: "oauth_google",
        name: "Google",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/google"
    },
    {
        provider: "discord",
        strategy: "oauth_discord",
        name: "Discord",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/discord"
    },
    {
        provider: "facebook",
        strategy: "oauth_facebook",
        name: "Facebook",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/facebook"
    },
    {
        provider: "twitch",
        strategy: "oauth_twitch",
        name: "Twitch",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/twitch"
    },
    {
        provider: "twitter",
        strategy: "oauth_twitter",
        name: "Twitter",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/twitter"
    },
    {
        provider: "microsoft",
        strategy: "oauth_microsoft",
        name: "Microsoft",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/microsoft"
    },
    {
        provider: "tiktok",
        strategy: "oauth_tiktok",
        name: "TikTok",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/tiktok"
    },
    {
        provider: "linkedin",
        strategy: "oauth_linkedin",
        name: "LinkedIn",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/linkedin"
    },
    {
        provider: "linkedin_oidc",
        strategy: "oauth_linkedin_oidc",
        name: "LinkedIn",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/linkedin-oidc"
    },
    {
        provider: "github",
        strategy: "oauth_github",
        name: "GitHub",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/github"
    },
    {
        provider: "gitlab",
        strategy: "oauth_gitlab",
        name: "GitLab",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/gitlab"
    },
    {
        provider: "dropbox",
        strategy: "oauth_dropbox",
        name: "Dropbox",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/dropbox"
    },
    {
        provider: "atlassian",
        strategy: "oauth_atlassian",
        name: "Atlassian",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/atlassian"
    },
    {
        provider: "bitbucket",
        strategy: "oauth_bitbucket",
        name: "Bitbucket",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/bitbucket"
    },
    {
        provider: "hubspot",
        strategy: "oauth_hubspot",
        name: "HubSpot",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/hubspot"
    },
    {
        provider: "notion",
        strategy: "oauth_notion",
        name: "Notion",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/notion"
    },
    {
        provider: "apple",
        strategy: "oauth_apple",
        name: "Apple",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/apple"
    },
    {
        provider: "line",
        strategy: "oauth_line",
        name: "LINE",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/line"
    },
    {
        provider: "instagram",
        strategy: "oauth_instagram",
        name: "Instagram",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/instagram"
    },
    {
        provider: "coinbase",
        strategy: "oauth_coinbase",
        name: "Coinbase",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/coinbase"
    },
    {
        provider: "spotify",
        strategy: "oauth_spotify",
        name: "Spotify",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/spotify"
    },
    {
        provider: "xero",
        strategy: "oauth_xero",
        name: "Xero",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/xero"
    },
    {
        provider: "box",
        strategy: "oauth_box",
        name: "Box",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/box"
    },
    {
        provider: "slack",
        strategy: "oauth_slack",
        name: "Slack",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/slack"
    },
    {
        provider: "linear",
        strategy: "oauth_linear",
        name: "Linear",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/linear"
    },
    {
        provider: "x",
        strategy: "oauth_x",
        name: "X / Twitter",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/x-twitter-v2"
    },
    {
        provider: "enstall",
        strategy: "oauth_enstall",
        name: "Enstall",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/enstall"
    },
    {
        provider: "huggingface",
        strategy: "oauth_huggingface",
        name: "Hugging Face",
        docsUrl: "https://clerk.com/docs/authentication/social-connections/huggingface"
    }
];
function getOAuthProviderData({ provider, strategy }) {
    if (provider) {
        return OAUTH_PROVIDERS.find((oauth_provider)=>oauth_provider.provider == provider);
    }
    return OAUTH_PROVIDERS.find((oauth_provider)=>oauth_provider.strategy == strategy);
}
;
 //# sourceMappingURL=oauth.mjs.map
}}),
"[project]/node_modules/@clerk/shared/dist/web3.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "WEB3_PROVIDERS": (()=>WEB3_PROVIDERS)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
;
// src/web3.ts
var WEB3_PROVIDERS = [
    {
        provider: "metamask",
        strategy: "web3_metamask_signature",
        name: "MetaMask"
    },
    {
        provider: "coinbase_wallet",
        strategy: "web3_coinbase_wallet_signature",
        name: "Coinbase Wallet"
    },
    {
        provider: "okx_wallet",
        strategy: "web3_okx_wallet_signature",
        name: "OKX Wallet"
    }
];
;
 //# sourceMappingURL=web3.mjs.map
}}),
"[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export l as log>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "log": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["l"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export b as sendTo>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sendTo": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/@clerk/shared/dist/webauthn.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isWebAuthnAutofillSupported": (()=>isWebAuthnAutofillSupported),
    "isWebAuthnPlatformAuthenticatorSupported": (()=>isWebAuthnPlatformAuthenticatorSupported),
    "isWebAuthnSupported": (()=>isWebAuthnSupported)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$JKSAJ6AV$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-JKSAJ6AV.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
;
;
// src/webauthn.ts
function isWebAuthnSupported() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$JKSAJ6AV$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidBrowser"])() && // Check if `PublicKeyCredential` is a constructor
    typeof window.PublicKeyCredential === "function";
}
async function isWebAuthnAutofillSupported() {
    try {
        return isWebAuthnSupported() && await window.PublicKeyCredential.isConditionalMediationAvailable();
    } catch  {
        return false;
    }
}
async function isWebAuthnPlatformAuthenticatorSupported() {
    try {
        return typeof window !== "undefined" && await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
    } catch  {
        return false;
    }
}
;
 //# sourceMappingURL=webauthn.mjs.map
}}),
"[project]/node_modules/@clerk/shared/dist/url.mjs [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-IFTVZ2LQ.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$3TMSNP4L$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-3TMSNP4L.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$I6MTSTOF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-I6MTSTOF.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
;
;
;
;
;
 //# sourceMappingURL=url.mjs.map
}}),
"[project]/node_modules/@clerk/shared/dist/url.mjs [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-IFTVZ2LQ.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$3TMSNP4L$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-3TMSNP4L.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$I6MTSTOF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-I6MTSTOF.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$url$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/url.mjs [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export a as and>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "and": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export n as not>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "not": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export o as or>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "or": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export r as raise>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "raise": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["r"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/@clerk/shared/dist/router.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ClerkHostRouterContext": (()=>ClerkHostRouterContext),
    "ClerkRouterContext": (()=>ClerkRouterContext),
    "Route": (()=>Route),
    "Router": (()=>Router),
    "createClerkRouter": (()=>createClerkRouter),
    "useClerkHostRouter": (()=>useClerkHostRouter),
    "useClerkRouter": (()=>useClerkRouter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-IFTVZ2LQ.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$3TMSNP4L$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-3TMSNP4L.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$I6MTSTOF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-I6MTSTOF.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
// src/router/react.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
;
;
;
;
// src/router/router.ts
var PRESERVED_QUERYSTRING_PARAMS = [
    "after_sign_in_url",
    "after_sign_up_url",
    "redirect_url"
];
function normalizePath(path) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["withoutTrailingSlash"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["withLeadingSlash"])(path));
}
function createClerkRouter(router, basePath = "/") {
    const normalizedBasePath = normalizePath(basePath);
    function makeDestinationUrlWithPreservedQueryParameters(path) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAbsoluteUrl"])(path)) {
            return path;
        }
        const destinationUrl = new URL(path, window.location.origin);
        const currentSearchParams = router.searchParams();
        PRESERVED_QUERYSTRING_PARAMS.forEach((key)=>{
            const maybeValue = currentSearchParams.get(key);
            if (maybeValue) {
                destinationUrl.searchParams.set(key, maybeValue);
            }
        });
        return `${destinationUrl.pathname}${destinationUrl.search}`;
    }
    function match(path, index) {
        const pathToMatch = path ?? (index && "/");
        if (!pathToMatch) {
            throw new Error("[clerk] router.match() requires either a path to match, or the index flag must be set to true.");
        }
        const normalizedPath = normalizePath(pathToMatch);
        return normalizePath(`${normalizedBasePath}${normalizedPath}`) === normalizePath(router.pathname());
    }
    function child(childBasePath) {
        return createClerkRouter(router, `${normalizedBasePath}${normalizePath(childBasePath)}`);
    }
    function push(path) {
        const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);
        return router.push(destinationUrl);
    }
    function replace(path) {
        const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);
        return router.replace(destinationUrl);
    }
    function shallowPush(path) {
        const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);
        return router.shallowPush(destinationUrl);
    }
    function pathname() {
        return router.pathname();
    }
    function searchParams() {
        return router.searchParams();
    }
    return {
        makeDestinationUrlWithPreservedQueryParameters,
        child,
        match,
        mode: router.mode,
        name: router.name,
        push,
        replace,
        shallowPush,
        pathname,
        searchParams,
        basePath: normalizedBasePath
    };
}
;
var ClerkHostRouterContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(null);
var ClerkRouterContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(null);
function useClerkHostRouter() {
    const ctx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(ClerkHostRouterContext);
    if (!ctx) {
        throw new Error("clerk: Unable to locate ClerkHostRouter, make sure this is rendered within `<ClerkHostRouterContext.Provider>`.");
    }
    return ctx;
}
function useClerkRouter() {
    const ctx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(ClerkRouterContext);
    if (!ctx) {
        throw new Error("clerk: Unable to locate ClerkRouter, make sure this is rendered within `<Router>`.");
    }
    return ctx;
}
function Router({ basePath, children, router }) {
    const hostRouter = useClerkHostRouter();
    const clerkRouter = createClerkRouter(router ?? hostRouter, basePath);
    return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(ClerkRouterContext.Provider, {
        value: clerkRouter
    }, children);
}
function Route({ path, children, index }) {
    const parentRouter = useClerkRouter();
    if (!path && !index) {
        return children;
    }
    if (!parentRouter?.match(path, index)) {
        return null;
    }
    return children;
}
;
 //# sourceMappingURL=router.mjs.map
}}),
"[project]/node_modules/@clerk/elements/dist/chunk-VY37G23G.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CAPTCHA_ELEMENT_ID": (()=>CAPTCHA_ELEMENT_ID),
    "ClerkElementsError": (()=>ClerkElementsError),
    "ClerkElementsRuntimeError": (()=>ClerkElementsRuntimeError),
    "Connection": (()=>Connection),
    "ERROR_CODES": (()=>ERROR_CODES),
    "Field": (()=>Field),
    "FieldError": (()=>FieldError),
    "FieldState": (()=>FieldState),
    "Form": (()=>Form),
    "FormStoreProvider": (()=>FormStoreProvider),
    "GlobalError": (()=>GlobalError),
    "Icon": (()=>Icon),
    "Input": (()=>Input),
    "Label": (()=>Label),
    "Link": (()=>Link),
    "Loading": (()=>Loading),
    "MAGIC_LINK_VERIFY_PATH_ROUTE": (()=>MAGIC_LINK_VERIFY_PATH_ROUTE),
    "NEXT_WINDOW_HISTORY_SUPPORT_VERSION": (()=>NEXT_WINDOW_HISTORY_SUPPORT_VERSION),
    "RESENDABLE_COUNTDOWN_DEFAULT": (()=>RESENDABLE_COUNTDOWN_DEFAULT),
    "ROUTING": (()=>ROUTING),
    "SEARCH_PARAMS": (()=>SEARCH_PARAMS),
    "SIGN_IN_DEFAULT_BASE_PATH": (()=>SIGN_IN_DEFAULT_BASE_PATH),
    "SIGN_UP_DEFAULT_BASE_PATH": (()=>SIGN_UP_DEFAULT_BASE_PATH),
    "SIGN_UP_MODES": (()=>SIGN_UP_MODES),
    "SSO_CALLBACK_PATH_ROUTE": (()=>SSO_CALLBACK_PATH_ROUTE),
    "SignInFirstFactor": (()=>SignInFirstFactor),
    "SignInFirstFactorCtx": (()=>SignInFirstFactorCtx),
    "SignInRouterCtx": (()=>SignInRouterCtx),
    "SignInRouterMachine": (()=>SignInRouterMachine),
    "SignInSafeIdentifierSelectorForStrategy": (()=>SignInSafeIdentifierSelectorForStrategy),
    "SignInSalutationSelector": (()=>SignInSalutationSelector),
    "SignInSecondFactor": (()=>SignInSecondFactor),
    "SignInSecondFactorCtx": (()=>SignInSecondFactorCtx),
    "SignInSessionList": (()=>SignInSessionList),
    "SignInSessionListItem": (()=>SignInSessionListItem),
    "SignInStep": (()=>SignInStep),
    "SignInStrategy": (()=>SignInStrategy),
    "SignInSupportedStrategy": (()=>SignInSupportedStrategy),
    "SignUpRouterCtx": (()=>SignUpRouterCtx),
    "SignUpStartCtx": (()=>SignUpStartCtx),
    "SignUpStep": (()=>SignUpStep),
    "SignUpStrategy": (()=>SignUpStrategy),
    "SignUpVerificationCtx": (()=>SignUpVerificationCtx),
    "Submit": (()=>Submit),
    "ThirdPartyMachine": (()=>ThirdPartyMachine),
    "ThirdPartyMachineId": (()=>ThirdPartyMachineId),
    "__privateAdd": (()=>__privateAdd),
    "__privateGet": (()=>__privateGet),
    "__privateSet": (()=>__privateSet),
    "assertActorEventError": (()=>assertActorEventError),
    "inspect": (()=>inspect),
    "sendToLoading": (()=>sendToLoading),
    "shouldUseVirtualRouting": (()=>shouldUseVirtualRouting),
    "useActiveTags": (()=>useActiveTags),
    "useFormStore": (()=>useFormStore),
    "useSignInActiveSessionContext": (()=>useSignInActiveSessionContext),
    "useSignInStrategy": (()=>useSignInStrategy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
// src/react/common/index.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$client$2d$only$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/client-only/index.js [app-client] (ecmascript)");
// src/react/common/form/field.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-form/dist/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
// src/internals/machines/form/form.context.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@xstate/react/dist/xstate-react.development.esm.js [app-client] (ecmascript)");
// src/internals/machines/form/form.machine.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$error$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/error.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$6NCNJZHF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-6NCNJZHF.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$underscore$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/underscore.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-GGFRMWFO.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/assign-6313ccb3.development.esm.js [app-client] (ecmascript) <export a as assign>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export a as enqueueActions>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/xstate.development.esm.js [app-client] (ecmascript) <locals>");
// src/react/hooks/use-password.hook.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/react/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$utils$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/utils/index.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7FNX7RWY.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-slot/dist/index.mjs [app-client] (ecmascript)");
// src/react/common/form/form.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/primitive/dist/index.mjs [app-client] (ecmascript)");
// src/react/common/form/input.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$logger$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/logger.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$CYDR2ZSA$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-CYDR2ZSA.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$telemetry$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/telemetry.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$WR6SRQOL$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-WR6SRQOL.mjs [app-client] (ecmascript)");
// src/utils/third-party-strategies.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$constants$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/constants.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$I6MTSTOF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-I6MTSTOF.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$oauth$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/oauth.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$web3$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/web3.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/actors/dist/xstate-actors.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export l as log>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export b as sendTo>");
// src/internals/machines/sign-in/utils/starting-factors.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$webauthn$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/webauthn.mjs [app-client] (ecmascript)");
// src/internals/machines/sign-in/router.machine.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$url$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/url.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-IFTVZ2LQ.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export a as and>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export n as not>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export o as or>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export r as raise>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$router$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/router.mjs [app-client] (ecmascript)");
var __typeError = (msg)=>{
    throw TypeError(msg);
};
var __accessCheck = (obj, member, msg)=>member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter)=>(__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value)=>member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter)=>(__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
;
;
;
;
;
;
;
// src/internals/errors/index.ts
var ClerkElementsErrorBase = class extends Error {
    constructor(code, message){
        super(message);
        this.code = code;
        this.clerkError = true;
        this.clerkElementsError = true;
        this.name = "ClerkElementsError";
        this.rawMessage = message;
    }
    toString() {
        return `[${this.name}]
Code: ${this.code}
Message: ${this.message}`;
    }
};
var ClerkElementsError = class _ClerkElementsError extends ClerkElementsErrorBase {
    static fromAPIError(error) {
        return new _ClerkElementsError(error.code.toString(), // @ts-expect-error - Expected that longMessage isn't a property of MetamaskError
        error.longMessage || error.message);
    }
    constructor(code, message){
        super(code, message);
        this.name = "ClerkElementsError";
    }
};
var ClerkElementsRuntimeError = class extends ClerkElementsErrorBase {
    constructor(message){
        super("elements_runtime_error", message);
        this.name = "ClerkElementsRuntimeError";
    }
};
var ClerkElementsFieldError = class _ClerkElementsFieldError extends ClerkElementsErrorBase {
    constructor(code, message){
        super(code, message);
        this.matchFn = ()=>true;
        this.name = "ClerkElementsFieldError";
    }
    static fromAPIError(error) {
        return new _ClerkElementsFieldError(error.code, error.longMessage || error.message);
    }
    get validityState() {
        return this.code;
    }
    get forceMatch() {
        return true;
    }
};
// src/internals/machines/form/form.machine.ts
var FormMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actions: {
        setGlobalErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            errors: (_, params)=>[
                    ...params.errors
                ]
        }),
        setFieldFeedback: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            fields: ({ context }, params)=>{
                if (!params.name) {
                    throw new Error("Field name is required");
                }
                const fieldName = params.name;
                if (context.fields.has(fieldName)) {
                    context.fields.get(fieldName).feedback = params.feedback;
                }
                return context.fields;
            }
        })
    },
    types: {}
}).createMachine({
    id: "Form",
    context: ()=>({
            defaultValues: /* @__PURE__ */ new Map(),
            errors: [],
            fields: /* @__PURE__ */ new Map(),
            progressive: false
        }),
    on: {
        "ERRORS.SET": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ enqueue, event })=>{
                var _a, _b, _c;
                const isClerkAPIError = (err)=>"meta" in err;
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$6NCNJZHF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isKnownError"])(event.error)) {
                    const fields = {};
                    const globalErrors = [];
                    const errors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$6NCNJZHF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isClerkAPIResponseError"])(event.error) ? (_a = event.error) == null ? void 0 : _a.errors : [
                        event.error
                    ];
                    for (const error of errors){
                        const name = isClerkAPIError(error) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snakeToCamel"])((_b = error.meta) == null ? void 0 : _b.paramName) : null;
                        if (!name || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$6NCNJZHF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isMetamaskError"])(error)) {
                            globalErrors.push(ClerkElementsError.fromAPIError(error));
                            continue;
                        }
                        if (!fields[name]) {
                            fields[name] = [];
                        }
                        (_c = fields[name]) == null ? void 0 : _c.push(ClerkElementsFieldError.fromAPIError(error));
                    }
                    enqueue({
                        type: "setGlobalErrors",
                        params: {
                            errors: globalErrors
                        }
                    });
                    for(const field in fields){
                        enqueue({
                            type: "setFieldFeedback",
                            params: {
                                name: field,
                                feedback: {
                                    type: "error",
                                    message: fields[field][0]
                                }
                            }
                        });
                    }
                }
            })
        },
        "ERRORS.CLEAR": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                errors: ()=>[]
            })
        },
        "FIELD.ADD": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                fields: ({ context, event })=>{
                    if (!event.field.name) {
                        throw new Error("Field name is required");
                    }
                    event.field.value = event.field.value || context.defaultValues.get(event.field.name) || void 0;
                    context.fields.set(event.field.name, event.field);
                    return context.fields;
                }
            })
        },
        "FIELD.UPDATE": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                fields: ({ context, event })=>{
                    var _a;
                    if (!event.field.name) {
                        throw new Error("Field name is required");
                    }
                    const field = context.fields.get(event.field.name);
                    if (field) {
                        field.checked = event.field.checked;
                        field.disabled = (_a = event.field.disabled) != null ? _a : field.disabled;
                        field.value = event.field.value;
                        context.fields.set(event.field.name, field);
                    }
                    return context.fields;
                }
            })
        },
        "FIELD.DISABLE": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                fields: ({ context, event })=>{
                    if (!event.field.name) {
                        throw new Error("Field name is required");
                    }
                    const field = context.fields.get(event.field.name);
                    if (field) {
                        field.disabled = true;
                        context.fields.set(event.field.name, field);
                    }
                    return context.fields;
                }
            })
        },
        "FIELD.ENABLE": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                fields: ({ context, event })=>{
                    if (!event.field.name) {
                        throw new Error("Field name is required");
                    }
                    const field = context.fields.get(event.field.name);
                    if (field) {
                        field.disabled = false;
                        context.fields.set(event.field.name, field);
                    }
                    return context.fields;
                }
            })
        },
        "FIELD.REMOVE": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                fields: ({ context, event })=>{
                    if (!event.field.name) {
                        throw new Error("Field name is required");
                    }
                    context.fields.delete(event.field.name);
                    return context.fields;
                }
            })
        },
        "FIELD.FEEDBACK.SET": {
            actions: [
                {
                    type: "setFieldFeedback",
                    params: ({ event })=>event.field
                }
            ]
        },
        "FIELD.FEEDBACK.CLEAR": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                fields: ({ context, event })=>{
                    if (!event.field.name) {
                        throw new Error("Field name is required");
                    }
                    if (context.fields.has(event.field.name)) {
                        context.fields.get(event.field.name).feedback = void 0;
                    }
                    return context.fields;
                }
            })
        },
        "FIELD.FEEDBACK.CLEAR.ALL": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                fields: ({ context })=>{
                    context.fields.forEach((field)=>{
                        field.feedback = void 0;
                    });
                    return context.fields;
                }
            })
        },
        MARK_AS_PROGRESSIVE: {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ event })=>{
                const missing = new Set(event.missing);
                return {
                    defaultValues: event.defaultValues,
                    hidden: /* @__PURE__ */ new Set([
                        ...event.required.filter((f)=>!missing.has(f)),
                        ...event.optional
                    ]),
                    missing,
                    optional: new Set(event.optional),
                    progressive: true,
                    required: new Set(event.required)
                };
            })
        },
        UNMARK_AS_PROGRESSIVE: {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                defaultValues: /* @__PURE__ */ new Map(),
                hidden: void 0,
                missing: void 0,
                optional: void 0,
                progressive: false,
                required: void 0
            })
        },
        PREFILL_DEFAULT_VALUES: {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ event })=>{
                return {
                    defaultValues: event.defaultValues
                };
            })
        }
    }
});
// src/utils/safe-access.ts
function safeAccess(fn, fallback) {
    try {
        return fn();
    } catch  {
        return fallback;
    }
}
// src/internals/utils/inspector/index.ts
var inspect;
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
}
// src/internals/machines/form/form.context.ts
var FormMachineContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createActorContext"])(FormMachine, {
    inspect
});
var FormStoreProvider = FormMachineContext.Provider;
var useFormStore = FormMachineContext.useActorRef;
var useFormSelector = FormMachineContext.useSelector;
var globalErrorsSelector = (state)=>state.context.errors;
var fieldValueSelector = (name)=>(state)=>{
        var _a;
        return name ? (_a = state.context.fields.get(name)) == null ? void 0 : _a.value : "";
    };
var fieldHasValueSelector = (name)=>(state)=>Boolean(fieldValueSelector(name)(state));
var fieldFeedbackSelector = (name)=>(state)=>{
        var _a;
        return name ? (_a = state.context.fields.get(name)) == null ? void 0 : _a.feedback : void 0;
    };
// src/react/common/form/hooks/use-field-feedback.ts
function useFieldFeedback({ name }) {
    const feedback = useFormSelector(fieldFeedbackSelector(name));
    return {
        feedback
    };
}
// src/react/common/form/hooks/use-field.ts
function useField({ name }) {
    const hasValue = useFormSelector(fieldHasValueSelector(name));
    const { feedback } = useFieldFeedback({
        name
    });
    const shouldBeHidden = false;
    const hasError = feedback ? feedback.type === "error" : false;
    return {
        hasValue,
        props: {
            "data-hidden": ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : void 0,
            serverInvalid: hasError
        }
    };
}
;
var FieldContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(null);
var useFieldContext = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(FieldContext);
// src/react/common/form/types.ts
var FIELD_STATES = {
    success: "success",
    error: "error",
    idle: "idle",
    warning: "warning",
    info: "info"
};
// src/react/common/form/hooks/use-field-state.ts
function useFieldState({ name }) {
    const { feedback } = useFieldFeedback({
        name
    });
    const hasValue = useFormSelector(fieldHasValueSelector(name));
    let state = FIELD_STATES.idle;
    if (!hasValue) {
        state = FIELD_STATES.idle;
    }
    switch(feedback == null ? void 0 : feedback.type){
        case "error":
            state = FIELD_STATES.error;
            break;
        case "warning":
            state = FIELD_STATES.warning;
            break;
        case "info":
            state = FIELD_STATES.info;
            break;
        case "success":
            state = FIELD_STATES.success;
            break;
        default:
            break;
    }
    return {
        state
    };
}
;
// src/react/common/form/hooks/use-global-errors.ts
function useGlobalErrors() {
    const errors = useFormSelector(globalErrorsSelector);
    return {
        errors
    };
}
// src/react/common/form/hooks/use-form.ts
function useForm({ flowActor }) {
    const { errors } = useGlobalErrors();
    const onSubmit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useForm.useCallback[onSubmit]": (event)=>{
            event.preventDefault();
            if (flowActor) {
                flowActor.send({
                    type: "SUBMIT",
                    action: "submit"
                });
            }
        }
    }["useForm.useCallback[onSubmit]"], [
        flowActor
    ]);
    return {
        props: {
            ...errors.length > 0 ? {
                "data-global-error": true
            } : {},
            onSubmit
        }
    };
}
;
;
;
;
;
// src/react/utils/generate-password-error-text.ts
var errorMessages = {
    max_length: [
        "less than %length% characters",
        "length"
    ],
    min_length: [
        "%length% or more characters",
        "length"
    ],
    require_numbers: "a number",
    require_lowercase: "a lowercase letter",
    require_uppercase: "an uppercase letter",
    require_special_char: "a special character"
};
var createListFormat = (message)=>{
    let messageWithPrefix;
    if ("ListFormat" in Intl) {
        const formatter = new Intl.ListFormat("en", {
            style: "long",
            type: "conjunction"
        });
        messageWithPrefix = formatter.format(message);
    } else {
        messageWithPrefix = message.join(", ");
    }
    return messageWithPrefix;
};
function buildErrorTuple(key, config) {
    switch(key){
        case "max_length":
            return [
                key,
                {
                    max_length: config.max_length
                }
            ];
        case "min_length":
            return [
                key,
                {
                    min_length: config.min_length
                }
            ];
        case "require_special_char":
            return [
                key,
                {
                    allowed_special_characters: config.allowed_special_characters
                }
            ];
        default:
            return key;
    }
}
var generatePasswordErrorText = ({ config, failedValidations })=>{
    const codes = [];
    if (!failedValidations || Object.keys(failedValidations).length === 0) {
        return {
            codes,
            message: ""
        };
    }
    const hasMinLengthError = (failedValidations == null ? void 0 : failedValidations.min_length) || false;
    const messages = Object.entries(failedValidations).filter((k)=>hasMinLengthError ? k[0] === "min_length" : true).filter(([, v])=>!!v).map(([k])=>{
        const entry = k;
        const errorTuple = buildErrorTuple(entry, config);
        codes.push(errorTuple);
        const errorKey = errorMessages[entry];
        if (Array.isArray(errorKey)) {
            const [msg, replaceValue] = errorKey;
            return msg.replace(`%${replaceValue}%`, config[k]);
        }
        return errorKey;
    });
    const messageWithPrefix = createListFormat(messages);
    return {
        codes,
        message: `Your password must contain ${messageWithPrefix}.`
    };
};
// src/react/hooks/use-password.hook.ts
var usePassword = (callbacks)=>{
    var _a;
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    const passwordSettings = (_a = clerk.__unstable__environment) == null ? void 0 : _a.userSettings.passwordSettings;
    const { disable_hibp, min_zxcvbn_strength, show_zxcvbn, ...config } = passwordSettings || {};
    const { onValidationError = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["noop"], onValidationSuccess = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["noop"], onValidationWarning = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["noop"], onValidationInfo = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["noop"], onValidationComplexity } = callbacks || {};
    const onValidate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "usePassword.useCallback[onValidate]": (res)=>{
            var _a2, _b, _c;
            if (res.complexity) {
                if (Object.values(res == null ? void 0 : res.complexity).length > 0) {
                    const { message, codes } = generatePasswordErrorText({
                        config,
                        failedValidations: res.complexity
                    });
                    if ((_a2 = res.complexity) == null ? void 0 : _a2.min_length) {
                        return onValidationInfo(message, codes);
                    }
                    return onValidationError(message, codes);
                }
            }
            if (((_b = res == null ? void 0 : res.strength) == null ? void 0 : _b.state) === "fail") {
                const keys = res.strength.keys;
                const error = JSON.stringify(keys);
                return onValidationError(error, keys);
            }
            if (((_c = res == null ? void 0 : res.strength) == null ? void 0 : _c.state) === "pass") {
                const keys = res.strength.keys;
                const error = JSON.stringify(keys);
                return onValidationWarning(error, keys);
            }
            return onValidationSuccess();
        }
    }["usePassword.useCallback[onValidate]"], [
        callbacks,
        config
    ]);
    const validatePassword = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useMemo"])({
        "usePassword.useMemo[validatePassword]": ()=>{
            return ({
                "usePassword.useMemo[validatePassword]": (password)=>{
                    return clerk.client.signUp.validatePassword(password, {
                        onValidation: onValidate,
                        onValidationComplexity
                    });
                }
            })["usePassword.useMemo[validatePassword]"];
        }
    }["usePassword.useMemo[validatePassword]"], [
        onValidate
    ]);
    return {
        validatePassword
    };
};
;
;
;
var ZERO = [
    0,
    0
];
var OUTSIDE = [
    -1,
    -1
];
var OTP_LENGTH_DEFAULT = 6;
var PASSWORD_MANAGER_OFFSET_DEFAULT = 40;
var OTPInput = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(function OTPInput2(props, ref) {
    const { render, length, autoSubmit, ...rest } = props;
    const hasRenderProp = typeof render !== "undefined";
    if (hasRenderProp) {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(OTPInputSegmented, {
            ...rest,
            ref,
            render,
            length,
            autoSubmit
        });
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(OTPInputStandard, {
        ...rest,
        ref,
        length,
        autoSubmit
    });
});
var OTPInputStandard = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(function OTPInput3(props, ref) {
    const { length = OTP_LENGTH_DEFAULT, autoSubmit = false, ...rest } = props;
    const innerRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(null);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useImperativeHandle"])(ref, {
        "OTPInputStandard.OTPInput3.useImperativeHandle": ()=>innerRef.current
    }["OTPInputStandard.OTPInput3.useImperativeHandle"], []);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "OTPInputStandard.OTPInput3.useEffect": ()=>{
            var _a, _b;
            if (String(props.value).length === length && autoSubmit) {
                (_b = (_a = innerRef.current) == null ? void 0 : _a.form) == null ? void 0 : _b.requestSubmit();
            }
        }
    }["OTPInputStandard.OTPInput3.useEffect"], [
        props.value,
        length,
        autoSubmit
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Control"], {
        ref: innerRef,
        ...rest,
        "data-otp-input-standard": true
    });
});
var OTPInputSegmented = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(function OTPInput4(props, ref) {
    const { className: userProvidedClassName, render, length = OTP_LENGTH_DEFAULT, autoSubmit = false, passwordManagerOffset = PASSWORD_MANAGER_OFFSET_DEFAULT, ...rest } = props;
    const innerRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(null);
    const [selectionRange, setSelectionRange] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(props.autoFocus ? ZERO : OUTSIDE);
    const [isHovering, setIsHovering] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(false);
    const isFocused = ()=>document.activeElement === innerRef.current;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useImperativeHandle"])(ref, {
        "OTPInputSegmented.OTPInput4.useImperativeHandle": ()=>innerRef.current
    }["OTPInputSegmented.OTPInput4.useImperativeHandle"], []);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useLayoutEffect"])({
        "OTPInputSegmented.OTPInput4.useLayoutEffect": ()=>{
            if (document.activeElement !== innerRef.current) {
                return;
            }
            setSelectionRange({
                "OTPInputSegmented.OTPInput4.useLayoutEffect": (cur)=>selectionRangeUpdater(cur, innerRef)
            }["OTPInputSegmented.OTPInput4.useLayoutEffect"]);
        }
    }["OTPInputSegmented.OTPInput4.useLayoutEffect"], [
        props.value
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "OTPInputSegmented.OTPInput4.useEffect": ()=>{
            function onSelectionChange() {
                if (!isFocused()) {
                    return;
                }
                setSelectionRange({
                    "OTPInputSegmented.OTPInput4.useEffect.onSelectionChange": (cur)=>selectionRangeUpdater(cur, innerRef)
                }["OTPInputSegmented.OTPInput4.useEffect.onSelectionChange"]);
            }
            document.addEventListener("selectionchange", onSelectionChange, {
                capture: true
            });
            return ({
                "OTPInputSegmented.OTPInput4.useEffect": ()=>document.removeEventListener("selectionchange", onSelectionChange)
            })["OTPInputSegmented.OTPInput4.useEffect"];
        }
    }["OTPInputSegmented.OTPInput4.useEffect"], []);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "OTPInputSegmented.OTPInput4.useEffect": ()=>{
            var _a, _b;
            if (String(props.value).length === length && autoSubmit) {
                (_b = (_a = innerRef.current) == null ? void 0 : _a.form) == null ? void 0 : _b.requestSubmit();
            }
        }
    }["OTPInputSegmented.OTPInput4.useEffect"], [
        props.value,
        length,
        autoSubmit
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxs"])("div", {
        "data-otp-input-wrapper": true,
        style: wrapperStyle,
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])("style", {
                children: `
      input[data-otp-input-segmented]::selection {
        color: transparent;
        background-color: transparent;
      }
      `
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Control"], {
                "data-otp-input-segmented": true,
                ref: innerRef,
                ...rest,
                onFocus: (event)=>{
                    var _a;
                    if (innerRef.current) {
                        const start = Math.min(innerRef.current.value.length, length - 1);
                        const end = innerRef.current.value.length;
                        innerRef.current.setSelectionRange(start, end);
                        setSelectionRange([
                            start,
                            end
                        ]);
                    }
                    (_a = rest == null ? void 0 : rest.onFocus) == null ? void 0 : _a.call(rest, event);
                },
                onBlur: (event)=>{
                    var _a;
                    setSelectionRange([
                        -1,
                        -1
                    ]);
                    (_a = rest == null ? void 0 : rest.onBlur) == null ? void 0 : _a.call(rest, event);
                },
                onMouseOver: (event)=>{
                    var _a;
                    if (!isFocused()) {
                        setIsHovering(true);
                    }
                    (_a = props.onMouseOver) == null ? void 0 : _a.call(props, event);
                },
                onMouseLeave: (event)=>{
                    var _a;
                    setIsHovering(false);
                    (_a = props.onMouseLeave) == null ? void 0 : _a.call(props, event);
                },
                style: {
                    ...inputStyle,
                    clipPath: `inset(0 calc(1ch + ${passwordManagerOffset}px) 0 0)`,
                    width: `calc(100% + 1ch + ${passwordManagerOffset}px)`
                }
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])("div", {
                className: userProvidedClassName,
                "aria-hidden": true,
                style: segmentWrapperStyle,
                children: Array.from({
                    length
                }).map((_, i)=>{
                    var _a, _b;
                    const isHovered = isHovering && !isFocused();
                    const isCursor = selectionRange[0] === selectionRange[1] && selectionRange[0] === i;
                    const isSelected = ((_a = selectionRange[0]) != null ? _a : -1) <= i && ((_b = selectionRange[1]) != null ? _b : -1) > i;
                    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Fragment"], {
                        children: render({
                            value: String(props.value)[i] || "",
                            status: isHovered ? "hovered" : isCursor ? "cursor" : isSelected ? "selected" : "none",
                            index: i
                        })
                    }, `otp-segment-${i}`);
                })
            })
        ]
    });
});
function selectionRangeUpdater(cur, inputRef) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    let updated = [
        (_b = (_a = inputRef.current) == null ? void 0 : _a.selectionStart) != null ? _b : 0,
        (_d = (_c = inputRef.current) == null ? void 0 : _c.selectionEnd) != null ? _d : 0,
        (_f = (_e = inputRef.current) == null ? void 0 : _e.selectionDirection) != null ? _f : null
    ];
    if (cur[0] === updated[0] && cur[1] === updated[1]) {
        return cur;
    }
    if (updated[0] === 0 && updated[1] === 1) {
        updated[2] = "forward";
    }
    if (updated[0] === updated[1]) {
        if (updated[0] > 0 && cur[0] === updated[0] && cur[1] === updated[0] + 1) {
            updated = [
                updated[0] - 1,
                updated[1],
                "backward"
            ];
        } else if (typeof ((_g = inputRef.current) == null ? void 0 : _g.value[updated[0]]) !== "undefined") {
            updated = [
                updated[0],
                updated[1] + 1,
                "backward"
            ];
        } else if (updated[0] >= OTP_LENGTH_DEFAULT) {
            updated = [
                updated[0] - 1,
                updated[1],
                "backward"
            ];
        }
    }
    (_i = inputRef.current) == null ? void 0 : _i.setSelectionRange(updated[0], updated[1], (_h = updated[2]) != null ? _h : void 0);
    return [
        updated[0],
        updated[1]
    ];
}
var wrapperStyle = {
    position: "relative",
    userSelect: "none"
};
var inputStyle = {
    display: "block",
    background: "transparent",
    opacity: 0,
    outline: "transparent solid 0px",
    appearance: "none",
    color: "transparent",
    position: "absolute",
    inset: 0,
    caretColor: "transparent",
    border: "0px solid transparent",
    // width is handled inline
    height: "100%",
    letterSpacing: "-1rem"
};
var segmentWrapperStyle = {
    zIndex: 1,
    pointerEvents: "none"
};
// src/react/common/form/utils/enrich-field-state.ts
function enrichFieldState(validity, fieldState) {
    return (validity == null ? void 0 : validity.valid) === false ? FIELD_STATES.error : fieldState;
}
// src/react/common/form/utils/determine-input-type-from-name.ts
function determineInputTypeFromName(name) {
    if (name === "password" || name === "confirmPassword" || name === "currentPassword" || name === "newPassword") {
        return "password";
    }
    if (name === "emailAddress") {
        return "email";
    }
    if (name === "phoneNumber") {
        return "tel";
    }
    if (name === "code") {
        return "otp";
    }
    if (name === "backup_code") {
        return "backup_code";
    }
    return "text";
}
;
function usePrevious(value) {
    const ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "usePrevious.useEffect": ()=>{
            ref.current = value;
        }
    }["usePrevious.useEffect"], [
        value
    ]);
    return ref.current;
}
;
var ValidityStateContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(void 0);
var useValidityStateContext = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(ValidityStateContext);
// src/react/common/form/hooks/use-input.tsx
function useInput({ name: inputName, value: providedValue, checked: providedChecked, onChange: onChangeProp, onBlur: onBlurProp, onFocus: onFocusProp, type: inputType, ...passthroughProps }) {
    const fieldContext = useFieldContext();
    const rawName = inputName || (fieldContext == null ? void 0 : fieldContext.name);
    const name = rawName === "backup_code" ? "code" : rawName;
    const { state: fieldState } = useFieldState({
        name
    });
    const validity = useValidityStateContext();
    if (!rawName || !name) {
        throw new Error("Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.");
    }
    const ref = useFormStore();
    const [hasPassedValiation, setHasPassedValidation] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])(false);
    const { validatePassword } = usePassword({
        onValidationComplexity: {
            "useInput.usePassword": (hasPassed)=>setHasPassedValidation(hasPassed)
        }["useInput.usePassword"],
        onValidationSuccess: {
            "useInput.usePassword": ()=>{
                ref.send({
                    type: "FIELD.FEEDBACK.SET",
                    field: {
                        name,
                        feedback: {
                            type: "success",
                            message: "Your password meets all the necessary requirements."
                        }
                    }
                });
            }
        }["useInput.usePassword"],
        onValidationError: {
            "useInput.usePassword": (error, codes)=>{
                if (error) {
                    ref.send({
                        type: "FIELD.FEEDBACK.SET",
                        field: {
                            name,
                            feedback: {
                                type: "error",
                                message: new ClerkElementsFieldError("password-validation-error", error),
                                codes
                            }
                        }
                    });
                }
            }
        }["useInput.usePassword"],
        onValidationWarning: {
            "useInput.usePassword": (warning, codes)=>ref.send({
                    type: "FIELD.FEEDBACK.SET",
                    field: {
                        name,
                        feedback: {
                            type: "warning",
                            message: warning,
                            codes
                        }
                    }
                })
        }["useInput.usePassword"],
        onValidationInfo: {
            "useInput.usePassword": (info, codes)=>{
                ref.send({
                    type: "FIELD.FEEDBACK.SET",
                    field: {
                        name,
                        feedback: {
                            type: "info",
                            message: info,
                            codes
                        }
                    }
                });
            }
        }["useInput.usePassword"]
    });
    const value = useFormSelector(fieldValueSelector(name));
    const prevValue = usePrevious(value);
    const hasValue = Boolean(value);
    const type = inputType != null ? inputType : determineInputTypeFromName(rawName);
    let nativeFieldType = type;
    let shouldValidatePassword = false;
    if (type === "password" || type === "text") {
        shouldValidatePassword = Boolean(passthroughProps.validatePassword);
    }
    if (nativeFieldType === "otp" || nativeFieldType === "backup_code") {
        nativeFieldType = "text";
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "useInput.useEffect": ()=>{
            if (!name) {
                return;
            }
            ref.send({
                type: "FIELD.ADD",
                field: {
                    name,
                    type: nativeFieldType,
                    value: providedValue,
                    checked: providedChecked
                }
            });
            return ({
                "useInput.useEffect": ()=>ref.send({
                        type: "FIELD.REMOVE",
                        field: {
                            name
                        }
                    })
            })["useInput.useEffect"];
        }
    }["useInput.useEffect"], [
        ref
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "useInput.useEffect": ()=>{
            if (!name) {
                return;
            }
            if (type === "checkbox" && providedChecked !== void 0 || type !== "checkbox" && providedValue !== void 0) {
                ref.send({
                    type: "FIELD.UPDATE",
                    field: {
                        name,
                        value: providedValue,
                        checked: providedChecked
                    }
                });
            }
        }
    }["useInput.useEffect"], [
        name,
        type,
        ref,
        providedValue,
        providedChecked
    ]);
    const onChange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useInput.useCallback[onChange]": (event)=>{
            onChangeProp == null ? void 0 : onChangeProp(event);
            if (!name) {
                return;
            }
            ref.send({
                type: "FIELD.UPDATE",
                field: {
                    name,
                    value: event.target.value,
                    checked: event.target.checked
                }
            });
            if (shouldValidatePassword) {
                validatePassword(event.target.value);
            }
        }
    }["useInput.useCallback[onChange]"], [
        ref,
        name,
        onChangeProp,
        shouldValidatePassword,
        validatePassword
    ]);
    const onBlur = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useInput.useCallback[onBlur]": (event)=>{
            onBlurProp == null ? void 0 : onBlurProp(event);
            if (shouldValidatePassword && event.target.value !== prevValue) {
                validatePassword(event.target.value);
            }
        }
    }["useInput.useCallback[onBlur]"], [
        onBlurProp,
        shouldValidatePassword,
        validatePassword,
        prevValue
    ]);
    const onFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useInput.useCallback[onFocus]": (event)=>{
            onFocusProp == null ? void 0 : onFocusProp(event);
            if (shouldValidatePassword && event.target.value !== prevValue) {
                validatePassword(event.target.value);
            }
        }
    }["useInput.useCallback[onFocus]"], [
        onFocusProp,
        shouldValidatePassword,
        validatePassword,
        prevValue
    ]);
    const shouldBeHidden = false;
    const Element = type === "otp" ? OTPInput : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Control"];
    let props = {};
    if (type === "otp") {
        const p = passthroughProps;
        const length = p.length || OTP_LENGTH_DEFAULT;
        props = {
            "data-otp-input": true,
            autoComplete: "one-time-code",
            inputMode: "numeric",
            pattern: `[0-9]{${length}}`,
            minLength: length,
            maxLength: length,
            onChange: (event)=>{
                event.currentTarget.value = event.currentTarget.value.replace(/\D+/g, "");
                onChange(event);
            },
            type: "text",
            spellCheck: false
        };
    } else if (type === "backup_code") {
        props = {
            autoComplete: "off",
            type: "text",
            spellCheck: false
        };
    } else if (type === "password" && shouldValidatePassword) {
        props = {
            "data-has-passed-validation": hasPassedValiation ? true : void 0
        };
    }
    const { validatePassword: _1, ...rest } = passthroughProps;
    return {
        Element,
        props: {
            type,
            value: value != null ? value : "",
            onChange,
            onBlur,
            onFocus,
            "data-hidden": ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : void 0,
            "data-has-value": hasValue ? true : void 0,
            "data-state": enrichFieldState(validity, fieldState),
            ...props,
            ...rest
        }
    };
}
;
var DISPLAY_NAME = "ClerkElementsField";
var DISPLAY_NAME_INNER = "ClerkElementsFieldInner";
var Field = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(({ alwaysShow, ...rest }, forwardedRef)=>{
    var _a;
    const formRef = useFormStore();
    const formCtx = formRef.getSnapshot().context;
    const isHiddenField = formCtx.progressive && Boolean((_a = formCtx.hidden) == null ? void 0 : _a.has(rest.name));
    const shouldHide = alwaysShow ? false : isHiddenField;
    return shouldHide ? null : /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FieldContext.Provider, {
        value: {
            name: rest.name
        },
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(FieldInner, {
            ...rest,
            ref: forwardedRef
        })
    });
});
Field.displayName = DISPLAY_NAME;
var FieldInner = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { children, ...rest } = props;
    const field = useField({
        name: rest.name
    });
    const { state: fieldState } = useFieldState({
        name: rest.name
    });
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Field"], {
        ...field.props,
        ...rest,
        ref: forwardedRef,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ValidityState"], {
            children: (validity)=>{
                const enrichedFieldState = enrichFieldState(validity, fieldState);
                return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(ValidityStateContext.Provider, {
                    value: validity,
                    children: typeof children === "function" ? children(enrichedFieldState) : children
                });
            }
        })
    });
});
FieldInner.displayName = DISPLAY_NAME_INNER;
;
;
;
;
function isReactFragment(node) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidElement"])(node) && node.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Fragment"];
}
;
var DISPLAY_NAME2 = "ClerkElementsFieldError";
var FieldError = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(({ asChild = false, children, code, name, ...rest }, forwardedRef)=>{
    const fieldContext = useFieldContext();
    const rawFieldName = (fieldContext == null ? void 0 : fieldContext.name) || name;
    const fieldName = rawFieldName === "backup_code" ? "code" : rawFieldName;
    const { feedback } = useFieldFeedback({
        name: fieldName
    });
    if (!((feedback == null ? void 0 : feedback.type) === "error")) {
        return null;
    }
    const error = feedback.message;
    if (!error) {
        return null;
    }
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "span";
    const child = typeof children === "function" ? children(error) : children;
    if (isReactFragment(child)) {
        throw new ClerkElementsRuntimeError("<FieldError /> cannot render a Fragment as a child.");
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FormMessage"], {
        "data-error-code": error.code,
        ...rest,
        ref: forwardedRef,
        asChild: true,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
            children: child || error.message
        })
    });
});
FieldError.displayName = DISPLAY_NAME2;
// src/react/common/form/field-state.tsx
var DISPLAY_NAME3 = "ClerkElementsFieldState";
function FieldState({ children }) {
    const field = useFieldContext();
    const { feedback } = useFieldFeedback({
        name: field == null ? void 0 : field.name
    });
    const { state } = useFieldState({
        name: field == null ? void 0 : field.name
    });
    const validity = useValidityStateContext();
    const message = (feedback == null ? void 0 : feedback.message) instanceof ClerkElementsFieldError ? feedback.message.message : feedback == null ? void 0 : feedback.message;
    const codes = feedback == null ? void 0 : feedback.codes;
    const fieldState = {
        state: enrichFieldState(validity, state),
        message,
        codes
    };
    return children(fieldState);
}
FieldState.displayName = DISPLAY_NAME3;
;
;
;
;
var DISPLAY_NAME4 = "ClerkElementsForm";
var Form = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(({ flowActor, onSubmit, ...rest }, forwardedRef)=>{
    const form = useForm({
        flowActor
    });
    const { onSubmit: internalOnSubmit, ...internalFormProps } = form.props;
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Form"], {
        ...internalFormProps,
        ...rest,
        onSubmit: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["composeEventHandlers"])(internalOnSubmit, onSubmit),
        ref: forwardedRef
    });
});
Form.displayName = DISPLAY_NAME4;
;
;
;
var DISPLAY_NAME5 = "ClerkElementsGlobalError";
var GlobalError = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(({ asChild = false, children, code, ...rest }, forwardedRef)=>{
    const { errors } = useGlobalErrors();
    const error = errors == null ? void 0 : errors[0];
    if (!error || code && error.code !== code) {
        return null;
    }
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "div";
    const child = typeof children === "function" ? children(error) : children;
    if (isReactFragment(child)) {
        throw new ClerkElementsRuntimeError("<GlobalError /> cannot render a Fragment as a child.");
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
        role: "alert",
        ...rest,
        ref: forwardedRef,
        children: child || error.message
    });
});
GlobalError.displayName = DISPLAY_NAME5;
;
;
;
;
;
;
function createContextFromActorRef(displayName) {
    const ReactContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(null);
    const OriginalProvider = ReactContext.Provider;
    function Provider({ children, actorRef }) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createElement"])(OriginalProvider, {
            value: actorRef
        }, children);
    }
    Provider.displayName = displayName;
    function useContext9(allowMissingActor = false) {
        const actorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(ReactContext);
        if (!allowMissingActor && !actorRef) {
            throw new Error(`You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}.Provider> component.`);
        }
        return actorRef;
    }
    function useSelector6(selector, compare) {
        const actor = useContext9();
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(actor, selector, compare);
    }
    return {
        Provider,
        useActorRef: useContext9,
        useSelector: useSelector6
    };
}
// src/react/sign-in/context/router.context.ts
var SignInRouterCtx = createContextFromActorRef("SignInRouterCtx");
function useSignInStep(name) {
    return SignInRouterCtx.useSelector({
        "useSignInStep.useSelector": (state)=>state.children[name]
    }["useSignInStep.useSelector"]);
}
var useSignInStartStep = ()=>useSignInStep("start");
var useSignInFirstFactorStep = ()=>useSignInStep("firstFactor");
var useSignInSecondFactorStep = ()=>useSignInStep("secondFactor");
var useSignInResetPasswordStep = ()=>useSignInStep("resetPassword");
var useSignInPasskeyAutofill = ()=>SignInRouterCtx.useSelector({
        "useSignInPasskeyAutofill.useSelector": (state)=>state.context.webAuthnAutofillSupport
    }["useSignInPasskeyAutofill.useSelector"]);
;
var SignInStrategyContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])({
    strategy: void 0
});
function useSignInStrategy() {
    const ctx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(SignInStrategyContext);
    if (!ctx) {
        throw new ClerkElementsRuntimeError("useSignInStrategy must be used within a <SignIn.Strategy> or <SignIn.SupportedStrategy> component.");
    }
    const { strategy } = ctx;
    return strategy;
}
;
var StrategiesContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])({
    current: void 0,
    isActive: (_name)=>false,
    preferred: void 0
});
function useStrategy(name) {
    const ctx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(StrategiesContext);
    if (!ctx) {
        throw new ClerkElementsRuntimeError('useStrategy must be used within a <SignIn.Step name="verifications"> component. Did you mean to `import { Step } from "@clerk/elements/sign-up"` instead?');
    }
    const { current, preferred, isActive } = ctx;
    return {
        current,
        preferred,
        get active () {
            return isActive(name);
        }
    };
}
;
var DISPLAY_NAME6 = "ClerkElementsInput";
var DISPLAY_NAME_PASSKEYS_AUTOFILL = "ClerkElementsInputWithPasskeyAutofill";
var Input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    var _a, _b, _c;
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    const field = useInput(props);
    const hasPasskeyAutofillProp = Boolean((_a = field.props.autoComplete) == null ? void 0 : _a.includes("webauthn"));
    const allowedTypeForPasskey = [
        "text",
        "email",
        "tel"
    ].includes(field.props.type);
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    (_c = clerk.telemetry) == null ? void 0 : _c.record((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$WR6SRQOL$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eventComponentMounted"])("Elements_Input", {
        type: (_b = props.type) != null ? _b : false,
        // @ts-expect-error - Depending on type the props can be different
        render: Boolean(props == null ? void 0 : props.render),
        // @ts-expect-error - Depending on type the props can be different
        asChild: Boolean(props == null ? void 0 : props.asChild),
        // @ts-expect-error - Depending on type the props can be different
        validatePassword: Boolean(props == null ? void 0 : props.validatePassword)
    }));
    if (signInRouterRef && hasPasskeyAutofillProp && allowedTypeForPasskey) {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(InputWithPasskeyAutofill, {
            ref: forwardedRef,
            ...props
        });
    }
    if (hasPasskeyAutofillProp && !allowedTypeForPasskey) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$CYDR2ZSA$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["logger"].warnOnce(`<Input autoComplete="webauthn"> can only be used with <Input type="text"> or <Input type="email">`);
    } else if (hasPasskeyAutofillProp) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$CYDR2ZSA$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["logger"].warnOnce(`<Input autoComplete="webauthn"> can only be used inside <SignIn> in order to trigger a sign-in attempt, otherwise it will be ignored.`);
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(field.Element, {
        ref: forwardedRef,
        ...field.props
    });
});
Input.displayName = DISPLAY_NAME6;
var InputWithPasskeyAutofill = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    const passkeyAutofillSupported = useSignInPasskeyAutofill();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "InputWithPasskeyAutofill.useEffect": ()=>{
            if (passkeyAutofillSupported) {
                signInRouterRef == null ? void 0 : signInRouterRef.send({
                    type: "AUTHENTICATE.PASSKEY.AUTOFILL"
                });
            }
        }
    }["InputWithPasskeyAutofill.useEffect"], [
        passkeyAutofillSupported,
        signInRouterRef
    ]);
    const field = useInput(props);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(field.Element, {
        ref: forwardedRef,
        ...field.props
    });
});
InputWithPasskeyAutofill.displayName = DISPLAY_NAME_PASSKEYS_AUTOFILL;
;
var DISPLAY_NAME7 = "ClerkElementsLabel";
var Label = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Label"];
Label.displayName = DISPLAY_NAME7;
;
var DISPLAY_NAME8 = "ClerkElementsSubmit";
var Submit = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$form$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Submit"];
Submit.displayName = DISPLAY_NAME8;
;
;
;
var ActiveTagsMode = {
    any: "any",
    all: "all"
};
function useActiveTags(actor, tags, mode = ActiveTagsMode.any) {
    const state = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(actor, {
        "useActiveTags.useSelector[state]": (s)=>s
    }["useActiveTags.useSelector[state]"], {
        "useActiveTags.useSelector[state]": (prev, next)=>prev.tags === next.tags
    }["useActiveTags.useSelector[state]"]);
    if (!state) {
        return false;
    }
    if (typeof tags === "string") {
        return state.hasTag(tags);
    }
    if (!Array.isArray(tags)) {
        throw new Error("Invalid tags parameter provided to useActiveTags");
    }
    switch(mode){
        case ActiveTagsMode.any:
            {
                const matching = new Set(tags.filter((tag)=>state.hasTag(tag)));
                return {
                    active: matching.size > 0,
                    activeTags: matching
                };
            }
        case ActiveTagsMode.all:
            return tags.length === state.tags.size ? tags.every((tag)=>state.hasTag(tag)) : false;
        default:
            return false;
    }
}
;
;
;
;
;
// src/utils/clerk-js.ts
var fromEntries = (iterable)=>{
    return [
        ...iterable
    ].reduce((obj, [key, val])=>{
        obj[key] = val;
        return obj;
    }, {});
};
// src/utils/third-party-strategies.ts
var oauthStrategies = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$oauth$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OAUTH_PROVIDERS"].map((p)=>p.strategy);
var providerToDisplayData = fromEntries([
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$oauth$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OAUTH_PROVIDERS"],
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$web3$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEB3_PROVIDERS"]
].map((p)=>{
    return [
        p.provider,
        {
            iconUrl: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$I6MTSTOF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["iconImageUrl"])(p.provider),
            name: p.name,
            strategy: p.strategy
        }
    ];
}));
var strategyToDisplayData = fromEntries([
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$oauth$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OAUTH_PROVIDERS"],
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$web3$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WEB3_PROVIDERS"]
].map((p)=>{
    return [
        p.strategy,
        {
            iconUrl: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$I6MTSTOF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["iconImageUrl"])(p.provider),
            id: p.provider,
            name: p.name
        }
    ];
}));
function isSamlStrategy(strategy) {
    return strategy === "saml";
}
function isEnterpriseSSOStrategy(strategy) {
    return strategy === "enterprise_sso";
}
function isWeb3Strategy(strategy, available) {
    return available.includes(strategy.startsWith("web3_") ? strategy : `web3_${strategy}_signature`);
}
function isAuthenticatableOauthStrategy(strategy, available) {
    return available.includes(strategy.startsWith("oauth_") ? strategy : `oauth_${strategy}`);
}
var emptyThirdPartyProviders = {
    authenticatableOauthStrategies: [],
    providerToDisplayData: {},
    strategies: [],
    strategyToDisplayData: {},
    web3Strategies: []
};
var getEnabledThirdPartyProviders = (environment)=>{
    if (!(environment == null ? void 0 : environment.userSettings)) {
        return emptyThirdPartyProviders;
    }
    const { socialProviderStrategies, web3FirstFactors, authenticatableSocialStrategies } = environment.userSettings;
    const knownSocialProviderStrategies = socialProviderStrategies.filter((s)=>oauthStrategies.includes(s));
    const knownAuthenticatableSocialStrategies = authenticatableSocialStrategies.filter((s)=>oauthStrategies.includes(s));
    return {
        authenticatableOauthStrategies: [
            ...knownAuthenticatableSocialStrategies
        ],
        providerToDisplayData,
        strategies: [
            ...knownSocialProviderStrategies,
            ...web3FirstFactors
        ],
        strategyToDisplayData,
        web3Strategies: web3FirstFactors
    };
};
// src/react/hooks/use-third-party-provider.hook.ts
var useIsProviderEnabled = (provider)=>{
    var _a, _b, _c, _d;
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    if (!clerk.loaded) {
        return null;
    }
    if (provider === "saml" || provider === "enterprise_sso") {
        return (_d = (_c = (_a = clerk.__unstable__environment) == null ? void 0 : _a.userSettings.saml.enabled) != null ? _c : (_b = clerk.__unstable__environment) == null ? void 0 : _b.userSettings.enterpriseSSO.enabled) != null ? _d : false;
    }
    const data = getEnabledThirdPartyProviders(clerk.__unstable__environment);
    return isAuthenticatableOauthStrategy(provider, data.authenticatableOauthStrategies) || isWeb3Strategy(provider, data.web3Strategies);
};
var useThirdPartyProvider = (ref, provider)=>{
    const isProviderEnabled = useIsProviderEnabled(provider);
    const isSaml = isSamlStrategy(provider);
    const isEnterpriseSSO = isEnterpriseSSOStrategy(provider);
    const details = isEnterpriseSSO || isSaml ? {
        name: "SSO",
        strategy: provider
    } : providerToDisplayData[provider];
    const authenticate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "useThirdPartyProvider.useCallback4[authenticate]": (event)=>{
            if (!isProviderEnabled) {
                return;
            }
            event.preventDefault();
            if (isSaml) {
                return ref.send({
                    type: "AUTHENTICATE.SAML"
                });
            }
            if (isEnterpriseSSO) {
                return ref.send({
                    type: "AUTHENTICATE.ENTERPRISE_SSO"
                });
            }
            if (provider === "metamask") {
                return ref.send({
                    type: "AUTHENTICATE.WEB3",
                    strategy: "web3_metamask_signature"
                });
            }
            if (provider === "coinbase_wallet") {
                return ref.send({
                    type: "AUTHENTICATE.WEB3",
                    strategy: "web3_coinbase_wallet_signature"
                });
            }
            if (provider === "okx_wallet") {
                return ref.send({
                    type: "AUTHENTICATE.WEB3",
                    strategy: "web3_okx_wallet_signature"
                });
            }
            return ref.send({
                type: "AUTHENTICATE.OAUTH",
                strategy: `oauth_${provider}`
            });
        }
    }["useThirdPartyProvider.useCallback4[authenticate]"], [
        provider,
        isProviderEnabled,
        isSaml,
        isEnterpriseSSO,
        ref
    ]);
    if (isProviderEnabled === false) {
        const dashboardPath = `https://dashboard.clerk.com/last-active?path=/user-authentication/${provider === "metamask" ? "web3" : "social-connections"}`;
        throw new ClerkElementsRuntimeError(`You have used <Connection name="${provider}"> which isn't enabled for your project. Enable ${details.name} in your Clerk dashboard: ${dashboardPath}`);
    }
    return {
        events: {
            authenticate
        },
        ...details
    };
};
// src/react/sign-up/context/router.context.ts
var SignUpRouterCtx = createContextFromActorRef("SignUpRouterCtx");
function useSignUpStep(name) {
    return SignUpRouterCtx.useSelector({
        "useSignUpStep.useSelector": (state)=>state.children[name]
    }["useSignUpStep.useSelector"]);
}
var useSignUpStartStep = ()=>useSignUpStep("start");
var useSignUpContinueStep = ()=>useSignUpStep("continue");
var useSignUpVerificationStep = ()=>useSignUpStep("verification");
;
var ConnectionContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(null);
var useConnectionContext = ()=>{
    const ctx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(ConnectionContext);
    if (!ctx) {
        throw new Error("useConnectionContext must be used within <Clerk.Connection>");
    }
    return ctx;
};
function Connection({ asChild, name, ...rest }) {
    const signInRef = SignInRouterCtx.useActorRef(true);
    const signUpRef = SignUpRouterCtx.useActorRef(true);
    const provider = useThirdPartyProvider(signInRef || signUpRef, name);
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "button";
    const defaultProps = asChild ? {} : {
        type: "button"
    };
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(ConnectionContext.Provider, {
        value: provider,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
            onClick: provider.events.authenticate,
            ...defaultProps,
            ...rest
        })
    });
}
function Icon({ asChild, ...rest }) {
    const { iconUrl, name } = useConnectionContext();
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "img";
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
        alt: `${name} logo`,
        src: iconUrl,
        ...rest
    });
}
;
;
;
;
var selectLoading = (snapshot)=>{
    var _a;
    return (_a = snapshot == null ? void 0 : snapshot.context) == null ? void 0 : _a.loading;
};
var compareLoadingValue = (prev, next)=>(prev == null ? void 0 : prev.isLoading) === (next == null ? void 0 : next.isLoading);
function useLoading(actor) {
    const loadingCtx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(actor, selectLoading, compareLoadingValue);
    if (!loadingCtx) {
        return [
            false,
            {
                step: void 0,
                strategy: void 0,
                action: void 0
            }
        ];
    }
    return [
        loadingCtx.isLoading,
        {
            step: loadingCtx.step,
            strategy: loadingCtx.strategy,
            action: loadingCtx.action
        }
    ];
}
;
;
;
;
;
function createContextForDomValidation(displayName) {
    const ReactContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(false);
    const OriginalProvider = ReactContext.Provider;
    function Provider({ children }) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createElement"])(OriginalProvider, {
            value: true
        }, children);
    }
    Provider.displayName = displayName;
    function useContext9(allowMissingContext = false) {
        const context = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(ReactContext);
        if (!allowMissingContext && !context) {
            throw new Error(`You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}.Provider> component.`);
        }
        return context;
    }
    return {
        Provider,
        useDomValidation: useContext9
    };
}
;
function isValidComponentType(child, type) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidElement"])(child) && child.type === type;
}
;
var SignInActiveSessionContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createContext"])(null);
function useSignInActiveSessionContext() {
    const ctx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useContext"])(SignInActiveSessionContext);
    if (!ctx) {
        throw new Error("SignInActiveSessionContext must be used within a SessionList/SignInSessionListItem");
    }
    return ctx;
}
function useSignInChooseSessionIsActive() {
    const routerRef = SignInRouterCtx.useActorRef();
    return useActiveTags(routerRef, "step:choose-session");
}
function useSignInSessionList(params) {
    const { omitCurrent = true } = params || {};
    return SignInRouterCtx.useSelector({
        "useSignInSessionList.useSelector": (state)=>{
            var _a, _b, _c, _d;
            const signedInSessions = ((_b = (_a = state.context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signedInSessions) || [];
            const currentSessionId = (_d = (_c = state.context.clerk) == null ? void 0 : _c.session) == null ? void 0 : _d.id;
            const filteredSessions = omitCurrent ? signedInSessions.filter({
                "useSignInSessionList.useSelector": (s)=>s.id !== currentSessionId
            }["useSignInSessionList.useSelector"]) : signedInSessions;
            return filteredSessions.map({
                "useSignInSessionList.useSelector": (s)=>({
                        id: s.id,
                        ...s.publicUserData
                    })
            }["useSignInSessionList.useSelector"]);
        }
    }["useSignInSessionList.useSelector"]);
}
;
var SignInChooseSessionCtx = createContextForDomValidation("SignInChooseSessionCtx");
function SignInChooseSession({ asChild, children, ...props }) {
    const activeState = useSignInChooseSessionIsActive();
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "div";
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInChooseSessionCtx.Provider, {
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
            ...props,
            children
        })
    }) : null;
}
function SignInSessionList({ asChild, children, includeCurrentSession, ...props }) {
    const sessions = useSignInSessionList({
        omitCurrent: !includeCurrentSession
    });
    if (!children || !(sessions == null ? void 0 : sessions.length)) {
        return null;
    }
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Children"].count(children) > 1) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Children"].only(null);
    }
    if (asChild && isValidComponentType(children, SignInSessionListItem)) {
        throw new Error("asChild cannot be used with SessionListItem as the direct child");
    }
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidElement"])(children)) {
        throw new Error("children must be a valid React element");
    }
    const newChildren = asChild ? children.props.children : children;
    const childrenWithCtx = sessions.map((session)=>{
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInActiveSessionContext.Provider, {
            value: session,
            children: newChildren
        }, `SignInActiveSessionContext-${session.id}`);
    });
    if (asChild) {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"], {
            ...props,
            children: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cloneElement"])(children, void 0, childrenWithCtx)
        });
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])("ul", {
        ...props,
        children: childrenWithCtx
    });
}
function SignInSessionListItem(props) {
    const { asChild = false, children, ...passthroughProps } = props;
    const session = useSignInActiveSessionContext();
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "li";
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
        ...passthroughProps,
        children: children({
            session
        })
    });
}
;
;
;
;
;
// src/internals/constants/index.ts
var SSO_CALLBACK_PATH_ROUTE = "/sso-callback";
var CHOOSE_SESSION_PATH_ROUTE = "/choose";
var MAGIC_LINK_VERIFY_PATH_ROUTE = "/verify";
var SIGN_UP_MODES = {
    PUBLIC: "public",
    RESTRICTED: "restricted"
};
var SIGN_IN_DEFAULT_BASE_PATH = safeAccess(()=>{
    var _a;
    return (_a = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.CLERK_SIGN_IN_URL) != null ? _a : ("TURBOPACK compile-time value", "/sign-in");
}, "/sign-in");
var SIGN_UP_DEFAULT_BASE_PATH = safeAccess(()=>{
    var _a;
    return (_a = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.CLERK_SIGN_UP_URL) != null ? _a : ("TURBOPACK compile-time value", "/sign-up");
}, "/sign-up");
var NEXT_WINDOW_HISTORY_SUPPORT_VERSION = "14.1.0";
var SEARCH_PARAMS = {
    createdSession: "__clerk_created_session",
    handshake: "__clerk_handshake",
    help: "__clerk_help",
    invitationToken: "__clerk_invitation_token",
    modalState: "__clerk_modal_state",
    satelliteUrl: "__clerk_satellite_url",
    status: "__clerk_status",
    synced: "__clerk_synced",
    ticket: "__clerk_ticket",
    transfer: "__clerk_transfer"
};
var RESENDABLE_COUNTDOWN_DEFAULT = 60;
var CAPTCHA_ELEMENT_ID = "clerk-captcha";
var ERROR_CODES = {
    FORM_IDENTIFIER_NOT_FOUND: "form_identifier_not_found",
    FORM_PASSWORD_INCORRECT: "form_password_incorrect",
    INVALID_STRATEGY_FOR_USER: "strategy_for_user_invalid",
    NOT_ALLOWED_TO_SIGN_UP: "not_allowed_to_sign_up",
    OAUTH_ACCESS_DENIED: "oauth_access_denied",
    OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML: "oauth_email_domain_reserved_by_saml",
    NOT_ALLOWED_ACCESS: "not_allowed_access",
    SAML_USER_ATTRIBUTE_MISSING: "saml_user_attribute_missing",
    USER_LOCKED: "user_locked",
    ENTERPRISE_SSO_USER_ATTRIBUTE_MISSING: "enterprise_sso_user_attribute_missing",
    ENTERPRISE_SSO_EMAIL_ADDRESS_DOMAIN_MISMATCH: "enterprise_sso_email_address_domain_mismatch",
    ENTERPRISE_SSO_HOSTED_DOMAIN_MISMATCH: "enterprise_sso_hosted_domain_mismatch",
    SAML_EMAIL_ADDRESS_DOMAIN_MISMATCH: "saml_email_address_domain_mismatch",
    ORGANIZATION_MEMBERSHIP_QUOTA_EXCEEDED_FOR_SSO: "organization_membership_quota_exceeded_for_sso"
};
var ROUTING = {
    path: "path",
    virtual: "virtual",
    hash: "hash"
};
// src/internals/machines/shared/shared.actions.ts
function sendToLoading({ context, event }) {
    let step;
    let strategy;
    let action;
    if (event.type.startsWith("xstate.done.") || event.type.startsWith("xstate.error.")) {
        return context.parent.send({
            type: "LOADING",
            isLoading: false,
            step: void 0,
            strategy: void 0
        });
    }
    if (context.loadingStep === "strategy") {
        step = void 0;
        if (event.type === "REDIRECT") {
            strategy = event.params.strategy;
        }
        return context.parent.send({
            type: "LOADING",
            isLoading: true,
            step,
            strategy
        });
    } else if (context.loadingStep === "continue") {
        step = "continue";
        strategy = void 0;
        action = "action" in event ? event.action : void 0;
        return context.parent.send({
            type: "LOADING",
            isLoading: true,
            step,
            strategy,
            action
        });
    } else if (context.loadingStep === "reset-password") {
        step = "reset-password";
        strategy = void 0;
        action = "action" in event ? event.action : void 0;
        return context.parent.send({
            type: "LOADING",
            isLoading: true,
            step,
            strategy,
            action
        });
    } else if (context.loadingStep === "start") {
        step = "start";
        strategy = void 0;
        action = "action" in event ? event.action : void 0;
        return context.parent.send({
            type: "LOADING",
            isLoading: true,
            step,
            strategy,
            action
        });
    } else {
        step = context.loadingStep;
        strategy = void 0;
        action = "action" in event ? event.action : void 0;
        return context.parent.send({
            type: "LOADING",
            isLoading: true,
            step,
            strategy,
            action
        });
    }
}
;
var makeSortingOrderMap = (arr)=>arr.reduce((acc, k, i)=>{
        acc[k] = i;
        return acc;
    }, {});
var STRATEGY_SORT_ORDER_PASSWORD_PREF = makeSortingOrderMap([
    "passkey",
    "password",
    "email_link",
    "email_code",
    "phone_code"
]);
var STRATEGY_SORT_ORDER_OTP_PREF = makeSortingOrderMap([
    "email_code",
    "email_link",
    "phone_code",
    "passkey",
    "password"
]);
var makeSortingFunction = (sortingMap)=>(a, b)=>{
        const orderA = sortingMap[a.strategy];
        const orderB = sortingMap[b.strategy];
        if (orderA === void 0 || orderB === void 0) {
            return 0;
        }
        return orderA - orderB;
    };
var passwordPrefFactorComparator = makeSortingFunction(STRATEGY_SORT_ORDER_PASSWORD_PREF);
var otpPrefFactorComparator = makeSortingFunction(STRATEGY_SORT_ORDER_OTP_PREF);
var findFactorForIdentifier = (i)=>(f)=>{
        return "safeIdentifier" in f && f.safeIdentifier === i;
    };
function determineStartingSignInFactor(firstFactors, identifier, preferredSignInStrategy) {
    if (!firstFactors || firstFactors.length === 0) {
        return null;
    }
    return preferredSignInStrategy === "password" ? determineStrategyWhenPasswordIsPreferred(firstFactors, identifier) : determineStrategyWhenOTPIsPreferred(firstFactors, identifier);
}
function findPasskeyStrategy(factors) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$webauthn$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWebAuthnSupported"])()) {
        const passkeyFactor = factors.find(({ strategy })=>strategy === "passkey");
        if (passkeyFactor) {
            return passkeyFactor;
        }
    }
    return null;
}
function determineStrategyWhenPasswordIsPreferred(factors, identifier) {
    const passkeyFactor = findPasskeyStrategy(factors);
    if (passkeyFactor) {
        return passkeyFactor;
    }
    const selected = factors.sort(passwordPrefFactorComparator)[0];
    if (selected.strategy === "password") {
        return selected;
    }
    return factors.find(findFactorForIdentifier(identifier)) || selected || null;
}
function determineStrategyWhenOTPIsPreferred(factors, identifier) {
    const passkeyFactor = findPasskeyStrategy(factors);
    if (passkeyFactor) {
        return passkeyFactor;
    }
    const sortedBasedOnPrefFactor = factors.sort(otpPrefFactorComparator);
    const forIdentifier = sortedBasedOnPrefFactor.find(findFactorForIdentifier(identifier));
    if (forIdentifier) {
        return forIdentifier;
    }
    const firstBasedOnPref = sortedBasedOnPrefFactor[0];
    if (firstBasedOnPref.strategy === "email_link") {
        return firstBasedOnPref;
    }
    return factors.find(findFactorForIdentifier(identifier)) || firstBasedOnPref || null;
}
function determineStartingSignInSecondFactor(secondFactors) {
    if (!secondFactors || secondFactors.length === 0) {
        return null;
    }
    const totpFactor = secondFactors.find((f)=>f.strategy === "totp");
    if (totpFactor) {
        return totpFactor;
    }
    const phoneCodeFactor = secondFactors.find((f)=>f.strategy === "phone_code");
    if (phoneCodeFactor) {
        return phoneCodeFactor;
    }
    return secondFactors[0];
}
// src/internals/machines/utils/assert.ts
function assertIsDefined(value, label) {
    if (value === void 0 || value === null) {
        throw new Error(`${label || value} is not defined`);
    }
}
function assertActorEventError(event) {
    if ("error" in event === false) {
        throw new Error(`Expected an error event, got "${event.type}"`);
    }
}
// src/internals/machines/sign-in/verification.types.ts
var SignInVerificationDelays = {
    resendableTimeout: 1e3
};
// src/internals/machines/sign-in/verification.machine.ts
var isNonPreparableStrategy = (strategy)=>{
    if (!strategy) {
        return false;
    }
    return [
        "passkey",
        "password"
    ].includes(strategy);
};
var SignInVerificationMachineId = "SignInVerification";
var SignInVerificationMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        determineStartingFactor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(()=>Promise.reject(new ClerkElementsRuntimeError("Actor `determineStartingFactor` must be overridden"))),
        prepare: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(()=>Promise.reject(new ClerkElementsRuntimeError("Actor `prepare` must be overridden"))),
        attempt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(()=>Promise.reject(new ClerkElementsRuntimeError("Actor `attempt` must be overridden"))),
        attemptPasskey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { parent, flow } })=>{
            return parent.getSnapshot().context.clerk.client.signIn.authenticateWithPasskey({
                flow
            });
        })
    },
    actions: {
        resendableTick: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ context })=>({
                resendable: context.resendableAfter === 0,
                resendableAfter: context.resendableAfter > 0 ? context.resendableAfter - 1 : context.resendableAfter
            })),
        resendableReset: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            resendable: false,
            resendableAfter: RESENDABLE_COUNTDOWN_DEFAULT
        }),
        validateRegisteredStrategies: ({ context })=>{
            var _a;
            const clerk = context.parent.getSnapshot().context.clerk;
            if ((_a = clerk.__unstable__environment) == null ? void 0 : _a.isProduction()) {
                return;
            }
            if ("TURBOPACK compile-time falsy", 0) {
                "TURBOPACK unreachable";
            }
        },
        sendToNext: ({ context, event })=>context.parent.send({
                type: "NEXT",
                resource: event.output
            }),
        sendToLoading,
        setFormErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, ({ event })=>{
            assertActorEventError(event);
            return {
                type: "ERRORS.SET",
                error: event.error
            };
        }),
        setConsoleError: ({ event })=>{
            if ("TURBOPACK compile-time truthy", 1) {
                return;
            }
            "TURBOPACK unreachable";
            const error = undefined;
        }
    },
    guards: {
        isResendable: ({ context })=>context.resendable || context.resendableAfter === 0,
        isNeverResendable: ({ context })=>{
            var _a;
            return isNonPreparableStrategy((_a = context.currentFactor) == null ? void 0 : _a.strategy);
        }
    },
    delays: SignInVerificationDelays,
    types: {}
}).createMachine({
    id: SignInVerificationMachineId,
    context: ({ input })=>({
            currentFactor: null,
            basePath: input.basePath || SIGN_IN_DEFAULT_BASE_PATH,
            formRef: input.formRef,
            loadingStep: "verifications",
            parent: input.parent,
            registeredStrategies: /* @__PURE__ */ new Set(),
            resendable: false,
            resendableAfter: RESENDABLE_COUNTDOWN_DEFAULT
        }),
    initial: "Init",
    on: {
        "NAVIGATE.PREVIOUS": ".Hist",
        "STRATEGY.REGISTER": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                registeredStrategies: ({ context, event })=>context.registeredStrategies.add(event.factor)
            })
        },
        "STRATEGY.UNREGISTER": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                registeredStrategies: ({ context, event })=>{
                    context.registeredStrategies.delete(event.factor);
                    return context.registeredStrategies;
                }
            })
        }
    },
    states: {
        Init: {
            tags: [
                "state:preparing",
                "state:loading"
            ],
            invoke: {
                id: "determineStartingFactor",
                src: "determineStartingFactor",
                input: ({ context })=>({
                        parent: context.parent
                    }),
                onDone: {
                    target: "Preparing",
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                        currentFactor: ({ event })=>event.output
                    })
                },
                onError: {
                    target: "Preparing",
                    actions: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])("Clerk [Sign In Verification]: Error determining starting factor"),
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                            currentFactor: {
                                strategy: "password"
                            }
                        })
                    ]
                }
            }
        },
        Preparing: {
            tags: [
                "state:preparing",
                "state:loading"
            ],
            invoke: {
                id: "prepare",
                src: "prepare",
                input: ({ context })=>({
                        parent: context.parent,
                        resendable: context.resendable,
                        params: {
                            ...context.currentFactor,
                            redirectUrl: `${window.location.origin}${context.basePath}${MAGIC_LINK_VERIFY_PATH_ROUTE}`
                        }
                    }),
                onDone: {
                    actions: "resendableReset",
                    target: "Pending"
                },
                onError: {
                    actions: [
                        "setFormErrors",
                        "setConsoleError"
                    ],
                    target: "Pending"
                }
            }
        },
        Pending: {
            tags: [
                "state:pending"
            ],
            description: "Waiting for user input",
            on: {
                "AUTHENTICATE.PASSKEY": {
                    target: "AttemptingPasskey",
                    reenter: true
                },
                "NAVIGATE.CHOOSE_STRATEGY": "ChooseStrategy",
                "NAVIGATE.FORGOT_PASSWORD": "ChooseStrategy",
                RETRY: "Preparing",
                SUBMIT: {
                    target: "Attempting",
                    reenter: true
                }
            },
            initial: "Init",
            states: {
                Init: {
                    description: "Marks appropriate factors as never resendable.",
                    always: [
                        {
                            guard: "isNeverResendable",
                            target: "NeverResendable"
                        },
                        {
                            target: "NotResendable"
                        }
                    ]
                },
                Resendable: {
                    description: "Waiting for user to retry"
                },
                NeverResendable: {
                    description: "Handles never resendable",
                    on: {
                        RETRY: {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])("Never retriable")
                        }
                    }
                },
                NotResendable: {
                    description: "Handle countdowns",
                    on: {
                        RETRY: {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])(({ context })=>`Not retriable; Try again in ${context.resendableAfter}s`)
                        }
                    },
                    after: {
                        resendableTimeout: [
                            {
                                description: "Set as retriable if countdown is 0",
                                guard: "isResendable",
                                actions: "resendableTick",
                                target: "Resendable"
                            },
                            {
                                description: "Continue countdown if not retriable",
                                actions: "resendableTick",
                                target: "NotResendable",
                                reenter: true
                            }
                        ]
                    }
                }
            },
            after: {
                3e3: {
                    actions: "validateRegisteredStrategies"
                }
            }
        },
        ChooseStrategy: {
            description: "Handles both choose strategy and forgot password as the latter is similar in functionality",
            tags: [
                "state:choose-strategy",
                "state:forgot-password"
            ],
            on: {
                "STRATEGY.UPDATE": {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                        currentFactor: ({ event })=>event.factor || null
                    }),
                    target: "Preparing"
                }
            }
        },
        Attempting: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attempt",
                src: "attempt",
                input: ({ context })=>({
                        parent: context.parent,
                        currentFactor: context.currentFactor,
                        fields: context.formRef.getSnapshot().context.fields
                    }),
                onDone: {
                    actions: [
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormErrors",
                        "setConsoleError",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        },
        AttemptingPasskey: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attemptPasskey",
                src: "attemptPasskey",
                input: ({ context })=>({
                        parent: context.parent,
                        flow: "discoverable"
                    }),
                onDone: {
                    actions: [
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormErrors",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        },
        Hist: {
            type: "history"
        }
    }
});
var SignInFirstFactorMachine = SignInVerificationMachine.provide({
    actors: {
        determineStartingFactor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(async ({ input })=>{
            var _a;
            const clerk = input.parent.getSnapshot().context.clerk;
            return Promise.resolve(determineStartingSignInFactor(clerk.client.signIn.supportedFirstFactors, clerk.client.signIn.identifier, (_a = clerk.__unstable__environment) == null ? void 0 : _a.displayConfig.preferredSignInStrategy));
        }),
        prepare: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(async ({ input })=>{
            const { params, parent, resendable } = input;
            const clerk = parent.getSnapshot().context.clerk;
            const currentVerificationExpiration = clerk.client.signIn.firstFactorVerification.expireAt;
            const needsPrepare = resendable || !currentVerificationExpiration || currentVerificationExpiration < /* @__PURE__ */ new Date();
            if (isNonPreparableStrategy(params == null ? void 0 : params.strategy) || !needsPrepare) {
                return Promise.resolve(clerk.client.signIn);
            }
            assertIsDefined(params, "First factor params");
            return await clerk.client.signIn.prepareFirstFactor(params);
        }),
        attempt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(async ({ input })=>{
            var _a, _b, _c, _d, _e;
            const { currentFactor, fields, parent } = input;
            assertIsDefined(currentFactor, "Current factor");
            let attemptParams;
            const strategy = currentFactor.strategy;
            const code = (_a = fields.get("code")) == null ? void 0 : _a.value;
            const password = (_b = fields.get("password")) == null ? void 0 : _b.value;
            switch(strategy){
                case "passkey":
                    {
                        return await parent.getSnapshot().context.clerk.client.signIn.authenticateWithPasskey();
                    }
                case "password":
                    {
                        assertIsDefined(password, "Password");
                        attemptParams = {
                            strategy,
                            password
                        };
                        break;
                    }
                case "reset_password_phone_code":
                case "reset_password_email_code":
                    {
                        assertIsDefined(code, "Code for resetting phone/email");
                        attemptParams = {
                            strategy,
                            code,
                            password
                        };
                        break;
                    }
                case "phone_code":
                case "email_code":
                    {
                        assertIsDefined(code, "Code for phone/email");
                        attemptParams = {
                            strategy,
                            code
                        };
                        break;
                    }
                case "web3_metamask_signature":
                    {
                        const signature = (_c = fields.get("signature")) == null ? void 0 : _c.value;
                        assertIsDefined(signature, "Web3 Metamask signature");
                        attemptParams = {
                            strategy,
                            signature
                        };
                        break;
                    }
                case "web3_coinbase_wallet_signature":
                    {
                        const signature = (_d = fields.get("signature")) == null ? void 0 : _d.value;
                        assertIsDefined(signature, "Web3 Coinbase Wallet signature");
                        attemptParams = {
                            strategy,
                            signature
                        };
                        break;
                    }
                case "web3_okx_wallet_signature":
                    {
                        const signature = (_e = fields.get("signature")) == null ? void 0 : _e.value;
                        assertIsDefined(signature, "Web3 OKX Wallet signature");
                        attemptParams = {
                            strategy,
                            signature
                        };
                        break;
                    }
                default:
                    throw new ClerkElementsRuntimeError(`Invalid strategy: ${strategy}`);
            }
            return await parent.getSnapshot().context.clerk.client.signIn.attemptFirstFactor(attemptParams);
        })
    }
});
var SignInSecondFactorMachine = SignInVerificationMachine.provide({
    actors: {
        determineStartingFactor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(async ({ input })=>Promise.resolve(determineStartingSignInSecondFactor(input.parent.getSnapshot().context.clerk.client.signIn.supportedSecondFactors))),
        prepare: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(async ({ input })=>{
            const { params, parent, resendable } = input;
            const clerk = parent.getSnapshot().context.clerk;
            const currentVerificationExpiration = clerk.client.signIn.secondFactorVerification.expireAt;
            const needsPrepare = resendable || !currentVerificationExpiration || currentVerificationExpiration < /* @__PURE__ */ new Date();
            assertIsDefined(params, "Second factor params");
            if (params.strategy !== "phone_code" || !needsPrepare) {
                return Promise.resolve(clerk.client.signIn);
            }
            return await clerk.client.signIn.prepareSecondFactor({
                strategy: params.strategy,
                phoneNumberId: params.phoneNumberId
            });
        }),
        attempt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(async ({ input })=>{
            var _a;
            const { fields, parent, currentFactor } = input;
            const code = (_a = fields.get("code")) == null ? void 0 : _a.value;
            assertIsDefined(currentFactor, "Current factor");
            assertIsDefined(code, "Code");
            return await parent.getSnapshot().context.clerk.client.signIn.attemptSecondFactor({
                strategy: currentFactor.strategy,
                code
            });
        })
    }
});
;
;
;
;
// src/internals/machines/utils/clerkjs.ts
function isClerkJSEvent(eventObj, event) {
    return Object.values(eventObj).includes(event);
}
var ClerkJSNavigationEvent = {
    complete: "CLERKJS.NAVIGATE.COMPLETE",
    signUp: "CLERKJS.NAVIGATE.SIGN_UP",
    continue: "CLERKJS.NAVIGATE.CONTINUE",
    generic: "CLERKJS.NAVIGATE.GENERIC",
    resetPassword: "CLERKJS.NAVIGATE.RESET_PASSWORD",
    signIn: "CLERKJS.NAVIGATE.SIGN_IN",
    verification: "CLERKJS.NAVIGATE.VERIFICATION"
};
function isClerkJSNavigationEvent(event) {
    return isClerkJSEvent(ClerkJSNavigationEvent, event);
}
// src/internals/machines/third-party/third-party.actors.ts
var redirect = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(async ({ input: { flow, params, parent } })=>{
    const clerk = parent.getSnapshot().context.clerk;
    return clerk.client[flow].authenticateWithRedirect({
        redirectUrl: clerk.buildUrlWithAuth(params.redirectUrl || "/"),
        redirectUrlComplete: clerk.buildUrlWithAuth(params.redirectUrlComplete || "/"),
        ...params
    });
});
var handleRedirectCallback = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromCallback"])(({ sendBack, input: parent })=>{
    var _a, _b;
    const clerk = parent.getSnapshot().context.clerk;
    const displayConfig = (_a = clerk.__unstable__environment) == null ? void 0 : _a.displayConfig;
    const customNavigate = (toEvt)=>{
        const to = toEvt.split("/").slice(-1)[0];
        if (isClerkJSNavigationEvent(to)) {
            sendBack({
                type: to
            });
        } else if (to === (displayConfig == null ? void 0 : displayConfig.signInUrl)) {
            sendBack({
                type: ClerkJSNavigationEvent.signIn
            });
        } else if (to === (displayConfig == null ? void 0 : displayConfig.signUpUrl)) {
            sendBack({
                type: ClerkJSNavigationEvent.signUp
            });
        } else {
            sendBack({
                type: "FAILURE",
                error: new ClerkElementsRuntimeError(`Unknown navigation event: ${to}`)
            });
        }
        return Promise.resolve();
    };
    const loadedClerk = (_b = clerk.clerkjs) != null ? _b : clerk;
    void loadedClerk.handleRedirectCallback({
        continueSignUpUrl: ClerkJSNavigationEvent.continue,
        firstFactorUrl: ClerkJSNavigationEvent.signIn,
        resetPasswordUrl: ClerkJSNavigationEvent.resetPassword,
        secondFactorUrl: ClerkJSNavigationEvent.signIn,
        verifyEmailAddressUrl: ClerkJSNavigationEvent.verification,
        verifyPhoneNumberUrl: ClerkJSNavigationEvent.verification,
        signUpUrl: ClerkJSNavigationEvent.signUp,
        signInUrl: ClerkJSNavigationEvent.signIn
    }, customNavigate);
    return ()=>void 0;
});
;
var ThirdPartyMachineId = "ThirdParty";
var ThirdPartyMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        handleRedirectCallback,
        redirect
    },
    actions: {
        logError: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])(({ event })=>`Error: ${event.type}`),
        assignActiveStrategy: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            activeStrategy: ({ event })=>{
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "REDIRECT");
                return event.params.strategy;
            }
        }),
        unassignActiveStrategy: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            activeStrategy: null
        }),
        sendToNext: ({ context })=>context.parent.send({
                type: "NEXT"
            }),
        sendToLoading,
        setFormErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, ({ event })=>{
            assertActorEventError(event);
            return {
                type: "ERRORS.SET",
                error: event.error
            };
        })
    },
    guards: {
        isExampleMode: ({ context })=>Boolean(context.parent.getSnapshot().context.exampleMode)
    },
    types: {}
}).createMachine({
    id: ThirdPartyMachineId,
    context: ({ input })=>({
            activeStrategy: null,
            basePath: input.basePath,
            formRef: input.formRef,
            flow: input.flow,
            parent: input.parent,
            loadingStep: "strategy"
        }),
    initial: "Idle",
    states: {
        Idle: {
            description: "Sets third-party providers if not already set, and waits for a redirect or callback event",
            on: {
                CALLBACK: "HandlingCallback",
                REDIRECT: {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "Redirecting",
                    reenter: true
                }
            }
        },
        Redirecting: {
            description: "Redirects to the third-party provider for authentication",
            tags: [
                "state:redirect",
                "state:loading"
            ],
            entry: [
                "assignActiveStrategy",
                "sendToLoading"
            ],
            exit: [
                "unassignActiveStrategy",
                "sendToLoading"
            ],
            invoke: {
                id: "redirect",
                src: "redirect",
                input: ({ context, event })=>{
                    var _a;
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "REDIRECT");
                    const legalAcceptedField = (_a = context.formRef.getSnapshot().context.fields.get("legalAccepted")) == null ? void 0 : _a.checked;
                    return {
                        basePath: context.basePath,
                        flow: context.flow,
                        params: {
                            ...event.params,
                            legalAccepted: legalAcceptedField || void 0
                        },
                        parent: context.parent
                    };
                },
                onError: {
                    actions: "setFormErrors",
                    target: "Idle"
                }
            }
        },
        HandlingCallback: {
            description: "Handles the callback from the third-party provider",
            tags: [
                "state:callback",
                "state:loading"
            ],
            invoke: {
                id: "handleRedirectCallback",
                src: "handleRedirectCallback",
                input: ({ context })=>context.parent,
                onError: {
                    actions: [
                        "logError",
                        "setFormErrors"
                    ],
                    target: "Idle"
                }
            },
            on: {
                "CLERKJS.NAVIGATE.*": {
                    actions: "sendToNext",
                    target: "Idle"
                }
            }
        }
    }
});
// src/internals/machines/utils/next.ts
function shouldUseVirtualRouting() {
    if (typeof window === "undefined") {
        return false;
    }
    if (!window.next) {
        return false;
    }
    return window.next.version < NEXT_WINDOW_HISTORY_SUPPORT_VERSION;
}
;
var SignInResetPasswordMachineId = "SignInResetPasswordMachine";
var SignInResetPasswordMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        attempt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { fields, parent } })=>{
            var _a, _b;
            const password = ((_a = fields.get("password")) == null ? void 0 : _a.value) || "";
            const signOutOfOtherSessions = ((_b = fields.get("signOutOfOtherSessions")) == null ? void 0 : _b.checked) || false;
            return parent.getSnapshot().context.clerk.client.signIn.resetPassword({
                password,
                signOutOfOtherSessions
            });
        })
    },
    actions: {
        sendToLoading,
        sendToNext: ({ context, event })=>context.parent.send({
                type: "NEXT",
                resource: event.output
            }),
        setFormErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, ({ event })=>{
            assertActorEventError(event);
            return {
                type: "ERRORS.SET",
                error: event.error
            };
        })
    },
    types: {}
}).createMachine({
    id: SignInResetPasswordMachineId,
    context: ({ input })=>({
            loadingStep: "reset-password",
            parent: input.parent,
            formRef: input.formRef
        }),
    initial: "Pending",
    states: {
        Pending: {
            tags: [
                "state:pending"
            ],
            description: "Waiting for user input",
            on: {
                SUBMIT: {
                    target: "Attempting",
                    reenter: true
                }
            }
        },
        Attempting: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attempt",
                src: "attempt",
                input: ({ context })=>({
                        parent: context.parent,
                        fields: context.formRef.getSnapshot().context.fields
                    }),
                onDone: {
                    actions: [
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormErrors",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        }
    }
});
;
var DISABLEABLE_FIELDS = [
    "emailAddress",
    "phoneNumber"
];
var SignInStartMachineId = "SignInStart";
var SignInStartMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        attemptPasskey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { parent, flow } })=>{
            return parent.getSnapshot().context.clerk.client.signIn.authenticateWithPasskey({
                flow
            });
        }),
        attemptWeb3: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { parent, strategy } })=>{
            if (strategy === "web3_metamask_signature") {
                return parent.getSnapshot().context.clerk.client.signIn.authenticateWithMetamask();
            }
            if (strategy === "web3_coinbase_wallet_signature") {
                return parent.getSnapshot().context.clerk.client.signIn.authenticateWithCoinbaseWallet();
            }
            if (strategy === "web3_okx_wallet_signature") {
                return parent.getSnapshot().context.clerk.client.signIn.authenticateWithOKXWallet();
            }
            throw new ClerkElementsRuntimeError(`Unsupported Web3 strategy: ${strategy}`);
        }),
        attempt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { fields, parent, params } })=>{
            var _a;
            const clerk = parent.getSnapshot().context.clerk;
            const password = fields.get("password");
            const identifier = fields.get("identifier");
            const passwordParams = (password == null ? void 0 : password.value) ? {
                password: password.value,
                strategy: "password"
            } : {};
            return clerk.client.signIn.create({
                ...passwordParams,
                ...(params == null ? void 0 : params.ticket) ? params : {
                    identifier: (_a = identifier == null ? void 0 : identifier.value) != null ? _a : ""
                }
            });
        })
    },
    actions: {
        sendToNext: ({ context, event })=>{
            return context.parent.send({
                type: "NEXT",
                resource: event == null ? void 0 : event.output
            });
        },
        sendToLoading,
        setFormDisabledTicketFields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ context, enqueue })=>{
            if (!context.ticket) {
                return;
            }
            const currentFields = context.formRef.getSnapshot().context.fields;
            for (const name of DISABLEABLE_FIELDS){
                if (currentFields.has(name)) {
                    enqueue.sendTo(context.formRef, {
                        type: "FIELD.DISABLE",
                        field: {
                            name
                        }
                    });
                }
            }
        }),
        setFormErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, ({ event })=>{
            assertActorEventError(event);
            return {
                type: "ERRORS.SET",
                error: event.error
            };
        })
    },
    guards: {
        hasTicket: ({ context })=>Boolean(context.ticket),
        isExampleMode: ({ context })=>Boolean(context.parent.getSnapshot().context.exampleMode)
    },
    types: {}
}).createMachine({
    id: SignInStartMachineId,
    context: ({ input })=>({
            basePath: input.basePath || SIGN_IN_DEFAULT_BASE_PATH,
            parent: input.parent,
            formRef: input.formRef,
            loadingStep: "start",
            ticket: input.ticket
        }),
    initial: "Init",
    states: {
        Init: {
            description: "Handle ticket, if present; Else, default to Pending state.",
            always: [
                {
                    guard: "hasTicket",
                    target: "Attempting"
                },
                {
                    target: "Pending"
                }
            ]
        },
        Pending: {
            tags: [
                "state:pending"
            ],
            description: "Waiting for user input",
            on: {
                SUBMIT: {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "Attempting",
                    reenter: true
                },
                "AUTHENTICATE.PASSKEY": {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "AttemptingPasskey",
                    reenter: true
                },
                "AUTHENTICATE.PASSKEY.AUTOFILL": {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "AttemptingPasskeyAutoFill",
                    reenter: false
                },
                "AUTHENTICATE.WEB3": {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "AttemptingWeb3",
                    reenter: true
                }
            }
        },
        Attempting: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attempt",
                src: "attempt",
                input: ({ context })=>{
                    const defaultParams = {
                        fields: context.formRef.getSnapshot().context.fields,
                        parent: context.parent
                    };
                    const params = context.ticket ? {
                        strategy: "ticket",
                        ticket: context.ticket
                    } : {};
                    return {
                        ...defaultParams,
                        params
                    };
                },
                onDone: {
                    actions: [
                        "setFormDisabledTicketFields",
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormDisabledTicketFields",
                        "setFormErrors",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        },
        AttemptingPasskey: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attemptPasskey",
                src: "attemptPasskey",
                input: ({ context })=>({
                        parent: context.parent,
                        flow: "discoverable"
                    }),
                onDone: {
                    actions: [
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormErrors",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        },
        AttemptingPasskeyAutoFill: {
            on: {
                "AUTHENTICATE.PASSKEY": {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "AttemptingPasskey",
                    reenter: true
                },
                SUBMIT: {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "Attempting",
                    reenter: true
                }
            },
            invoke: {
                id: "attemptPasskeyAutofill",
                src: "attemptPasskey",
                input: ({ context })=>({
                        parent: context.parent,
                        flow: "autofill"
                    }),
                onDone: {
                    actions: [
                        "sendToNext"
                    ]
                },
                onError: {
                    actions: [
                        "setFormErrors"
                    ],
                    target: "Pending"
                }
            }
        },
        AttemptingWeb3: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attemptWeb3",
                src: "attemptWeb3",
                input: ({ context, event })=>{
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "AUTHENTICATE.WEB3");
                    return {
                        parent: context.parent,
                        strategy: event.strategy
                    };
                },
                onDone: {
                    actions: [
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormErrors",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        }
    }
});
// src/internals/machines/sign-in/router.machine.ts
var isCurrentPath = (path)=>({ context }, _params)=>{
        var _a, _b;
        return (_b = (_a = context.router) == null ? void 0 : _a.match(path)) != null ? _b : false;
    };
var needsStatus = (status)=>({ context, event }, _)=>{
        var _a, _b;
        return ((_a = event == null ? void 0 : event.resource) == null ? void 0 : _a.status) === status || ((_b = context.clerk) == null ? void 0 : _b.client.signIn.status) === status;
    };
var SignInRouterMachineId = "SignInRouter";
var SignInRouterMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        firstFactorMachine: SignInFirstFactorMachine,
        formMachine: FormMachine,
        resetPasswordMachine: SignInResetPasswordMachine,
        startMachine: SignInStartMachine,
        secondFactorMachine: SignInSecondFactorMachine,
        thirdPartyMachine: ThirdPartyMachine,
        webAuthnAutofillSupport: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$webauthn$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isWebAuthnAutofillSupported"])())
    },
    actions: {
        clearFormErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, {
            type: "ERRORS.CLEAR"
        }),
        navigateInternal: ({ context }, { path, force = false })=>{
            if (!context.router) {
                return;
            }
            if (!force && shouldUseVirtualRouting()) {
                return;
            }
            if (context.exampleMode) {
                return;
            }
            const resolvedPath = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["joinURL"])(context.router.basePath, path);
            if (resolvedPath === context.router.pathname()) {
                return;
            }
            context.router.shallowPush(resolvedPath);
        },
        navigateExternal: ({ context }, { path })=>{
            var _a;
            return (_a = context.router) == null ? void 0 : _a.push(path);
        },
        raiseNext: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__["raise"])({
            type: "NEXT"
        }),
        setActive: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ enqueue, check, context, event })=>{
            var _a;
            if (check("isExampleMode")) {
                return;
            }
            const id = event == null ? void 0 : event.id;
            const lastActiveSessionId = context.clerk.client.lastActiveSessionId;
            const createdSessionId = ((event == null ? void 0 : event.resource) || context.clerk.client.signIn).createdSessionId;
            const session = id || createdSessionId || lastActiveSessionId || null;
            void context.clerk.setActive({
                session,
                redirectUrl: context.clerk.buildAfterSignInUrl({
                    params: (_a = context.router) == null ? void 0 : _a.searchParams()
                })
            });
            enqueue.raise({
                type: "RESET"
            }, {
                delay: 2e3
            });
        }),
        setError: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            error: (_, { error })=>{
                if (error) {
                    return error;
                }
                return new ClerkElementsRuntimeError("Unknown error");
            }
        }),
        setFormErrors: ({ context }, params)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(context.formRef, {
                type: "ERRORS.SET",
                error: params.error
            }),
        setFormOAuthErrors: ({ context })=>{
            const errorOrig = context.clerk.client.signIn.firstFactorVerification.error;
            if (!errorOrig) {
                return;
            }
            let error;
            switch(errorOrig.code){
                case ERROR_CODES.NOT_ALLOWED_TO_SIGN_UP:
                case ERROR_CODES.OAUTH_ACCESS_DENIED:
                case ERROR_CODES.NOT_ALLOWED_ACCESS:
                case ERROR_CODES.SAML_USER_ATTRIBUTE_MISSING:
                case ERROR_CODES.OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML:
                case ERROR_CODES.USER_LOCKED:
                case ERROR_CODES.ENTERPRISE_SSO_USER_ATTRIBUTE_MISSING:
                case ERROR_CODES.ENTERPRISE_SSO_EMAIL_ADDRESS_DOMAIN_MISMATCH:
                case ERROR_CODES.ENTERPRISE_SSO_HOSTED_DOMAIN_MISMATCH:
                case ERROR_CODES.SAML_EMAIL_ADDRESS_DOMAIN_MISMATCH:
                case ERROR_CODES.ORGANIZATION_MEMBERSHIP_QUOTA_EXCEEDED_FOR_SSO:
                    error = new ClerkElementsError(errorOrig.code, errorOrig.longMessage || "");
                    break;
                default:
                    error = new ClerkElementsError("unable_to_complete", "Unable to complete action at this time. If the problem persists please contact support.");
            }
            context.formRef.send({
                type: "ERRORS.SET",
                error
            });
        },
        transfer: ({ context })=>{
            var _a;
            const searchParams = new URLSearchParams({
                __clerk_transfer: "1"
            });
            (_a = context.router) == null ? void 0 : _a.push(`${context.signUpPath}?${searchParams}`);
        }
    },
    guards: {
        hasAuthenticatedViaClerkJS: ({ context })=>Boolean(context.clerk.client.signIn.status === null && context.clerk.client.lastActiveSessionId),
        hasOAuthError: ({ context })=>{
            var _a, _b, _c, _d;
            return Boolean((_d = (_c = (_b = (_a = context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signIn) == null ? void 0 : _c.firstFactorVerification) == null ? void 0 : _d.error);
        },
        hasResource: ({ context })=>{
            var _a, _b, _c;
            return Boolean((_c = (_b = (_a = context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signIn) == null ? void 0 : _c.status);
        },
        hasTicket: ({ context })=>Boolean(context.ticket),
        isLoggedInAndSingleSession: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "isLoggedIn",
            "isSingleSessionMode",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode")
        ]),
        isActivePathRoot: isCurrentPath("/"),
        isComplete: ({ context, event })=>{
            const resource = event == null ? void 0 : event.resource;
            const signIn = context.clerk.client.signIn;
            return (resource == null ? void 0 : resource.status) === "complete" && Boolean(resource == null ? void 0 : resource.createdSessionId) || signIn.status === "complete" && Boolean(signIn.createdSessionId);
        },
        isLoggedIn: ({ context })=>{
            var _a;
            return Boolean((_a = context.clerk) == null ? void 0 : _a.user);
        },
        isSingleSessionMode: ({ context })=>{
            var _a, _b;
            return Boolean((_b = (_a = context.clerk) == null ? void 0 : _a.__unstable__environment) == null ? void 0 : _b.authConfig.singleSessionMode);
        },
        isExampleMode: ({ context })=>Boolean(context.exampleMode),
        needsStart: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("hasResource"),
            "statusNeedsIdentifier",
            isCurrentPath("/")
        ]),
        needsFirstFactor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "statusNeedsFirstFactor",
            isCurrentPath("/continue")
        ]),
        needsSecondFactor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "statusNeedsSecondFactor",
            isCurrentPath("/continue")
        ]),
        needsCallback: isCurrentPath(SSO_CALLBACK_PATH_ROUTE),
        needsChooseSession: isCurrentPath(CHOOSE_SESSION_PATH_ROUTE),
        needsNewPassword: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "statusNeedsNewPassword",
            isCurrentPath("/new-password")
        ]),
        statusNeedsIdentifier: needsStatus("needs_identifier"),
        statusNeedsFirstFactor: needsStatus("needs_first_factor"),
        statusNeedsSecondFactor: needsStatus("needs_second_factor"),
        statusNeedsNewPassword: needsStatus("needs_new_password")
    },
    types: {}
}).createMachine({
    id: SignInRouterMachineId,
    // @ts-expect-error - Set in INIT event
    context: {},
    initial: "Idle",
    on: {
        "AUTHENTICATE.OAUTH": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(ThirdPartyMachineId, ({ context, event })=>{
                var _a, _b, _c, _d;
                return {
                    type: "REDIRECT",
                    params: {
                        strategy: event.strategy,
                        redirectUrl: `${((_a = context.router) == null ? void 0 : _a.mode) === ROUTING.virtual ? (_b = context.clerk.__unstable__environment) == null ? void 0 : _b.displayConfig.signInUrl : (_c = context.router) == null ? void 0 : _c.basePath}${SSO_CALLBACK_PATH_ROUTE}`,
                        redirectUrlComplete: context.clerk.buildAfterSignInUrl({
                            params: (_d = context.router) == null ? void 0 : _d.searchParams()
                        })
                    }
                };
            })
        },
        "AUTHENTICATE.SAML": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(ThirdPartyMachineId, ({ context })=>{
                var _a, _b, _c, _d, _e;
                return {
                    type: "REDIRECT",
                    params: {
                        strategy: "saml",
                        identifier: (_a = context.formRef.getSnapshot().context.fields.get("identifier")) == null ? void 0 : _a.value,
                        redirectUrl: `${((_b = context.router) == null ? void 0 : _b.mode) === ROUTING.virtual ? (_c = context.clerk.__unstable__environment) == null ? void 0 : _c.displayConfig.signInUrl : (_d = context.router) == null ? void 0 : _d.basePath}${SSO_CALLBACK_PATH_ROUTE}`,
                        redirectUrlComplete: context.clerk.buildAfterSignInUrl({
                            params: (_e = context.router) == null ? void 0 : _e.searchParams()
                        })
                    }
                };
            })
        },
        "AUTHENTICATE.ENTERPRISE_SSO": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(ThirdPartyMachineId, ({ context })=>{
                var _a, _b, _c, _d, _e;
                return {
                    type: "REDIRECT",
                    params: {
                        strategy: "enterprise_sso",
                        identifier: (_a = context.formRef.getSnapshot().context.fields.get("identifier")) == null ? void 0 : _a.value,
                        redirectUrl: `${((_b = context.router) == null ? void 0 : _b.mode) === ROUTING.virtual ? (_c = context.clerk.__unstable__environment) == null ? void 0 : _c.displayConfig.signInUrl : (_d = context.router) == null ? void 0 : _d.basePath}${SSO_CALLBACK_PATH_ROUTE}`,
                        redirectUrlComplete: context.clerk.buildAfterSignInUrl({
                            params: (_e = context.router) == null ? void 0 : _e.searchParams()
                        })
                    }
                };
            })
        },
        "FORM.ATTACH": {
            description: "Attach/re-attach the form to the router.",
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ enqueue, event })=>{
                enqueue.assign({
                    formRef: event.formRef
                });
                enqueue.raise({
                    type: "RESET.STEP"
                });
            })
        },
        "NAVIGATE.PREVIOUS": ".Hist",
        "NAVIGATE.START": ".Start",
        LOADING: {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ event })=>({
                    loading: {
                        isLoading: event.isLoading,
                        step: event.step,
                        strategy: event.strategy,
                        action: event.action
                    }
                }))
        },
        RESET: ".Idle"
    },
    states: {
        Idle: {
            invoke: {
                id: "webAuthnAutofill",
                src: "webAuthnAutofillSupport",
                onDone: {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                        webAuthnAutofillSupport: ({ event })=>event.output
                    })
                }
            },
            on: {
                INIT: {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ event })=>{
                        var _a;
                        const searchParams = (_a = event.router) == null ? void 0 : _a.searchParams();
                        return {
                            clerk: event.clerk,
                            exampleMode: event.exampleMode || false,
                            formRef: event.formRef,
                            loading: {
                                isLoading: false
                            },
                            router: event.router,
                            signUpPath: event.signUpPath || SIGN_UP_DEFAULT_BASE_PATH,
                            ticket: (searchParams == null ? void 0 : searchParams.get(SEARCH_PARAMS.ticket)) || void 0
                        };
                    }),
                    target: "Init"
                }
            }
        },
        Init: {
            entry: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ context, enqueue, self })=>{
                var _a, _b;
                if (!self.getSnapshot().children[ThirdPartyMachineId]) {
                    enqueue.spawnChild("thirdPartyMachine", {
                        id: ThirdPartyMachineId,
                        systemId: ThirdPartyMachineId,
                        input: {
                            basePath: (_b = (_a = context.router) == null ? void 0 : _a.basePath) != null ? _b : SIGN_IN_DEFAULT_BASE_PATH,
                            flow: "signIn",
                            formRef: context.formRef,
                            parent: self
                        }
                    });
                }
            }),
            always: [
                {
                    guard: "needsCallback",
                    target: "Callback"
                },
                {
                    guard: "needsChooseSession",
                    target: "ChooseSession"
                },
                {
                    guard: "isComplete",
                    actions: "setActive"
                },
                {
                    guard: "isLoggedInAndSingleSession",
                    actions: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])("Already logged in"),
                        {
                            type: "navigateExternal",
                            params: ({ context })=>{
                                var _a;
                                return {
                                    path: context.clerk.buildAfterSignInUrl({
                                        params: (_a = context.router) == null ? void 0 : _a.searchParams()
                                    })
                                };
                            }
                        }
                    ]
                },
                {
                    guard: "needsStart",
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/"
                        }
                    },
                    target: "Start"
                },
                {
                    guard: "needsFirstFactor",
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/continue"
                        }
                    },
                    target: "FirstFactor"
                },
                {
                    guard: "needsSecondFactor",
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/continue"
                        }
                    },
                    target: "SecondFactor"
                },
                {
                    guard: "needsNewPassword",
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/reset-password"
                        }
                    },
                    target: "ResetPassword"
                },
                {
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/"
                        }
                    },
                    target: "Start"
                },
                {
                    guard: "hasTicket",
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/"
                        }
                    },
                    target: "Start"
                }
            ]
        },
        Start: {
            tags: [
                "step:start"
            ],
            exit: "clearFormErrors",
            invoke: {
                id: "start",
                src: "startMachine",
                input: ({ context, self })=>{
                    var _a;
                    return {
                        basePath: (_a = context.router) == null ? void 0 : _a.basePath,
                        formRef: context.formRef,
                        parent: self,
                        ticket: context.ticket
                    };
                },
                onDone: {
                    actions: "raiseNext"
                }
            },
            on: {
                "RESET.STEP": {
                    target: "Start",
                    reenter: true
                },
                "AUTHENTICATE.PASSKEY": {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("start", ({ event })=>event)
                },
                "AUTHENTICATE.PASSKEY.AUTOFILL": {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("start", ({ event })=>event)
                },
                "AUTHENTICATE.WEB3": {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("start", ({ event })=>event)
                },
                NEXT: [
                    {
                        guard: "isComplete",
                        actions: "setActive"
                    },
                    {
                        guard: "statusNeedsFirstFactor",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "FirstFactor"
                    },
                    {
                        guard: "statusNeedsSecondFactor",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "SecondFactor"
                    },
                    {
                        guard: "statusNeedsNewPassword",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/reset-password"
                            }
                        },
                        target: "ResetPassword"
                    }
                ]
            }
        },
        FirstFactor: {
            tags: [
                "step:first-factor",
                "step:verifications"
            ],
            invoke: {
                id: "firstFactor",
                src: "firstFactorMachine",
                input: ({ context, self })=>{
                    var _a;
                    return {
                        formRef: context.formRef,
                        parent: self,
                        basePath: (_a = context.router) == null ? void 0 : _a.basePath
                    };
                },
                onDone: {
                    actions: "raiseNext"
                }
            },
            on: {
                "AUTHENTICATE.PASSKEY": {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("firstFactor", ({ event })=>event)
                },
                "RESET.STEP": {
                    target: "FirstFactor",
                    reenter: true
                },
                NEXT: [
                    {
                        guard: "isComplete",
                        actions: "setActive"
                    },
                    {
                        guard: "statusNeedsSecondFactor",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "SecondFactor"
                    },
                    {
                        guard: "statusNeedsNewPassword",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/reset-password"
                            }
                        },
                        target: "ResetPassword"
                    }
                ],
                "STRATEGY.UPDATE": {
                    description: "Send event to verification machine to update the current strategy.",
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("firstFactor", ({ event })=>event),
                    target: ".Idle"
                }
            },
            initial: "Idle",
            states: {
                Idle: {
                    on: {
                        "NAVIGATE.FORGOT_PASSWORD": {
                            description: "Navigate to forgot password screen.",
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("firstFactor", ({ event })=>event),
                            target: "ForgotPassword"
                        },
                        "NAVIGATE.CHOOSE_STRATEGY": {
                            description: "Navigate to choose strategy screen.",
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("firstFactor", ({ event })=>event),
                            target: "ChoosingStrategy"
                        }
                    }
                },
                ChoosingStrategy: {
                    tags: [
                        "step:choose-strategy"
                    ],
                    on: {
                        "NAVIGATE.PREVIOUS": {
                            description: "Go to Idle, and also tell firstFactor to go to Pending",
                            target: "Idle",
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("firstFactor", {
                                type: "NAVIGATE.PREVIOUS"
                            })
                        }
                    }
                },
                ForgotPassword: {
                    tags: [
                        "step:forgot-password"
                    ],
                    on: {
                        "NAVIGATE.PREVIOUS": "Idle"
                    }
                }
            }
        },
        SecondFactor: {
            tags: [
                "step:second-factor",
                "step:verifications"
            ],
            invoke: {
                id: "secondFactor",
                src: "secondFactorMachine",
                input: ({ context, self })=>({
                        formRef: context.formRef,
                        parent: self
                    }),
                onDone: {
                    actions: "raiseNext"
                }
            },
            on: {
                "RESET.STEP": {
                    target: "SecondFactor",
                    reenter: true
                },
                NEXT: [
                    {
                        guard: "isComplete",
                        actions: "setActive"
                    },
                    {
                        guard: "statusNeedsNewPassword",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/reset-password"
                            }
                        },
                        target: "ResetPassword"
                    }
                ],
                "STRATEGY.UPDATE": {
                    description: "Send event to verification machine to update the current strategy.",
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("secondFactor", ({ event })=>event),
                    target: ".Idle"
                }
            },
            initial: "Idle",
            states: {
                Idle: {
                    on: {
                        "NAVIGATE.CHOOSE_STRATEGY": {
                            description: "Navigate to choose strategy screen.",
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("secondFactor", ({ event })=>event),
                            target: "ChoosingStrategy"
                        }
                    }
                },
                ChoosingStrategy: {
                    tags: [
                        "step:choose-strategy"
                    ],
                    on: {
                        "NAVIGATE.PREVIOUS": {
                            description: "Go to Idle, and also tell firstFactor to go to Pending",
                            target: "Idle",
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("secondFactor", {
                                type: "NAVIGATE.PREVIOUS"
                            })
                        }
                    }
                }
            }
        },
        ResetPassword: {
            tags: [
                "step:reset-password"
            ],
            invoke: {
                id: "resetPassword",
                src: "resetPasswordMachine",
                input: ({ context, self })=>({
                        formRef: context.formRef,
                        parent: self
                    }),
                onDone: {
                    actions: "raiseNext"
                }
            },
            on: {
                "RESET.STEP": {
                    target: "ResetPassword",
                    reenter: true
                },
                NEXT: [
                    {
                        guard: "isComplete",
                        actions: "setActive"
                    },
                    {
                        guard: "statusNeedsFirstFactor",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "FirstFactor"
                    },
                    {
                        guard: "statusNeedsSecondFactor",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "SecondFactor"
                    }
                ]
            }
        },
        Callback: {
            tags: [
                "step:callback"
            ],
            entry: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(ThirdPartyMachineId, {
                type: "CALLBACK"
            }),
            on: {
                NEXT: [
                    {
                        guard: "hasOAuthError",
                        actions: [
                            "setFormOAuthErrors",
                            {
                                type: "navigateInternal",
                                params: {
                                    force: true,
                                    path: "/"
                                }
                            }
                        ],
                        target: "Start"
                    },
                    {
                        guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
                            "isLoggedIn",
                            "isComplete",
                            "hasAuthenticatedViaClerkJS"
                        ]),
                        actions: "setActive"
                    },
                    {
                        guard: "statusNeedsIdentifier",
                        actions: "transfer"
                    },
                    {
                        guard: "statusNeedsFirstFactor",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "FirstFactor"
                    },
                    {
                        guard: "statusNeedsSecondFactor",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "SecondFactor"
                    },
                    {
                        guard: "statusNeedsNewPassword",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/reset-password"
                            }
                        },
                        target: "ResetPassword"
                    }
                ]
            }
        },
        ChooseSession: {
            tags: [
                "step:choose-session"
            ],
            on: {
                "SESSION.SET_ACTIVE": {
                    actions: {
                        type: "setActive",
                        params: ({ event })=>({
                                id: event.id
                            })
                    }
                }
            }
        },
        Error: {
            tags: [
                "step:error"
            ],
            on: {
                NEXT: {
                    target: "Start",
                    actions: "clearFormErrors"
                }
            }
        },
        Hist: {
            type: "history",
            exit: "clearFormErrors"
        }
    }
});
;
function formatName(...args) {
    switch(args.length){
        case 0:
            return void 0;
        case 1:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["titleize"])(args[0]);
        default:
            return args.filter(Boolean).map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["titleize"]).join(" ");
    }
}
function formatSalutation({ firstName, lastName, identifier }) {
    return firstName && formatName(firstName) || lastName && formatName(lastName) || identifier || "";
}
// src/internals/machines/sign-in/router.selectors.ts
function SignInSafeIdentifierSelectorForStrategy(strategy) {
    return (s)=>{
        var _a, _b, _c;
        const signIn = (_a = s.context.clerk) == null ? void 0 : _a.client.signIn;
        if (strategy) {
            const matchingFactors = [
                ...(_b = signIn.supportedFirstFactors) != null ? _b : [],
                ...(_c = signIn.supportedSecondFactors) != null ? _c : []
            ].filter((f)=>f.strategy === strategy);
            const matchingFactorForIdentifier = signIn.identifier && matchingFactors.length > 0 ? matchingFactors.find((f)=>"safeIdentifier" in f && f.safeIdentifier === signIn.identifier) : null;
            const matchingFactorForStrategy = matchingFactors[0];
            if (matchingFactorForIdentifier && "safeIdentifier" in matchingFactorForIdentifier) {
                return matchingFactorForIdentifier.safeIdentifier;
            }
            if (matchingFactorForStrategy && "safeIdentifier" in matchingFactorForStrategy) {
                return matchingFactorForStrategy.safeIdentifier;
            }
        }
        return signIn.identifier || "";
    };
}
function SignInSalutationSelector(s) {
    var _a, _b, _c;
    const signIn = (_a = s.context.clerk) == null ? void 0 : _a.client.signIn;
    return formatSalutation({
        firstName: (_b = signIn == null ? void 0 : signIn.userData) == null ? void 0 : _b.firstName,
        identifier: signIn == null ? void 0 : signIn.identifier,
        lastName: (_c = signIn == null ? void 0 : signIn.userData) == null ? void 0 : _c.lastName
    });
}
// src/internals/machines/sign-in/router.types.ts
var SignInRouterSystemId = {
    start: "start",
    firstFactor: "firstFactor",
    secondFactor: "secondFactor",
    resetPassword: "resetPassword"
};
;
var SignInChooseStrategyCtx = createContextForDomValidation("SignInChooseStrategyCtx");
function SignInChooseStrategy({ asChild, children, ...props }) {
    const routerRef = SignInRouterCtx.useActorRef();
    const activeStateFirstFactor = useActiveTags(routerRef, [
        "step:verifications",
        "step:first-factor",
        "step:choose-strategy"
    ], ActiveTagsMode.all);
    const activeStateSecondFactor = useActiveTags(routerRef, [
        "step:verifications",
        "step:second-factor",
        "step:choose-strategy"
    ], ActiveTagsMode.all);
    const activeState = activeStateFirstFactor || activeStateSecondFactor;
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "div";
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInChooseStrategyCtx.Provider, {
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
            ...props,
            children
        })
    }) : null;
}
function SignInForgotPassword({ asChild, children, ...props }) {
    const routerRef = SignInRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, [
        "step:verifications",
        "step:first-factor",
        "step:forgot-password"
    ], ActiveTagsMode.all);
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "div";
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInChooseStrategyCtx.Provider, {
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
            ...props,
            children
        })
    }) : null;
}
var SUPPORTED_STRATEGY_NAME = "SignInSupportedStrategy";
var SignInSupportedStrategy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(({ asChild, children, name, ...rest }, forwardedRef)=>{
    const routerRef = SignInRouterCtx.useActorRef();
    const snapshot = routerRef.getSnapshot();
    const status = snapshot.context.clerk.client.signIn.status;
    const supportedFirstFactors = status === "needs_first_factor" ? snapshot.context.clerk.client.signIn.supportedFirstFactors || [] : [];
    const supportedSecondFactors = status === "needs_second_factor" ? snapshot.context.clerk.client.signIn.supportedSecondFactors || [] : [];
    const factor = [
        ...supportedFirstFactors,
        ...supportedSecondFactors
    ].find((factor2)=>name === factor2.strategy);
    const currentFactor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(snapshot.children[SignInRouterSystemId.firstFactor] || snapshot.children[SignInRouterSystemId.secondFactor], {
        "SignInSupportedStrategy.useSelector3[currentFactor]": (state)=>{
            var _a;
            return (_a = state == null ? void 0 : state.context.currentFactor) == null ? void 0 : _a.strategy;
        }
    }["SignInSupportedStrategy.useSelector3[currentFactor]"]);
    const sendUpdateStrategyEvent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "SignInSupportedStrategy.useCallback[sendUpdateStrategyEvent]": ()=>routerRef.send({
                type: "STRATEGY.UPDATE",
                factor
            })
    }["SignInSupportedStrategy.useCallback[sendUpdateStrategyEvent]"], [
        routerRef,
        factor
    ]);
    if (currentFactor === name) {
        return null;
    }
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "button";
    const defaultProps = asChild ? {} : {
        type: "button"
    };
    return factor ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInStrategyContext.Provider, {
        value: {
            strategy: name
        },
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
            ...defaultProps,
            ...rest,
            ref: forwardedRef,
            onClick: sendUpdateStrategyEvent,
            children: children || factor.strategy
        })
    }) : null;
});
SignInSupportedStrategy.displayName = SUPPORTED_STRATEGY_NAME;
;
var SignInResetPasswordCtx = createContextFromActorRef("SignInResetPasswordCtx");
function SignInResetPassword(props) {
    const routerRef = SignInRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, "step:reset-password");
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInResetPasswordInner, {
        ...props
    }) : null;
}
function SignInResetPasswordInner(props) {
    const ref = useSignInResetPasswordStep();
    if (!ref) {
        return null;
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInResetPasswordCtx.Provider, {
        actorRef: ref,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Form, {
            flowActor: ref,
            ...props
        })
    });
}
// src/react/sign-in/sso-callback.tsx
function SignInSSOCallback({ children }) {
    const routerRef = SignInRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, "step:callback");
    return activeState ? children : null;
}
;
var SignInStartCtx = createContextFromActorRef("SignInStartCtx");
function SignInStart(props) {
    const routerRef = SignInRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, "step:start");
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInStartInner, {
        ...props
    }) : null;
}
function SignInStartInner(props) {
    const ref = useSignInStartStep();
    if (!ref) {
        return null;
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInStartCtx.Provider, {
        actorRef: ref,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Form, {
            flowActor: ref,
            ...props
        })
    });
}
;
;
// src/internals/machines/utils/strategies.ts
var matchStrategy = (current, desired)=>{
    if (!current || !desired) {
        return false;
    }
    if (current === desired) {
        return true;
    }
    return current.startsWith(`${desired}_`);
};
;
var SignInFirstFactorCtx = createContextFromActorRef("SignInFirstFactorCtx");
var SignInSecondFactorCtx = createContextFromActorRef("SignInSecondFactorCtx");
var strategiesSelector = (state)=>{
    var _a;
    return (_a = state.context.currentFactor) == null ? void 0 : _a.strategy;
};
function SignInStrategiesProvider({ children, preferred, actorRef, ...props }) {
    const routerRef = SignInRouterCtx.useActorRef();
    const current = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(actorRef, strategiesSelector);
    const isChoosingAltStrategy = useActiveTags(routerRef, [
        "step:choose-strategy",
        "step:forgot-password"
    ]);
    const isActive = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "SignInStrategiesProvider.useCallback6[isActive]": (name)=>current ? matchStrategy(current, name) : false
    }["SignInStrategiesProvider.useCallback6[isActive]"], [
        current
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(StrategiesContext.Provider, {
        value: {
            current,
            preferred,
            isActive
        },
        children: isChoosingAltStrategy.active ? null : /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Form, {
            flowActor: actorRef,
            ...props,
            children
        })
    });
}
function useFactorCtx() {
    const firstFactorRef = SignInFirstFactorCtx.useActorRef(true);
    const secondFactorRef = SignInSecondFactorCtx.useActorRef(true);
    return firstFactorRef || secondFactorRef;
}
function SignInStrategy({ children, name }) {
    const { active } = useStrategy(name);
    const factorCtx = useFactorCtx();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "SignInStrategy.useEffect5": ()=>{
            if (factorCtx) {
                factorCtx.send({
                    type: "STRATEGY.REGISTER",
                    factor: name
                });
            }
            return ({
                "SignInStrategy.useEffect5": ()=>{
                    if ((factorCtx == null ? void 0 : factorCtx.getSnapshot().status) === "active") {
                        factorCtx.send({
                            type: "STRATEGY.UNREGISTER",
                            factor: name
                        });
                    }
                }
            })["SignInStrategy.useEffect5"];
        }
    }["SignInStrategy.useEffect5"], [
        factorCtx,
        name
    ]);
    return active ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInStrategyContext.Provider, {
        value: {
            strategy: name
        },
        children
    }) : null;
}
function SignInVerifications(props) {
    const routerRef = SignInRouterCtx.useActorRef();
    const { activeTags: activeRoutes } = useActiveTags(routerRef, [
        "step:first-factor",
        "step:second-factor"
    ]);
    if (activeRoutes.has("step:first-factor")) {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInFirstFactorInner, {
            ...props
        });
    }
    if (activeRoutes.has("step:second-factor")) {
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInSecondFactorInner, {
            ...props
        });
    }
    return null;
}
function SignInFirstFactor(props) {
    const routerRef = SignInRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, "step:first-factor");
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInFirstFactorInner, {
        ...props
    }) : null;
}
function SignInSecondFactor(props) {
    const routerRef = SignInRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, "step:second-factor");
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInSecondFactorInner, {
        ...props
    }) : null;
}
function SignInFirstFactorInner(props) {
    const ref = useSignInFirstFactorStep();
    if (!ref) {
        return null;
    }
    return ref ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInFirstFactorCtx.Provider, {
        actorRef: ref,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInStrategiesProvider, {
            actorRef: ref,
            ...props
        })
    }) : null;
}
function SignInSecondFactorInner(props) {
    const ref = useSignInSecondFactorStep();
    if (!ref) {
        return null;
    }
    return ref ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInSecondFactorCtx.Provider, {
        actorRef: ref,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInStrategiesProvider, {
            actorRef: ref,
            ...props
        })
    }) : null;
}
;
var SIGN_IN_STEPS = {
    start: "start",
    verifications: "verifications",
    "choose-strategy": "choose-strategy",
    "choose-session": "choose-session",
    "forgot-password": "forgot-password",
    "reset-password": "reset-password",
    "sso-callback": "sso-callback"
};
function SignInStep(props) {
    var _a;
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    (_a = clerk.telemetry) == null ? void 0 : _a.record((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$WR6SRQOL$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eventComponentMounted"])("Elements_SignInStep", {
        name: props.name
    }));
    switch(props.name){
        case SIGN_IN_STEPS.start:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInStart, {
                ...props
            });
        case SIGN_IN_STEPS.verifications:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInVerifications, {
                ...props
            });
        case SIGN_IN_STEPS["choose-strategy"]:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInChooseStrategy, {
                ...props
            });
        case SIGN_IN_STEPS["forgot-password"]:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInForgotPassword, {
                ...props
            });
        case SIGN_IN_STEPS["reset-password"]:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInResetPassword, {
                ...props
            });
        case SIGN_IN_STEPS["choose-session"]:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInChooseSession, {
                ...props
            });
        case SIGN_IN_STEPS["sso-callback"]:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInSSOCallback, {
                ...props
            });
        default:
            throw new ClerkElementsRuntimeError(`Invalid step name. Use: ${Object.keys(SIGN_IN_STEPS).join(",")}.`);
    }
}
;
;
;
var SignUpContinueCtx = createContextFromActorRef("SignUpContinueCtx");
function SignUpContinue(props) {
    const routerRef = SignUpRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, "step:continue");
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpContinueInner, {
        ...props
    }) : null;
}
function SignUpContinueInner(props) {
    const ref = useSignUpContinueStep();
    if (!ref) {
        return null;
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpContinueCtx.Provider, {
        actorRef: ref,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Form, {
            flowActor: ref,
            ...props
        })
    });
}
;
function SignUpRestricted(props) {
    const routerRef = SignUpRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, "step:restricted");
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Form, {
        flowActor: routerRef,
        ...props
    }) : null;
}
;
var SignUpStartCtx = createContextFromActorRef("SignUpStartCtx");
function SignUpStart(props) {
    const routerRef = SignUpRouterCtx.useActorRef();
    const activeState = useActiveTags(routerRef, "step:start");
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpStartInner, {
        ...props
    }) : null;
}
function SignUpStartInner(props) {
    const ref = useSignUpStartStep();
    if (!ref) {
        return null;
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpStartCtx.Provider, {
        actorRef: ref,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Form, {
            flowActor: ref,
            ...props
        })
    });
}
;
var SignUpVerificationCtx = createContextFromActorRef("SignUpVerificationCtx");
function SignUpVerifications(props) {
    const ref = SignUpRouterCtx.useActorRef();
    const activeState = useActiveTags(ref, "step:verification");
    return activeState ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpVerifyInner, {
        ...props
    }) : null;
}
function SignUpVerifyInner(props) {
    const ref = useSignUpVerificationStep();
    if (!ref) {
        return null;
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpVerificationCtx.Provider, {
        actorRef: ref,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Form, {
            flowActor: ref,
            ...props
        })
    });
}
function SignUpStrategy({ children, name: tag }) {
    const ref = SignUpVerificationCtx.useActorRef(true);
    if (!ref) {
        throw new Error('<Strategy> used outside of <SignUp>. Did you mean to `import { Strategy } from "@clerk/elements/sign-in"` instead?');
    }
    const { active } = useActiveTags(ref, [
        `verification:${tag}`,
        `verification:category:${tag}`
    ]);
    return active ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Fragment"], {
        children
    }) : null;
}
;
var SIGN_UP_STEPS = {
    start: "start",
    continue: "continue",
    verifications: "verifications",
    restricted: "restricted"
};
function SignUpStep(props) {
    var _a;
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    (_a = clerk.telemetry) == null ? void 0 : _a.record((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$WR6SRQOL$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eventComponentMounted"])("Elements_SignUpStep", {
        name: props.name
    }));
    switch(props.name){
        case SIGN_UP_STEPS.start:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpStart, {
                ...props
            });
        case SIGN_UP_STEPS.continue:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpContinue, {
                ...props
            });
        case SIGN_UP_STEPS.verifications:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpVerifications, {
                ...props
            });
        case SIGN_UP_STEPS.restricted:
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpRestricted, {
                ...props
            });
        default:
            throw new ClerkElementsRuntimeError(`Invalid step name. Use 'start', 'continue', 'verifications', or 'restricted'.`);
    }
}
// src/react/utils/map-scope-to-strategy.ts
function isProviderStrategyScope(value) {
    return value.startsWith("provider:");
}
function mapScopeToStrategy(scope) {
    if (scope === "provider:metamask") {
        return "web3_metamask_signature";
    }
    if (scope === "provider:coinbase_wallet") {
        return "web3_coinbase_wallet_signature";
    }
    if (scope === "provider:okx_wallet") {
        return "web3_okx_wallet_signature";
    }
    if (scope === "provider:saml") {
        return "saml";
    }
    if (scope === "provider:enterprise_sso") {
        return "enterprise_sso";
    }
    const scopeWithoutPrefix = scope.replace("provider:", "");
    return `oauth_${scopeWithoutPrefix}`;
}
;
function isSignInScope(scope) {
    if (!scope) {
        return true;
    }
    if (scope.startsWith("step:")) {
        return Object.prototype.hasOwnProperty.call(SIGN_IN_STEPS, scope.replace("step:", ""));
    }
    return true;
}
function isSignUpScope(scope) {
    if (!scope) {
        return true;
    }
    if (scope.startsWith("step:")) {
        return Object.prototype.hasOwnProperty.call(SIGN_UP_STEPS, scope.replace("step:", ""));
    }
    return true;
}
function Loading({ children, scope }) {
    var _a;
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    (_a = clerk.telemetry) == null ? void 0 : _a.record((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$WR6SRQOL$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eventComponentMounted"])("Elements_Loading", {
        scope: scope != null ? scope : false
    }));
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    const signUpRouterRef = SignUpRouterCtx.useActorRef(true);
    if (!signInRouterRef && !signUpRouterRef) {
        throw new ClerkElementsRuntimeError(`<Loading> must be used within a <SignIn> or <SignUp> component.`);
    }
    if (signInRouterRef) {
        if (isSignInScope(scope)) {
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignInLoading, {
                scope,
                routerRef: signInRouterRef,
                children
            });
        } else {
            throw new ClerkElementsRuntimeError(`Invalid scope "${scope}" used for <Loading> inside <SignIn>.`);
        }
    }
    if (signUpRouterRef) {
        if (isSignUpScope(scope)) {
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpLoading, {
                scope,
                routerRef: signUpRouterRef,
                children
            });
        } else {
            throw new ClerkElementsRuntimeError(`Invalid scope "${scope}" used for <Loading> inside <SignUp>.`);
        }
    }
    throw new ClerkElementsRuntimeError("Invalid state for <Loading>. Please open an issue.");
}
function SignInLoading({ children, scope, routerRef }) {
    const [isLoading, { step: loadingStep, strategy, action }] = useLoading(routerRef);
    const tags = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(routerRef, {
        "SignInLoading.useSelector5[tags]": (s)=>s.tags
    }["SignInLoading.useSelector5[tags]"]);
    const isStepLoading = (step)=>isLoading && loadingStep === step;
    const isInferredStepLoading = (step)=>tags.has(`step:${step}`) && isStepLoading(step);
    let loadingResult = false;
    if (scope === "global") {
        loadingResult = isLoading;
    } else if (scope && isProviderStrategyScope(scope)) {
        loadingResult = isLoading && loadingStep === void 0 && strategy === mapScopeToStrategy(scope);
    } else if (scope) {
        loadingResult = isStepLoading(scope.replace("step:", "")) || scope === action;
    } else {
        loadingResult = isInferredStepLoading("start") || isInferredStepLoading("verifications") || isInferredStepLoading("choose-strategy") || isInferredStepLoading("forgot-password") || isInferredStepLoading("reset-password");
    }
    return children(loadingResult);
}
function SignUpLoading({ children, scope, routerRef }) {
    const [isLoading, { step: loadingStep, strategy, action }] = useLoading(routerRef);
    const tags = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(routerRef, {
        "SignUpLoading.useSelector5[tags]": (s)=>s.tags
    }["SignUpLoading.useSelector5[tags]"]);
    const isStepLoading = (step)=>isLoading && loadingStep === step;
    const isInferredStepLoading = (step)=>tags.has(`step:${step}`) && isStepLoading(step);
    let loadingResult = false;
    if (scope === "global") {
        loadingResult = isLoading;
    } else if (scope && isProviderStrategyScope(scope)) {
        loadingResult = isLoading && loadingStep === void 0 && strategy === mapScopeToStrategy(scope);
    } else if (scope) {
        loadingResult = isStepLoading(scope.replace("step:", "")) || scope === action;
    } else {
        loadingResult = isInferredStepLoading("start") || isInferredStepLoading("continue") || isInferredStepLoading("verifications");
    }
    return children(loadingResult);
}
;
;
;
var paths = {
    "sign-in": "signInUrl",
    "sign-up": "signUpUrl"
};
function Link({ navigate, children, ...rest }) {
    const router = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$router$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerkRouter"])();
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    const destinationUrl = router.makeDestinationUrlWithPreservedQueryParameters(// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    clerk.__internal_getOption(paths[navigate]));
    if (typeof children === "function") {
        return children({
            url: destinationUrl
        });
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])("a", {
        onClick: (e)=>{
            if (router) {
                e.preventDefault();
                router.push(destinationUrl);
            }
        },
        href: destinationUrl,
        ...rest,
        children
    });
}
;
 //# sourceMappingURL=chunk-VY37G23G.mjs.map
}}),
"[project]/node_modules/@clerk/elements/dist/chunk-QSYHOU7X.mjs [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "useNextRouter": (()=>useNextRouter),
    "useVirtualRouter": (()=>useVirtualRouter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/elements/dist/chunk-VY37G23G.mjs [app-client] (ecmascript)");
// src/react/router/virtual.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
// src/react/router/next.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/navigation.js [app-client] (ecmascript)");
// src/react/utils/path-inference/next.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$compat$2f$router$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/compat/router.js [app-client] (ecmascript)");
// src/react/router/index.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$router$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/router.mjs [app-client] (ecmascript)");
;
;
var DUMMY_ORIGIN = "https://clerk.dummy";
var _url, _listeners;
var VirtualRouter = class {
    constructor(path){
        this.name = "VirtualRouter";
        this.mode = "virtual";
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateAdd"])(this, _url);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateAdd"])(this, _listeners, /* @__PURE__ */ new Set());
        const origin = typeof window === "undefined" ? DUMMY_ORIGIN : window.location.origin;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateSet"])(this, _url, new URL(path != null ? path : "/", origin));
    }
    push(path) {
        const newUrl = new URL((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateGet"])(this, _url).toString());
        newUrl.pathname = path;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateSet"])(this, _url, newUrl);
        this.emit();
    }
    replace(path) {
        this.push(path);
    }
    shallowPush(path) {
        this.push(path);
    }
    pathname() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateGet"])(this, _url).pathname;
    }
    searchParams() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateGet"])(this, _url).searchParams;
    }
    subscribe(listener) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateGet"])(this, _listeners).add(listener);
        return ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateGet"])(this, _listeners).delete(listener);
    }
    emit() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateGet"])(this, _listeners).forEach((listener)=>listener((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateGet"])(this, _url)));
    }
    getSnapshot() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__privateGet"])(this, _url);
    }
};
_url = new WeakMap();
_listeners = new WeakMap();
var virtualRouter = new VirtualRouter("/");
var useVirtualRouter = ()=>{
    const url = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSyncExternalStore"])(virtualRouter.subscribe.bind(virtualRouter), virtualRouter.getSnapshot.bind(virtualRouter));
    return {
        mode: virtualRouter.mode,
        name: virtualRouter.name,
        pathname: ()=>url.pathname,
        push: virtualRouter.push.bind(virtualRouter),
        replace: virtualRouter.replace.bind(virtualRouter),
        searchParams: ()=>url.searchParams,
        shallowPush: virtualRouter.shallowPush.bind(virtualRouter)
    };
};
;
;
;
;
// src/react/utils/path-inference/utils.ts
function removeOptionalCatchAllSegment(pathname) {
    return pathname.replace(/\/\[\[\.\.\..*/, "");
}
// src/react/utils/path-inference/next.tsx
var usePathnameWithoutCatchAll = ()=>{
    const pathRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useRef();
    const pagesRouter = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$compat$2f$router$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRouter"])();
    if (pagesRouter) {
        if (pathRef.current) {
            return pathRef.current;
        } else {
            pathRef.current = removeOptionalCatchAllSegment(pagesRouter.pathname);
            return pathRef.current;
        }
    }
    const pathname = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["usePathname"])() || "";
    const pathParts = pathname.split("/").filter(Boolean);
    const catchAllParams = Object.values((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useParams"])() || {}).filter((v)=>Array.isArray(v)).flat(Infinity);
    if (pathRef.current) {
        return pathRef.current;
    } else {
        pathRef.current = `/${pathParts.slice(0, pathParts.length - catchAllParams.length).join("/")}`;
        return pathRef.current;
    }
};
// src/react/router/next.ts
var useNextRouter = ()=>{
    const router = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRouter"])();
    const pathname = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["usePathname"])();
    const searchParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSearchParams"])();
    const inferredBasePath = usePathnameWithoutCatchAll();
    const canUseWindowHistoryAPIs = typeof window !== "undefined" && window.next && window.next.version >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NEXT_WINDOW_HISTORY_SUPPORT_VERSION"];
    return {
        mode: "path",
        name: "NextRouter",
        push: (path)=>router.push(path),
        replace: (path)=>canUseWindowHistoryAPIs ? window.history.replaceState(null, "", path) : router.replace(path),
        shallowPush: (path)=>canUseWindowHistoryAPIs ? window.history.pushState(null, "", path) : router.push(path, {}),
        pathname: ()=>pathname,
        searchParams: ()=>searchParams,
        inferredBasePath: ()=>inferredBasePath
    };
};
;
;
 //# sourceMappingURL=chunk-QSYHOU7X.mjs.map
}}),
"[project]/node_modules/@clerk/shared/dist/chunk-ZHPWRK4R.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWorkerTimers": (()=>createWorkerTimers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7FNX7RWY.mjs [app-client] (ecmascript)");
;
// src/workerTimers/workerTimers.worker.ts
var workerTimers_worker_default = 'const respond=r=>{self.postMessage(r)},workerToTabIds={};self.addEventListener("message",r=>{const e=r.data;switch(e.type){case"setTimeout":workerToTabIds[e.id]=setTimeout(()=>{respond({id:e.id}),delete workerToTabIds[e.id]},e.ms);break;case"clearTimeout":workerToTabIds[e.id]&&(clearTimeout(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break;case"setInterval":workerToTabIds[e.id]=setInterval(()=>{respond({id:e.id})},e.ms);break;case"clearInterval":workerToTabIds[e.id]&&(clearInterval(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break}});\n';
// src/workerTimers/createWorkerTimers.ts
var createWebWorker = (source, opts = {})=>{
    if (typeof Worker === "undefined") {
        return null;
    }
    try {
        const blob = new Blob([
            source
        ], {
            type: "application/javascript; charset=utf-8"
        });
        const workerScript = globalThis.URL.createObjectURL(blob);
        return new Worker(workerScript, opts);
    } catch  {
        console.warn("Clerk: Cannot create worker from blob. Consider adding worker-src blob:; to your CSP");
        return null;
    }
};
var fallbackTimers = ()=>{
    const setTimeout = globalThis.setTimeout.bind(globalThis);
    const setInterval = globalThis.setInterval.bind(globalThis);
    const clearTimeout = globalThis.clearTimeout.bind(globalThis);
    const clearInterval = globalThis.clearInterval.bind(globalThis);
    return {
        setTimeout,
        setInterval,
        clearTimeout,
        clearInterval,
        cleanup: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["noop"]
    };
};
var createWorkerTimers = ()=>{
    let id = 0;
    const generateId = ()=>id++;
    const callbacks = /* @__PURE__ */ new Map();
    const post = (w, p)=>w?.postMessage(p);
    const handleMessage = (e)=>{
        callbacks.get(e.data.id)?.();
    };
    let worker = createWebWorker(workerTimers_worker_default, {
        name: "clerk-timers"
    });
    worker?.addEventListener("message", handleMessage);
    if (!worker) {
        return fallbackTimers();
    }
    const init = ()=>{
        if (!worker) {
            worker = createWebWorker(workerTimers_worker_default, {
                name: "clerk-timers"
            });
            worker?.addEventListener("message", handleMessage);
        }
    };
    const cleanup = ()=>{
        if (worker) {
            worker.terminate();
            worker = null;
            callbacks.clear();
        }
    };
    const setTimeout = (cb, ms)=>{
        init();
        const id2 = generateId();
        callbacks.set(id2, ()=>{
            cb();
            callbacks.delete(id2);
        });
        post(worker, {
            type: "setTimeout",
            id: id2,
            ms
        });
        return id2;
    };
    const setInterval = (cb, ms)=>{
        init();
        const id2 = generateId();
        callbacks.set(id2, cb);
        post(worker, {
            type: "setInterval",
            id: id2,
            ms
        });
        return id2;
    };
    const clearTimeout = (id2)=>{
        init();
        callbacks.delete(id2);
        post(worker, {
            type: "clearTimeout",
            id: id2
        });
    };
    const clearInterval = (id2)=>{
        init();
        callbacks.delete(id2);
        post(worker, {
            type: "clearInterval",
            id: id2
        });
    };
    return {
        setTimeout,
        setInterval,
        clearTimeout,
        clearInterval,
        cleanup
    };
};
;
 //# sourceMappingURL=chunk-ZHPWRK4R.mjs.map
}}),
"[project]/node_modules/@clerk/shared/dist/chunk-JY46X3OC.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Poller": (()=>Poller)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$ZHPWRK4R$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-ZHPWRK4R.mjs [app-client] (ecmascript)");
;
// src/poller.ts
function Poller({ delayInMs } = {
    delayInMs: 1e3
}) {
    const workerTimers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$ZHPWRK4R$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createWorkerTimers"])();
    let timerId;
    let stopped = false;
    const stop = ()=>{
        if (timerId) {
            workerTimers.clearTimeout(timerId);
            workerTimers.cleanup();
        }
        stopped = true;
    };
    const run = async (cb)=>{
        stopped = false;
        await cb(stop);
        if (stopped) {
            return;
        }
        timerId = workerTimers.setTimeout(()=>{
            void run(cb);
        }, delayInMs);
    };
    return {
        run,
        stop
    };
}
;
 //# sourceMappingURL=chunk-JY46X3OC.mjs.map
}}),
"[project]/node_modules/@clerk/shared/dist/poller.mjs [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$JY46X3OC$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-JY46X3OC.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$ZHPWRK4R$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-ZHPWRK4R.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7FNX7RWY.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
;
;
;
;
;
 //# sourceMappingURL=poller.mjs.map
}}),
"[project]/node_modules/@clerk/shared/dist/poller.mjs [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$JY46X3OC$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-JY46X3OC.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$ZHPWRK4R$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-ZHPWRK4R.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7FNX7RWY$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7FNX7RWY.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$7ELT755Q$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$poller$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/poller.mjs [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export s as sendParent>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sendParent": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/@clerk/elements/dist/react/sign-up/index.mjs [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Action": (()=>SignUpAction),
    "Captcha": (()=>SignUpCaptcha),
    "Root": (()=>SignUpRoot),
    "SignUp": (()=>SignUpRoot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$router$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/router.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$QSYHOU7X$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/elements/dist/chunk-QSYHOU7X.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/elements/dist/chunk-VY37G23G.mjs [app-client] (ecmascript)");
// src/react/sign-up/index.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$client$2d$only$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/client-only/index.js [app-client] (ecmascript)");
// src/react/sign-up/root.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/react/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$telemetry$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/telemetry.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$WR6SRQOL$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-WR6SRQOL.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@xstate/react/dist/xstate-react.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__c__as__createActor$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export c as createActor>");
// src/internals/machines/sign-up/continue.machine.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$underscore$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/underscore.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-GGFRMWFO.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/actors/dist/xstate-actors.development.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export n as not>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export o as or>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/xstate.development.esm.js [app-client] (ecmascript) <locals>");
// src/internals/machines/sign-up/router.machine.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$url$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/url.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-IFTVZ2LQ.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export a as and>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/assign-6313ccb3.development.esm.js [app-client] (ecmascript) <export a as assign>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export a as enqueueActions>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export l as log>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-78b8dcb8.development.esm.js [app-client] (ecmascript) <export r as raise>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export b as sendTo>");
// src/internals/machines/sign-up/verification.machine.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$poller$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/poller.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$JY46X3OC$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/shared/dist/chunk-JY46X3OC.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__s__as__sendParent$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-ef959da6.development.esm.js [app-client] (ecmascript) <export s as sendParent>");
// src/react/sign-up/root.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
// src/react/sign-up/action/navigate.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-slot/dist/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
// src/internals/machines/sign-up/utils/fields-to-params.ts
var SignUpAdditionalKeys = [
    "firstName",
    "lastName",
    "emailAddress",
    "username",
    "password",
    "phoneNumber",
    "legalAccepted"
];
var signUpKeys = new Set(SignUpAdditionalKeys);
function isSignUpParam(key) {
    return signUpKeys.has(key);
}
function fieldsToSignUpParams(fields) {
    const params = {};
    fields.forEach(({ value, checked, type }, key)=>{
        if (isSignUpParam(key) && value !== void 0 && type !== "checkbox") {
            params[key] = value;
        }
        if (isSignUpParam(key) && checked !== void 0 && type === "checkbox") {
            params[key] = checked;
        }
    });
    return params;
}
// src/internals/machines/sign-up/continue.machine.ts
var SignUpContinueMachineId = "SignUpContinue";
var SignUpContinueMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        attempt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { fields, parent } })=>{
            const params = fieldsToSignUpParams(fields);
            return parent.getSnapshot().context.clerk.client.signUp.update(params);
        })
    },
    actions: {
        setFormErrors: ({ context, event })=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertActorEventError"])(event);
            context.formRef.send({
                type: "ERRORS.SET",
                error: event.error
            });
        },
        markFormAsProgressive: ({ context })=>{
            const signUp = context.parent.getSnapshot().context.clerk.client.signUp;
            const missing = signUp.missingFields.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snakeToCamel"]);
            const optional = signUp.optionalFields.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snakeToCamel"]);
            const required = signUp.requiredFields.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snakeToCamel"]);
            const progressiveFieldValues = /* @__PURE__ */ new Map();
            for (const key of required.concat(optional)){
                if (key in signUp) {
                    progressiveFieldValues.set(key, signUp[key]);
                }
            }
            context.formRef.send({
                type: "MARK_AS_PROGRESSIVE",
                missing,
                optional,
                required,
                defaultValues: progressiveFieldValues
            });
        },
        unmarkFormAsProgressive: ({ context })=>context.formRef.send({
                type: "UNMARK_AS_PROGRESSIVE"
            }),
        sendToNext: ({ context, event })=>context.parent.send({
                type: "NEXT",
                resource: event.output
            }),
        sendToLoading: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sendToLoading"]
    },
    guards: {
        isStatusMissingRequirements: ({ context })=>{
            var _a, _b, _c;
            return ((_c = (_b = (_a = context.parent.getSnapshot().context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signUp) == null ? void 0 : _c.status) === "missing_requirements";
        },
        hasMetPreviousMissingRequirements: ({ context })=>{
            const signUp = context.parent.getSnapshot().context.clerk.client.signUp;
            const fields = context.formRef.getSnapshot().context.fields;
            const signUpMissingFields = signUp.missingFields.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$GGFRMWFO$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["snakeToCamel"]);
            const missingFields = Array.from(context.formRef.getSnapshot().context.fields.keys()).filter((key)=>{
                var _a, _b;
                return !signUpMissingFields.includes(key) && !((_a = fields.get(key)) == null ? void 0 : _a.value) && !((_b = fields.get(key)) == null ? void 0 : _b.checked);
            });
            return missingFields.length === 0;
        }
    },
    types: {}
}).createMachine({
    id: SignUpContinueMachineId,
    context: ({ input })=>({
            basePath: input.basePath || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SIGN_UP_DEFAULT_BASE_PATH"],
            formRef: input.formRef,
            parent: input.parent,
            loadingStep: "continue"
        }),
    entry: "markFormAsProgressive",
    onDone: {
        actions: "unmarkFormAsProgressive"
    },
    initial: "Pending",
    states: {
        Pending: {
            tags: [
                "state:pending"
            ],
            description: "Waiting for user input",
            on: {
                SUBMIT: {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
                        "hasMetPreviousMissingRequirements",
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isStatusMissingRequirements")
                    ]),
                    target: "Attempting",
                    reenter: true
                }
            }
        },
        Attempting: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attempt",
                src: "attempt",
                input: ({ context })=>({
                        parent: context.parent,
                        fields: context.formRef.getSnapshot().context.fields
                    }),
                onDone: {
                    actions: [
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormErrors",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        }
    }
});
;
;
;
var DISABLEABLE_FIELDS = [
    "emailAddress",
    "phoneNumber"
];
var SignUpStartMachineId = "SignUpStart";
var PREFILL_FIELDS = [
    "firstName",
    "lastName",
    "emailAddress",
    "username",
    "phoneNumber"
];
var SignUpStartMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        attempt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { fields, parent, params } })=>{
            const fieldParams = fieldsToSignUpParams(fields);
            return parent.getSnapshot().context.clerk.client.signUp.create({
                ...fieldParams,
                ...params
            });
        }),
        attemptWeb3: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { parent, strategy } })=>{
            if (strategy === "web3_metamask_signature") {
                return parent.getSnapshot().context.clerk.client.signUp.authenticateWithMetamask();
            }
            if (strategy === "web3_coinbase_wallet_signature") {
                return parent.getSnapshot().context.clerk.client.signUp.authenticateWithCoinbaseWallet();
            }
            if (strategy === "web3_okx_wallet_signature") {
                return parent.getSnapshot().context.clerk.client.signUp.authenticateWithOKXWallet();
            }
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkElementsRuntimeError"](`Unsupported Web3 strategy: ${strategy}`);
        }),
        thirdParty: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachine"]
    },
    actions: {
        sendToNext: ({ context, event })=>context.parent.send({
                type: "NEXT",
                resource: event.output
            }),
        sendToLoading: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sendToLoading"],
        setFormRef: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ event })=>{
            return {
                formRef: event.formRef
            };
        }),
        setFormDisabledTicketFields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ context, enqueue })=>{
            if (!context.ticket) {
                return;
            }
            const currentFields = context.formRef.getSnapshot().context.fields;
            for (const name of DISABLEABLE_FIELDS){
                if (currentFields.has(name)) {
                    enqueue.sendTo(context.formRef, {
                        type: "FIELD.DISABLE",
                        field: {
                            name
                        }
                    });
                }
            }
        }),
        setFormErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, ({ event })=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertActorEventError"])(event);
            return {
                type: "ERRORS.SET",
                error: event.error
            };
        }),
        setDefaultFormValues: ({ context })=>{
            const signUp = context.parent.getSnapshot().context.clerk.client.signUp;
            const prefilledDefaultValues = /* @__PURE__ */ new Map();
            for (const key of PREFILL_FIELDS){
                if (key in signUp) {
                    prefilledDefaultValues.set(key, signUp[key]);
                }
            }
            context.formRef.send({
                type: "PREFILL_DEFAULT_VALUES",
                defaultValues: prefilledDefaultValues
            });
        }
    },
    guards: {
        isMissingRequirements: ({ context })=>{
            var _a, _b, _c;
            return ((_c = (_b = (_a = context.parent.getSnapshot().context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signUp) == null ? void 0 : _c.status) === "missing_requirements";
        },
        hasTicket: ({ context })=>Boolean(context.ticket),
        isExampleMode: ({ context })=>Boolean(context.parent.getSnapshot().context.exampleMode)
    },
    types: {}
}).createMachine({
    id: SignUpStartMachineId,
    context: ({ input })=>({
            basePath: input.basePath || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SIGN_UP_DEFAULT_BASE_PATH"],
            formRef: input.formRef,
            parent: input.parent,
            loadingStep: "start",
            ticket: input.ticket
        }),
    entry: "setDefaultFormValues",
    initial: "Init",
    on: {
        SET_FORM: {
            actions: "setFormRef"
        }
    },
    states: {
        Init: {
            description: "Handle ticket, if present; Else, default to Pending state. Per tickets, `Attempting` makes a `signUp.create` request allowing for an incomplete sign up to contain progressively filled fields on the Start step.",
            always: [
                {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
                        "hasTicket",
                        "isMissingRequirements"
                    ]),
                    target: "Pending"
                },
                {
                    guard: "hasTicket",
                    target: "Attempting"
                },
                {
                    target: "Pending"
                }
            ]
        },
        Pending: {
            tags: [
                "state:pending"
            ],
            description: "Waiting for user input",
            on: {
                SUBMIT: {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "Attempting",
                    reenter: true
                },
                "AUTHENTICATE.WEB3": {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode"),
                    target: "AttemptingWeb3",
                    reenter: true
                }
            }
        },
        Attempting: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attemptCreate",
                src: "attempt",
                input: ({ context })=>{
                    const defaultParams = {
                        fields: context.formRef.getSnapshot().context.fields,
                        parent: context.parent
                    };
                    const params = context.ticket ? {
                        strategy: "ticket",
                        ticket: context.ticket
                    } : {};
                    return {
                        ...defaultParams,
                        params
                    };
                },
                onDone: {
                    actions: [
                        "setFormDisabledTicketFields",
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormDisabledTicketFields",
                        "setFormErrors",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        },
        AttemptingWeb3: {
            tags: [
                "state:attempting",
                "state:loading"
            ],
            entry: "sendToLoading",
            invoke: {
                id: "attemptCreateWeb3",
                src: "attemptWeb3",
                input: ({ context, event })=>{
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "AUTHENTICATE.WEB3");
                    return {
                        parent: context.parent,
                        strategy: event.strategy
                    };
                },
                onDone: {
                    actions: [
                        "sendToNext",
                        "sendToLoading"
                    ]
                },
                onError: {
                    actions: [
                        "setFormErrors",
                        "sendToLoading"
                    ],
                    target: "Pending"
                }
            }
        }
    }
});
;
;
// src/internals/machines/sign-up/verification.types.ts
var SignUpVerificationDelays = {
    emailLinkTimeout: 3e5,
    // 5 minutes
    resendableTimeout: 1e3
};
// src/internals/machines/sign-up/verification.machine.ts
var SignUpVerificationMachineId = "SignUpVerification";
var shouldVerify = (field, strategy)=>{
    const guards = [
        {
            type: "isFieldUnverified",
            params: {
                field
            }
        }
    ];
    if (strategy) {
        guards.push({
            type: "isStrategyEnabled",
            params: {
                attribute: field,
                strategy
            }
        });
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])(guards);
};
var SignUpVerificationMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        prepare: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(({ input: { params, parent } })=>{
            const clerk = parent.getSnapshot().context.clerk;
            if (params.strategy === "email_link" && params.redirectUrl) {
                params.redirectUrl = clerk.buildUrlWithAuth(params.redirectUrl);
            }
            return clerk.client.signUp.prepareVerification(params);
        }),
        attempt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromPromise"])(async ({ input: { params, parent } })=>parent.getSnapshot().context.clerk.client.signUp.attemptVerification(params)),
        attemptEmailLinkVerification: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromCallback"])(({ receive, sendBack, input: { parent } })=>{
            const { run, stop } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$JY46X3OC$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Poller"])();
            const clerk = parent.getSnapshot().context.clerk;
            void run(async ()=>clerk.client.signUp.reload().then((resource)=>{
                    const signInStatus = resource.status;
                    const verificationStatus = resource.verifications.emailAddress.status;
                    if (signInStatus === "complete") {
                        return sendBack({
                            type: "EMAIL_LINK.VERIFIED",
                            resource
                        });
                    }
                    switch(verificationStatus){
                        case "verified":
                        case "transferable":
                        case "expired":
                            {
                                sendBack({
                                    type: `EMAIL_LINK.${verificationStatus.toUpperCase()}`,
                                    resource
                                });
                                break;
                            }
                        case "failed":
                            {
                                sendBack({
                                    type: "EMAIL_LINK.FAILED",
                                    error: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkElementsError"]("email-link-verification-failed", "Email verification failed"),
                                    resource
                                });
                                break;
                            }
                        // case 'unverified':
                        default:
                            return;
                    }
                    stop();
                }).catch((error)=>{
                    stop();
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkElementsRuntimeError"](error.message);
                }));
            receive((event)=>{
                if (event.type === "STOP") {
                    stop();
                }
            });
            return ()=>stop();
        })
    },
    actions: {
        resendableTick: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ context })=>({
                resendable: context.resendableAfter === 1,
                resendableAfter: context.resendableAfter > 1 ? context.resendableAfter - 1 : context.resendableAfter
            })),
        resendableReset: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            resendable: false,
            resendableAfter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RESENDABLE_COUNTDOWN_DEFAULT"]
        }),
        sendToLoading: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sendToLoading"],
        setFormErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, ({ event })=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertActorEventError"])(event);
            return {
                type: "ERRORS.SET",
                error: event.error
            };
        })
    },
    guards: {
        isComplete: ({ context })=>context.resource.status === "complete",
        isFieldUnverified: ({ context, event }, { field })=>{
            let resource = context.resource;
            if ((event == null ? void 0 : event.type) === "NEXT" && event.resource) {
                resource = event.resource;
            }
            return resource.unverifiedFields.includes(field);
        },
        isResendable: ({ context })=>context.resendable || context.resendableAfter === 0,
        isStrategyEnabled: ({ context }, { attribute, strategy })=>{
            var _a;
            return Boolean((_a = context.attributes) == null ? void 0 : _a[attribute].verifications.includes(strategy));
        },
        shouldVerifyPhoneCode: shouldVerify("phone_number"),
        shouldVerifyEmailLink: shouldVerify("email_address", "email_link"),
        shouldVerifyEmailCode: shouldVerify("email_address", "email_code")
    },
    delays: SignUpVerificationDelays,
    types: {}
}).createMachine({
    id: SignUpVerificationMachineId,
    initial: "Init",
    context: ({ input })=>({
            attributes: input.attributes,
            basePath: input.basePath || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SIGN_UP_DEFAULT_BASE_PATH"],
            loadingStep: "verifications",
            formRef: input.formRef,
            parent: input.parent,
            resendable: false,
            resendableAfter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RESENDABLE_COUNTDOWN_DEFAULT"],
            resource: input.resource
        }),
    on: {
        NEXT: [
            {
                guard: "isComplete",
                actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__s__as__sendParent$3e$__["sendParent"])(({ event })=>({
                        type: "NEXT",
                        resource: event.resource
                    }))
            },
            {
                description: "Validate via phone number",
                guard: "shouldVerifyPhoneCode",
                target: ".PhoneCode"
            },
            {
                description: "Validate via email link",
                guard: "shouldVerifyEmailLink",
                target: ".EmailLink"
            },
            {
                description: "Verify via email code",
                guard: "shouldVerifyEmailCode",
                target: ".EmailCode"
            },
            {
                actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__s__as__sendParent$3e$__["sendParent"])(({ event })=>({
                        type: "NEXT",
                        resource: event.resource
                    }))
            }
        ]
    },
    states: {
        Init: {
            always: [
                {
                    description: "Validate via phone number",
                    guard: "shouldVerifyPhoneCode",
                    target: "PhoneCode"
                },
                {
                    description: "Validate via email link",
                    guard: "shouldVerifyEmailLink",
                    target: "EmailLink"
                },
                {
                    description: "Verify via email code",
                    guard: "shouldVerifyEmailCode",
                    target: "EmailCode"
                },
                {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__s__as__sendParent$3e$__["sendParent"])(({ context })=>({
                            type: "NEXT",
                            resource: context.resource
                        }))
                }
            ]
        },
        EmailLink: {
            tags: [
                "verification:method:email",
                "verification:category:link",
                "verification:email_link"
            ],
            initial: "Preparing",
            on: {
                RETRY: ".Preparing",
                "EMAIL_LINK.RESTART": {
                    target: ".Attempting",
                    reenter: true
                },
                "EMAIL_LINK.FAILED": {
                    actions: [
                        {
                            type: "setFormErrors",
                            params: ({ event })=>({
                                    error: event.error
                                })
                        },
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                            resource: ({ event })=>event.resource
                        })
                    ],
                    target: ".Pending"
                },
                "EMAIL_LINK.*": {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ enqueue, event })=>{
                        if (event.type === "EMAIL_LINK.RESTART") {
                            return;
                        }
                        enqueue.assign({
                            resource: event.resource
                        });
                        enqueue.raise({
                            type: "NEXT",
                            resource: event.resource
                        });
                    })
                }
            },
            states: {
                Preparing: {
                    tags: [
                        "state:preparing",
                        "state:loading"
                    ],
                    exit: "resendableReset",
                    invoke: {
                        id: "prepareEmailLinkVerification",
                        src: "prepare",
                        input: ({ context })=>({
                                parent: context.parent,
                                params: {
                                    strategy: "email_link",
                                    redirectUrl: `${context.basePath}${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAGIC_LINK_VERIFY_PATH_ROUTE"]}`
                                }
                            }),
                        onDone: {
                            target: "Attempting",
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                                resource: ({ event })=>event.output
                            })
                        },
                        onError: {
                            actions: "setFormErrors",
                            target: "Pending"
                        }
                    }
                },
                Pending: {
                    description: "Placeholder for allowing resending of email link",
                    tags: [
                        "state:pending"
                    ],
                    on: {
                        NEXT: "Preparing"
                    }
                },
                Attempting: {
                    tags: [
                        "state:attempting"
                    ],
                    invoke: {
                        id: "attemptEmailLinkVerification",
                        src: "attemptEmailLinkVerification",
                        input: ({ context })=>({
                                parent: context.parent
                            })
                    },
                    after: {
                        emailLinkTimeout: {
                            description: "Timeout after 5 minutes",
                            target: "Pending",
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, {
                                type: "ERRORS.SET",
                                error: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkElementsError"]("verify-email-link-timeout", "Email link verification timed out")
                            })
                        }
                    },
                    initial: "NotResendable",
                    states: {
                        Resendable: {
                            description: "Waiting for user to retry"
                        },
                        NotResendable: {
                            description: "Handle countdowns",
                            on: {
                                RETRY: {
                                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])(({ context })=>`Not retriable; Try again in ${context.resendableAfter}s`)
                                }
                            },
                            after: {
                                resendableTimeout: [
                                    {
                                        description: "Set as retriable if countdown is 0",
                                        guard: "isResendable",
                                        actions: "resendableTick",
                                        target: "Resendable"
                                    },
                                    {
                                        description: "Continue countdown if not retriable",
                                        actions: "resendableTick",
                                        target: "NotResendable",
                                        reenter: true
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        EmailCode: {
            tags: [
                "verification:method:email",
                "verification:category:code",
                "verification:email_code"
            ],
            initial: "Preparing",
            states: {
                Preparing: {
                    tags: [
                        "state:preparing",
                        "state:loading"
                    ],
                    exit: "resendableReset",
                    invoke: {
                        id: "prepareEmailAddressCodeVerification",
                        src: "prepare",
                        input: ({ context })=>({
                                parent: context.parent,
                                params: {
                                    strategy: "email_code"
                                }
                            }),
                        onDone: [
                            {
                                guard: "shouldVerifyEmailCode",
                                target: "Pending"
                            },
                            {
                                actions: [
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                                        resource: ({ event })=>event.output
                                    }),
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__["raise"])(({ event })=>({
                                            type: "NEXT",
                                            resource: event.output
                                        }))
                                ]
                            }
                        ],
                        onError: {
                            actions: "setFormErrors",
                            target: "Pending"
                        }
                    }
                },
                Pending: {
                    tags: [
                        "state:pending"
                    ],
                    on: {
                        RETRY: "Preparing",
                        SUBMIT: {
                            target: "Attempting",
                            reenter: true
                        }
                    },
                    initial: "NotResendable",
                    states: {
                        Resendable: {
                            description: "Waiting for user to retry"
                        },
                        NotResendable: {
                            description: "Handle countdowns",
                            on: {
                                RETRY: {
                                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])(({ context })=>`Not retriable; Try again in ${context.resendableAfter}s`)
                                }
                            },
                            after: {
                                resendableTimeout: [
                                    {
                                        description: "Set as retriable if countdown is 0",
                                        guard: "isResendable",
                                        actions: "resendableTick",
                                        target: "Resendable"
                                    },
                                    {
                                        description: "Continue countdown if not retriable",
                                        actions: "resendableTick",
                                        target: "NotResendable",
                                        reenter: true
                                    }
                                ]
                            }
                        }
                    }
                },
                Attempting: {
                    tags: [
                        "state:attempting",
                        "state:loading"
                    ],
                    entry: "sendToLoading",
                    invoke: {
                        id: "attemptEmailAddressCodeVerification",
                        src: "attempt",
                        input: ({ context })=>{
                            var _a;
                            return {
                                parent: context.parent,
                                params: {
                                    strategy: "email_code",
                                    code: ((_a = context.formRef.getSnapshot().context.fields.get("code")) == null ? void 0 : _a.value) || ""
                                }
                            };
                        },
                        onDone: {
                            actions: [
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__["raise"])(({ event })=>({
                                        type: "NEXT",
                                        resource: event.output
                                    })),
                                "sendToLoading"
                            ]
                        },
                        onError: {
                            actions: [
                                "setFormErrors",
                                "sendToLoading"
                            ],
                            target: "Pending"
                        }
                    }
                }
            }
        },
        PhoneCode: {
            tags: [
                "verification:method:phone",
                "verification:category:code",
                "verification:phone_code"
            ],
            initial: "Preparing",
            states: {
                Preparing: {
                    tags: [
                        "state:preparing",
                        "state:loading"
                    ],
                    exit: "resendableReset",
                    invoke: {
                        id: "preparePhoneCodeVerification",
                        src: "prepare",
                        input: ({ context })=>({
                                parent: context.parent,
                                params: {
                                    strategy: "phone_code"
                                }
                            }),
                        onDone: [
                            {
                                guard: "shouldVerifyPhoneCode",
                                target: "Pending",
                                actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                                    resource: ({ event })=>event.output
                                })
                            },
                            {
                                actions: [
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                                        resource: ({ event })=>event.output
                                    }),
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__["raise"])(({ event })=>({
                                            type: "NEXT",
                                            resource: event.output
                                        }))
                                ]
                            }
                        ],
                        onError: {
                            actions: "setFormErrors",
                            target: "Pending"
                        }
                    }
                },
                Pending: {
                    tags: [
                        "state:pending"
                    ],
                    on: {
                        RETRY: "Preparing",
                        SUBMIT: {
                            target: "Attempting",
                            reenter: true
                        }
                    },
                    initial: "NotResendable",
                    states: {
                        Resendable: {
                            description: "Waiting for user to retry"
                        },
                        NotResendable: {
                            description: "Handle countdowns",
                            on: {
                                RETRY: {
                                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])(({ context })=>`Not retriable; Try again in ${context.resendableAfter}s`)
                                }
                            },
                            after: {
                                resendableTimeout: [
                                    {
                                        description: "Set as retriable if countdown is 0",
                                        guard: "isResendable",
                                        actions: "resendableTick",
                                        target: "Resendable"
                                    },
                                    {
                                        description: "Continue countdown if not retriable",
                                        actions: "resendableTick",
                                        target: "NotResendable",
                                        reenter: true
                                    }
                                ]
                            }
                        }
                    }
                },
                Attempting: {
                    tags: [
                        "state:attempting",
                        "state:loading"
                    ],
                    entry: "sendToLoading",
                    invoke: {
                        id: "attemptPhoneNumberVerification",
                        src: "attempt",
                        input: ({ context })=>{
                            var _a;
                            return {
                                parent: context.parent,
                                params: {
                                    strategy: "phone_code",
                                    code: ((_a = context.formRef.getSnapshot().context.fields.get("code")) == null ? void 0 : _a.value) || ""
                                }
                            };
                        },
                        onDone: {
                            actions: [
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__["raise"])(({ event })=>({
                                        type: "NEXT",
                                        resource: event.output
                                    })),
                                "sendToLoading"
                            ]
                        },
                        onError: {
                            actions: [
                                "setFormErrors",
                                "sendToLoading"
                            ],
                            target: "Pending"
                        }
                    }
                }
            }
        }
    }
});
// src/internals/machines/sign-up/router.machine.ts
var SignUpRouterMachineId = "SignUpRouter";
var isCurrentPath = (path)=>({ context }, _params)=>{
        var _a, _b;
        return (_b = (_a = context.router) == null ? void 0 : _a.match(path)) != null ? _b : false;
    };
var needsStatus = (status)=>({ context, event }, _)=>{
        var _a, _b, _c, _d;
        return ((_a = event == null ? void 0 : event.resource) == null ? void 0 : _a.status) === status || ((_d = (_c = (_b = context.clerk) == null ? void 0 : _b.client) == null ? void 0 : _c.signUp) == null ? void 0 : _d.status) === status;
    };
var SignUpRouterMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    actors: {
        continueMachine: SignUpContinueMachine,
        startMachine: SignUpStartMachine,
        thirdPartyMachine: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachine"],
        verificationMachine: SignUpVerificationMachine
    },
    actions: {
        clearFormErrors: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(({ context })=>context.formRef, {
            type: "ERRORS.CLEAR"
        }),
        logUnknownError: (snapshot)=>console.error("Unknown error:", snapshot),
        navigateInternal: ({ context }, { path, force = false })=>{
            if (!context.router) {
                return;
            }
            if (!force && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["shouldUseVirtualRouting"])()) {
                return;
            }
            if (context.exampleMode) {
                return;
            }
            const resolvedPath = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$IFTVZ2LQ$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["joinURL"])(context.router.basePath, path);
            if (resolvedPath === context.router.pathname()) {
                return;
            }
            context.router.shallowPush(resolvedPath);
        },
        navigateExternal: ({ context }, { path })=>{
            var _a;
            return (_a = context.router) == null ? void 0 : _a.push(path);
        },
        raiseNext: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__["raise"])({
            type: "NEXT"
        }),
        setActive: ({ context, event }, params)=>{
            var _a;
            if (context.exampleMode) {
                return;
            }
            const session = (params == null ? void 0 : params.sessionId) || (params == null ? void 0 : params.useLastActiveSession) && context.clerk.client.lastActiveSessionId || ((event == null ? void 0 : event.resource) || context.clerk.client.signUp).createdSessionId;
            void context.clerk.setActive({
                session,
                redirectUrl: context.clerk.buildAfterSignUpUrl({
                    params: (_a = context.router) == null ? void 0 : _a.searchParams()
                })
            });
        },
        delayedReset: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__r__as__raise$3e$__["raise"])({
            type: "RESET"
        }, {
            delay: 3e3
        }),
        // Reset machine after 3s delay.
        setError: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            error: (_, { error })=>{
                if (error) {
                    return error;
                }
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkElementsRuntimeError"]("Unknown error");
            }
        }),
        setFormOAuthErrors: ({ context })=>{
            const errorOrig = context.clerk.client.signIn.firstFactorVerification.error;
            if (!errorOrig) {
                return;
            }
            let error;
            switch(errorOrig.code){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].NOT_ALLOWED_TO_SIGN_UP:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].OAUTH_ACCESS_DENIED:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].NOT_ALLOWED_ACCESS:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].SAML_USER_ATTRIBUTE_MISSING:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].USER_LOCKED:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].ENTERPRISE_SSO_USER_ATTRIBUTE_MISSING:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].ENTERPRISE_SSO_EMAIL_ADDRESS_DOMAIN_MISMATCH:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].ENTERPRISE_SSO_HOSTED_DOMAIN_MISMATCH:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].SAML_EMAIL_ADDRESS_DOMAIN_MISMATCH:
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR_CODES"].ORGANIZATION_MEMBERSHIP_QUOTA_EXCEEDED_FOR_SSO:
                    error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkElementsError"](errorOrig.code, errorOrig.longMessage);
                    break;
                default:
                    error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkElementsError"]("unable_to_complete", "Unable to complete action at this time. If the problem persists please contact support.");
            }
            context.formRef.send({
                type: "ERRORS.SET",
                error
            });
        },
        transfer: ({ context })=>{
            var _a;
            return (_a = context.router) == null ? void 0 : _a.push(context.clerk.buildSignInUrl());
        }
    },
    guards: {
        areFieldsMissing: ({ context })=>{
            var _a, _b, _c, _d;
            return ((_d = (_c = (_b = (_a = context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signUp) == null ? void 0 : _c.missingFields) == null ? void 0 : _d.length) > 0;
        },
        areFieldsUnverified: ({ context })=>{
            var _a, _b, _c, _d;
            return ((_d = (_c = (_b = (_a = context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signUp) == null ? void 0 : _c.unverifiedFields) == null ? void 0 : _d.length) > 0;
        },
        hasAuthenticatedViaClerkJS: ({ context })=>Boolean(context.clerk.client.signUp.status === null && context.clerk.client.lastActiveSessionId),
        hasCreatedSession: ({ context })=>{
            var _a;
            return Boolean((_a = context.router) == null ? void 0 : _a.searchParams().get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SEARCH_PARAMS"].createdSession));
        },
        hasClerkStatus: ({ context }, params)=>{
            var _a;
            const value = (_a = context.router) == null ? void 0 : _a.searchParams().get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SEARCH_PARAMS"].status);
            if (!params) {
                return Boolean(value);
            }
            return value === params.status;
        },
        hasClerkTransfer: ({ context })=>{
            var _a;
            return Boolean((_a = context.router) == null ? void 0 : _a.searchParams().get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SEARCH_PARAMS"].transfer));
        },
        hasResource: ({ context })=>Boolean(context.clerk.client.signUp),
        hasTicket: ({ context })=>Boolean(context.ticket),
        isLoggedInAndSingleSession: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "isLoggedIn",
            "isSingleSessionMode",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("isExampleMode")
        ]),
        isStatusAbandoned: needsStatus("abandoned"),
        isStatusComplete: ({ context, event })=>{
            var _a, _b;
            const resource = event == null ? void 0 : event.resource;
            const signUp = (_b = (_a = context.clerk) == null ? void 0 : _a.client) == null ? void 0 : _b.signUp;
            return (resource == null ? void 0 : resource.status) === "complete" && Boolean(resource == null ? void 0 : resource.createdSessionId) || (signUp == null ? void 0 : signUp.status) === "complete" && Boolean(signUp == null ? void 0 : signUp.createdSessionId);
        },
        isStatusMissingRequirements: needsStatus("missing_requirements"),
        isLoggedIn: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
            "isStatusComplete",
            ({ context })=>Boolean(context.clerk.user)
        ]),
        isSingleSessionMode: ({ context })=>{
            var _a, _b;
            return Boolean((_b = (_a = context.clerk) == null ? void 0 : _a.__unstable__environment) == null ? void 0 : _b.authConfig.singleSessionMode);
        },
        isRestricted: ({ context })=>{
            var _a, _b;
            return ((_b = (_a = context.clerk) == null ? void 0 : _a.__unstable__environment) == null ? void 0 : _b.userSettings.signUp.mode) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SIGN_UP_MODES"].RESTRICTED;
        },
        isRestrictedWithoutTicket: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "isRestricted",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("hasTicket")
        ]),
        isExampleMode: ({ context })=>Boolean(context.exampleMode),
        isMissingRequiredFields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "isStatusMissingRequirements",
            "areFieldsMissing"
        ]),
        isMissingRequiredUnverifiedFields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "isStatusMissingRequirements",
            "areFieldsUnverified"
        ]),
        needsIdentifier: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
            "statusNeedsIdentifier",
            isCurrentPath("/")
        ]),
        needsContinue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "statusNeedsContinue",
            isCurrentPath("/continue")
        ]),
        needsVerification: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
            "statusNeedsVerification",
            isCurrentPath("/verify")
        ]),
        needsCallback: isCurrentPath(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SSO_CALLBACK_PATH_ROUTE"]),
        statusNeedsIdentifier: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__n__as__not$3e$__["not"])("hasResource"),
            "isStatusAbandoned"
        ]),
        statusNeedsContinue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
            "isMissingRequiredFields"
        ]),
        statusNeedsVerification: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
            "isMissingRequiredUnverifiedFields",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
                "areFieldsMissing",
                "hasClerkStatus"
            ])
        ])
    },
    delays: {
        "TIMEOUT.POLLING": 3e5
    },
    types: {}
}).createMachine({
    id: SignUpRouterMachineId,
    // @ts-expect-error - Set in INIT event
    context: {},
    initial: "Idle",
    on: {
        "AUTHENTICATE.OAUTH": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachineId"], ({ context, event })=>{
                var _a, _b, _c, _d;
                return {
                    type: "REDIRECT",
                    params: {
                        strategy: event.strategy,
                        redirectUrl: `${((_a = context.router) == null ? void 0 : _a.mode) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ROUTING"].virtual ? (_b = context.clerk.__unstable__environment) == null ? void 0 : _b.displayConfig.signUpUrl : (_c = context.router) == null ? void 0 : _c.basePath}${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SSO_CALLBACK_PATH_ROUTE"]}`,
                        redirectUrlComplete: context.clerk.buildAfterSignUpUrl({
                            params: (_d = context.router) == null ? void 0 : _d.searchParams()
                        })
                    }
                };
            })
        },
        "AUTHENTICATE.SAML": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachineId"], ({ context })=>{
                var _a, _b, _c, _d, _e;
                return {
                    type: "REDIRECT",
                    params: {
                        strategy: "saml",
                        emailAddress: (_a = context.formRef.getSnapshot().context.fields.get("emailAddress")) == null ? void 0 : _a.value,
                        redirectUrl: `${((_b = context.router) == null ? void 0 : _b.mode) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ROUTING"].virtual ? (_c = context.clerk.__unstable__environment) == null ? void 0 : _c.displayConfig.signUpUrl : (_d = context.router) == null ? void 0 : _d.basePath}${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SSO_CALLBACK_PATH_ROUTE"]}`,
                        redirectUrlComplete: context.clerk.buildAfterSignUpUrl({
                            params: (_e = context.router) == null ? void 0 : _e.searchParams()
                        })
                    }
                };
            })
        },
        "AUTHENTICATE.ENTERPRISE_SSO": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachineId"], ({ context })=>{
                var _a, _b, _c, _d, _e;
                return {
                    type: "REDIRECT",
                    params: {
                        strategy: "enterprise_sso",
                        emailAddress: (_a = context.formRef.getSnapshot().context.fields.get("emailAddress")) == null ? void 0 : _a.value,
                        redirectUrl: `${((_b = context.router) == null ? void 0 : _b.mode) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ROUTING"].virtual ? (_c = context.clerk.__unstable__environment) == null ? void 0 : _c.displayConfig.signUpUrl : (_d = context.router) == null ? void 0 : _d.basePath}${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SSO_CALLBACK_PATH_ROUTE"]}`,
                        redirectUrlComplete: context.clerk.buildAfterSignUpUrl({
                            params: (_e = context.router) == null ? void 0 : _e.searchParams()
                        })
                    }
                };
            })
        },
        "AUTHENTICATE.WEB3": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])("start", ({ event })=>event)
        },
        "FORM.ATTACH": {
            description: "Attach/re-attach the form to the router.",
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ enqueue, event })=>{
                enqueue.assign({
                    formRef: event.formRef
                });
                enqueue.raise({
                    type: "RESET.STEP"
                });
            })
        },
        "NAVIGATE.PREVIOUS": ".Hist",
        "NAVIGATE.START": ".Start",
        LOADING: {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ event })=>({
                    loading: {
                        isLoading: event.isLoading,
                        step: event.step,
                        strategy: event.strategy,
                        action: event.action
                    }
                }))
        },
        RESET: ".Idle"
    },
    states: {
        Idle: {
            on: {
                INIT: {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$assign$2d$6313ccb3$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])(({ event })=>{
                        var _a;
                        const searchParams = (_a = event.router) == null ? void 0 : _a.searchParams();
                        return {
                            clerk: event.clerk,
                            router: event.router,
                            signInPath: event.signInPath || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SIGN_IN_DEFAULT_BASE_PATH"],
                            loading: {
                                isLoading: false
                            },
                            exampleMode: event.exampleMode || false,
                            formRef: event.formRef,
                            ticket: (searchParams == null ? void 0 : searchParams.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SEARCH_PARAMS"].ticket)) || (searchParams == null ? void 0 : searchParams.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SEARCH_PARAMS"].invitationToken)) || void 0
                        };
                    }),
                    target: "Init"
                }
            }
        },
        Init: {
            entry: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ context, enqueue, self })=>{
                var _a, _b;
                if (!self.getSnapshot().children[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachineId"]]) {
                    enqueue.spawnChild("thirdPartyMachine", {
                        id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachineId"],
                        systemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachineId"],
                        input: {
                            basePath: (_b = (_a = context.router) == null ? void 0 : _a.basePath) != null ? _b : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SIGN_UP_DEFAULT_BASE_PATH"],
                            flow: "signUp",
                            formRef: context.formRef,
                            parent: self
                        }
                    });
                }
            }),
            always: [
                {
                    guard: "isLoggedInAndSingleSession",
                    actions: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__l__as__log$3e$__["log"])("Already logged in"),
                        {
                            type: "navigateExternal",
                            params: ({ context })=>{
                                var _a;
                                return {
                                    path: context.clerk.buildAfterSignUpUrl({
                                        params: (_a = context.router) == null ? void 0 : _a.searchParams()
                                    })
                                };
                            }
                        }
                    ]
                },
                {
                    guard: "needsCallback",
                    target: "Callback"
                },
                {
                    guard: "hasTicket",
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/"
                        }
                    },
                    target: "Start"
                },
                {
                    guard: "needsVerification",
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/verify"
                        }
                    },
                    target: "Verification"
                },
                {
                    guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__o__as__or$3e$__["or"])([
                        "needsContinue",
                        "hasClerkTransfer"
                    ]),
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/continue"
                        }
                    },
                    target: "Continue"
                },
                {
                    guard: "isRestrictedWithoutTicket",
                    target: "Restricted"
                },
                {
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/"
                        }
                    },
                    target: "Start"
                }
            ]
        },
        Start: {
            tags: [
                "step:start"
            ],
            exit: "clearFormErrors",
            invoke: {
                id: "start",
                src: "startMachine",
                input: ({ context, self })=>{
                    var _a;
                    return {
                        basePath: (_a = context.router) == null ? void 0 : _a.basePath,
                        formRef: context.formRef,
                        parent: self,
                        ticket: context.ticket
                    };
                },
                onDone: {
                    actions: "raiseNext"
                }
            },
            on: {
                "RESET.STEP": {
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__enqueueActions$3e$__["enqueueActions"])(({ enqueue, context })=>{
                        enqueue("clearFormErrors");
                        enqueue.sendTo("start", {
                            type: "SET_FORM",
                            formRef: context.formRef
                        });
                    })
                },
                NEXT: [
                    {
                        guard: "isStatusComplete",
                        actions: [
                            "setActive",
                            "delayedReset"
                        ]
                    },
                    {
                        guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__a__as__and$3e$__["and"])([
                            "hasTicket",
                            "statusNeedsContinue"
                        ]),
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/"
                            }
                        },
                        target: "Start",
                        reenter: true
                    },
                    {
                        guard: "statusNeedsVerification",
                        target: "Verification",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/verify"
                            }
                        }
                    },
                    {
                        guard: "statusNeedsContinue",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "Continue"
                    }
                ]
            }
        },
        Continue: {
            tags: [
                "step:continue"
            ],
            invoke: {
                id: "continue",
                src: "continueMachine",
                input: ({ context, self })=>{
                    var _a;
                    return {
                        basePath: (_a = context.router) == null ? void 0 : _a.basePath,
                        formRef: context.formRef,
                        parent: self
                    };
                },
                onDone: {
                    actions: "raiseNext"
                }
            },
            on: {
                "RESET.STEP": {
                    target: "Continue",
                    reenter: true
                },
                NEXT: [
                    {
                        guard: "isStatusComplete",
                        actions: [
                            "setActive",
                            "delayedReset"
                        ]
                    },
                    {
                        guard: "statusNeedsVerification",
                        target: "Verification",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/verify"
                            }
                        }
                    }
                ]
            }
        },
        Verification: {
            tags: [
                "step:verification"
            ],
            invoke: {
                id: "verification",
                src: "verificationMachine",
                input: ({ context, self })=>{
                    var _a, _b;
                    return {
                        attributes: (_a = context.clerk.__unstable__environment) == null ? void 0 : _a.userSettings.attributes,
                        basePath: (_b = context.router) == null ? void 0 : _b.basePath,
                        formRef: context.formRef,
                        parent: self,
                        resource: context.clerk.client.signUp
                    };
                },
                onDone: {
                    actions: "raiseNext"
                }
            },
            always: [
                {
                    guard: "hasCreatedSession",
                    actions: [
                        ({ context })=>{
                            var _a;
                            return {
                                type: "setActive",
                                params: {
                                    sessionId: (_a = context.router) == null ? void 0 : _a.searchParams().get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SEARCH_PARAMS"].createdSession)
                                }
                            };
                        },
                        "delayedReset"
                    ]
                },
                {
                    guard: {
                        type: "hasClerkStatus",
                        params: {
                            status: "verified"
                        }
                    },
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/continue"
                        }
                    }
                },
                {
                    guard: {
                        type: "hasClerkStatus",
                        params: {
                            status: "expired"
                        }
                    },
                    actions: {
                        type: "navigateInternal",
                        params: {
                            force: true,
                            path: "/"
                        }
                    }
                }
            ],
            on: {
                "RESET.STEP": {
                    target: "Verification",
                    reenter: true
                },
                NEXT: [
                    {
                        guard: "isStatusComplete",
                        actions: [
                            "setActive",
                            "delayedReset"
                        ]
                    },
                    {
                        guard: "statusNeedsContinue",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "Continue"
                    }
                ]
            }
        },
        Callback: {
            tags: [
                "step:callback"
            ],
            entry: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$ef959da6$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__b__as__sendTo$3e$__["sendTo"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ThirdPartyMachineId"], {
                type: "CALLBACK"
            }),
            on: {
                NEXT: [
                    {
                        guard: "isStatusComplete",
                        actions: [
                            "setActive",
                            "delayedReset"
                        ]
                    },
                    {
                        description: "Handle a case where the user has already been authenticated via ClerkJS",
                        guard: "hasAuthenticatedViaClerkJS",
                        actions: [
                            {
                                type: "setActive",
                                params: {
                                    useLastActiveSession: true
                                }
                            },
                            "delayedReset"
                        ]
                    },
                    {
                        guard: "statusNeedsVerification",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/verify"
                            }
                        },
                        target: "Verification"
                    },
                    {
                        guard: "statusNeedsContinue",
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/continue"
                            }
                        },
                        target: "Continue"
                    },
                    {
                        actions: {
                            type: "navigateInternal",
                            params: {
                                path: "/"
                            }
                        },
                        target: "Start"
                    }
                ]
            }
        },
        Restricted: {
            tags: [
                "step:restricted"
            ],
            on: {
                NEXT: "Start"
            }
        },
        Error: {
            tags: [
                "step:error"
            ],
            on: {
                NEXT: {
                    target: "Start",
                    actions: "clearFormErrors"
                }
            }
        },
        Hist: {
            type: "history",
            exit: "clearFormErrors"
        }
    }
});
;
var actor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$78b8dcb8$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__c__as__createActor$3e$__["createActor"])(SignUpRouterMachine, {
    inspect: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["inspect"]
});
actor.start();
function SignUpFlowProvider({ children, exampleMode, fallback, isRootPath }) {
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    const router = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$router$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerkRouter"])();
    const formRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useFormStore"])();
    const isReady = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(actor, {
        "SignUpFlowProvider.useSelector[isReady]": (state)=>state.value !== "Idle"
    }["SignUpFlowProvider.useSelector[isReady]"]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])({
        "SignUpFlowProvider.useEffect": ()=>{
            if (!clerk || !router) {
                return;
            }
            const cb = {
                "SignUpFlowProvider.useEffect.cb": ()=>{
                    const evt = {
                        type: "INIT",
                        clerk,
                        exampleMode,
                        formRef,
                        router,
                        signInPath: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SIGN_IN_DEFAULT_BASE_PATH"]
                    };
                    if (actor.getSnapshot().can(evt)) {
                        actor.send(evt);
                    }
                    if (formRef && actor.getSnapshot().can({
                        type: "RESET.STEP"
                    })) {
                        actor.send({
                            type: "FORM.ATTACH",
                            formRef
                        });
                    }
                }
            }["SignUpFlowProvider.useEffect.cb"];
            if ("addOnLoaded" in clerk) {
                clerk.addOnLoaded(cb);
            } else {
                cb();
            }
        }
    }["SignUpFlowProvider.useEffect"], [
        clerk,
        exampleMode,
        formRef == null ? void 0 : formRef.id,
        !!router,
        clerk.loaded
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignUpRouterCtx"].Provider, {
        actorRef: actor,
        children: [
            isRootPath && !isReady && fallback ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Form"], {
                children: fallback
            }) : null,
            clerk.loaded && isReady ? children : null
        ]
    });
}
function SignUpRoot({ children, exampleMode = false, fallback = null, path: pathProp, routing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ROUTING"].path }) {
    var _a, _b;
    const clerk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$react$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useClerk"])();
    const router = (routing === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ROUTING"].virtual ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$QSYHOU7X$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useVirtualRouter"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$QSYHOU7X$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useNextRouter"])();
    const pathname = router.pathname();
    const inferredPath = (_a = router.inferredBasePath) == null ? void 0 : _a.call(router);
    const path = pathProp || inferredPath || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SIGN_UP_DEFAULT_BASE_PATH"];
    const isRootPath = path === pathname;
    (_b = clerk.telemetry) == null ? void 0 : _b.record((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$chunk$2d$WR6SRQOL$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eventComponentMounted"])("Elements_SignUpRoot", {
        exampleMode,
        fallback: Boolean(fallback),
        path,
        routing
    }));
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$router$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkHostRouterContext"].Provider, {
        value: router,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$shared$2f$dist$2f$router$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Router"], {
            basePath: path,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FormStoreProvider"], {
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(SignUpFlowProvider, {
                    exampleMode,
                    fallback,
                    isRootPath,
                    children
                })
            })
        })
    });
}
;
;
;
;
var SIGN_UP_NAVIGATE_NAME = "SignInNavigate";
var SignUpNavigationEventMap = {
    start: `NAVIGATE.START`,
    previous: `NAVIGATE.PREVIOUS`
};
var SignUpNavigate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(({ asChild, to, ...rest }, forwardedRef)=>{
    const actorRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignUpRouterCtx"].useActorRef();
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "button";
    const defaultProps = asChild ? {} : {
        type: "button"
    };
    const sendEvent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])({
        "SignUpNavigate.useCallback[sendEvent]": ()=>{
            const type = SignUpNavigationEventMap[to];
            if (actorRef.getSnapshot().can({
                type
            })) {
                actorRef.send({
                    type
                });
            } else {
                console.warn(`Clerk: <SignUp.Action navigate="${to}"> is an invalid navigation event. You can only navigate to: ${Object.keys(SignUpNavigationEventMap).join(", ")}.`);
            }
        }
    }["SignUpNavigate.useCallback[sendEvent]"], [
        actorRef,
        to
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
        ...defaultProps,
        ...rest,
        onClick: sendEvent,
        ref: forwardedRef
    });
});
SignUpNavigate.displayName = SIGN_UP_NAVIGATE_NAME;
;
;
;
;
var SIGN_UP_RESEND_NAME = "SignUpResend";
var SignUpResend = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(({ asChild, fallback, ...rest }, forwardedRef)=>{
    const ref = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignUpVerificationCtx"].useActorRef(true);
    if (!ref) {
        throw new Error('The resend action must be used within <SignUp.Step name="verifications">.');
    }
    const fallbackProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useSelector"])(ref, {
        "SignUpResend.useSelector2[fallbackProps]": (state)=>({
                resendable: state.context.resendable,
                resendableAfter: state.context.resendableAfter
            })
    }["SignUpResend.useSelector2[fallbackProps]"], {
        "SignUpResend.useSelector2[fallbackProps]": (a, b)=>a.resendableAfter === b.resendableAfter && a.resendable === b.resendable
    }["SignUpResend.useSelector2[fallbackProps]"]);
    if (fallback && !fallbackProps.resendable) {
        return typeof fallback === "function" ? fallback(fallbackProps) : fallback;
    }
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "button";
    const defaultProps = asChild ? {} : {
        type: "button"
    };
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
        ...defaultProps,
        ...rest,
        disabled: !fallbackProps.resendable,
        onClick: ()=>ref.send({
                type: "RETRY"
            }),
        ref: forwardedRef
    });
});
SignUpResend.displayName = SIGN_UP_RESEND_NAME;
;
var SignUpAction = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { submit, navigate, resend, ...rest } = props;
    let Comp;
    if (submit) {
        Comp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Submit"];
    } else if (navigate) {
        Comp = SignUpNavigate;
    } else if (resend) {
        Comp = SignUpResend;
    }
    return Comp ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
        to: navigate,
        ...rest,
        ref: forwardedRef
    }) : null;
});
SignUpAction.displayName = "SignUpAction";
;
;
;
var SignUpCaptcha = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forwardRef"])(({ asChild, children, ...rest }, forwardedRef)=>{
    const ref = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignUpStartCtx"].useActorRef(true);
    if (!ref) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ClerkElementsRuntimeError"]('<Captcha> must be used within the <SignUp.Step name="start"> component.');
    }
    const Comp = asChild ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$slot$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Slot"] : "div";
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsx"])(Comp, {
        id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CAPTCHA_ELEMENT_ID"],
        ...rest,
        ref: forwardedRef
    });
});
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@clerk/elements/dist/chunk-VY37G23G.mjs [app-client] (ecmascript) <export SignUpStep as Step>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Step": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignUpStep"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/elements/dist/chunk-VY37G23G.mjs [app-client] (ecmascript)");
}}),
"[project]/node_modules/@clerk/elements/dist/chunk-VY37G23G.mjs [app-client] (ecmascript) <export SignUpStrategy as Strategy>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Strategy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignUpStrategy"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$clerk$2f$elements$2f$dist$2f$chunk$2d$VY37G23G$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@clerk/elements/dist/chunk-VY37G23G.mjs [app-client] (ecmascript)");
}}),
"[project]/node_modules/clsx/dist/clsx.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "clsx": (()=>clsx),
    "default": (()=>__TURBOPACK__default__export__)
});
function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;
    else if ("object" == typeof e) if (Array.isArray(e)) {
        var o = e.length;
        for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else for(f in e)e[f] && (n && (n += " "), n += f);
    return n;
}
function clsx() {
    for(var e, t, f = 0, n = "", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
}
const __TURBOPACK__default__export__ = clsx;
}}),
"[project]/node_modules/class-variance-authority/dist/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Copyright 2022 Joe Bell. All rights reserved.
 *
 * This file is licensed to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */ __turbopack_context__.s({
    "cva": (()=>cva),
    "cx": (()=>cx)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/clsx/dist/clsx.mjs [app-client] (ecmascript)");
;
const falsyToString = (value)=>typeof value === "boolean" ? `${value}` : value === 0 ? "0" : value;
const cx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$clsx$2f$dist$2f$clsx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clsx"];
const cva = (base, config)=>(props)=>{
        var _config_compoundVariants;
        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
        const { variants, defaultVariants } = config;
        const getVariantClassNames = Object.keys(variants).map((variant)=>{
            const variantProp = props === null || props === void 0 ? void 0 : props[variant];
            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
            if (variantProp === null) return null;
            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
            return variants[variant][variantKey];
        });
        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{
            let [key, value] = param;
            if (value === undefined) {
                return acc;
            }
            acc[key] = value;
            return acc;
        }, {});
        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{
            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;
            return Object.entries(compoundVariantOptions).every((param)=>{
                let [key, value] = param;
                return Array.isArray(value) ? value.includes({
                    ...defaultVariants,
                    ...propsWithoutUndefined
                }[key]) : ({
                    ...defaultVariants,
                    ...propsWithoutUndefined
                })[key] === value;
            }) ? [
                ...acc,
                cvClass,
                cvClassName
            ] : acc;
        }, []);
        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    };
}}),
"[project]/node_modules/tailwind-merge/dist/bundle-mjs.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTailwindMerge": (()=>createTailwindMerge),
    "extendTailwindMerge": (()=>extendTailwindMerge),
    "fromTheme": (()=>fromTheme),
    "getDefaultConfig": (()=>getDefaultConfig),
    "mergeConfigs": (()=>mergeConfigs),
    "twJoin": (()=>twJoin),
    "twMerge": (()=>twMerge),
    "validators": (()=>validators)
});
const CLASS_PART_SEPARATOR = '-';
const createClassGroupUtils = (config)=>{
    const classMap = createClassMap(config);
    const { conflictingClassGroups, conflictingClassGroupModifiers } = config;
    const getClassGroupId = (className)=>{
        const classParts = className.split(CLASS_PART_SEPARATOR);
        // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.
        if (classParts[0] === '' && classParts.length !== 1) {
            classParts.shift();
        }
        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
    };
    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier)=>{
        const conflicts = conflictingClassGroups[classGroupId] || [];
        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
            return [
                ...conflicts,
                ...conflictingClassGroupModifiers[classGroupId]
            ];
        }
        return conflicts;
    };
    return {
        getClassGroupId,
        getConflictingClassGroupIds
    };
};
const getGroupRecursive = (classParts, classPartObject)=>{
    if (classParts.length === 0) {
        return classPartObject.classGroupId;
    }
    const currentClassPart = classParts[0];
    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;
    if (classGroupFromNextClassPart) {
        return classGroupFromNextClassPart;
    }
    if (classPartObject.validators.length === 0) {
        return undefined;
    }
    const classRest = classParts.join(CLASS_PART_SEPARATOR);
    return classPartObject.validators.find(({ validator })=>validator(classRest))?.classGroupId;
};
const arbitraryPropertyRegex = /^\[(.+)\]$/;
const getGroupIdForArbitraryProperty = (className)=>{
    if (arbitraryPropertyRegex.test(className)) {
        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
        const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));
        if (property) {
            // I use two dots here because one dot is used as prefix for class groups in plugins
            return 'arbitrary..' + property;
        }
    }
};
/**
 * Exported for testing only
 */ const createClassMap = (config)=>{
    const { theme, classGroups } = config;
    const classMap = {
        nextPart: new Map(),
        validators: []
    };
    for(const classGroupId in classGroups){
        processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);
    }
    return classMap;
};
const processClassesRecursively = (classGroup, classPartObject, classGroupId, theme)=>{
    classGroup.forEach((classDefinition)=>{
        if (typeof classDefinition === 'string') {
            const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);
            classPartObjectToEdit.classGroupId = classGroupId;
            return;
        }
        if (typeof classDefinition === 'function') {
            if (isThemeGetter(classDefinition)) {
                processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
                return;
            }
            classPartObject.validators.push({
                validator: classDefinition,
                classGroupId
            });
            return;
        }
        Object.entries(classDefinition).forEach(([key, classGroup])=>{
            processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);
        });
    });
};
const getPart = (classPartObject, path)=>{
    let currentClassPartObject = classPartObject;
    path.split(CLASS_PART_SEPARATOR).forEach((pathPart)=>{
        if (!currentClassPartObject.nextPart.has(pathPart)) {
            currentClassPartObject.nextPart.set(pathPart, {
                nextPart: new Map(),
                validators: []
            });
        }
        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
    });
    return currentClassPartObject;
};
const isThemeGetter = (func)=>func.isThemeGetter;
// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance
const createLruCache = (maxCacheSize)=>{
    if (maxCacheSize < 1) {
        return {
            get: ()=>undefined,
            set: ()=>{}
        };
    }
    let cacheSize = 0;
    let cache = new Map();
    let previousCache = new Map();
    const update = (key, value)=>{
        cache.set(key, value);
        cacheSize++;
        if (cacheSize > maxCacheSize) {
            cacheSize = 0;
            previousCache = cache;
            cache = new Map();
        }
    };
    return {
        get (key) {
            let value = cache.get(key);
            if (value !== undefined) {
                return value;
            }
            if ((value = previousCache.get(key)) !== undefined) {
                update(key, value);
                return value;
            }
        },
        set (key, value) {
            if (cache.has(key)) {
                cache.set(key, value);
            } else {
                update(key, value);
            }
        }
    };
};
const IMPORTANT_MODIFIER = '!';
const MODIFIER_SEPARATOR = ':';
const MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;
const createParseClassName = (config)=>{
    const { prefix, experimentalParseClassName } = config;
    /**
   * Parse class name into parts.
   *
   * Inspired by `splitAtTopLevelOnly` used in Tailwind CSS
   * @see https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js
   */ let parseClassName = (className)=>{
        const modifiers = [];
        let bracketDepth = 0;
        let parenDepth = 0;
        let modifierStart = 0;
        let postfixModifierPosition;
        for(let index = 0; index < className.length; index++){
            let currentCharacter = className[index];
            if (bracketDepth === 0 && parenDepth === 0) {
                if (currentCharacter === MODIFIER_SEPARATOR) {
                    modifiers.push(className.slice(modifierStart, index));
                    modifierStart = index + MODIFIER_SEPARATOR_LENGTH;
                    continue;
                }
                if (currentCharacter === '/') {
                    postfixModifierPosition = index;
                    continue;
                }
            }
            if (currentCharacter === '[') {
                bracketDepth++;
            } else if (currentCharacter === ']') {
                bracketDepth--;
            } else if (currentCharacter === '(') {
                parenDepth++;
            } else if (currentCharacter === ')') {
                parenDepth--;
            }
        }
        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
        const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);
        const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;
        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;
        return {
            modifiers,
            hasImportantModifier,
            baseClassName,
            maybePostfixModifierPosition
        };
    };
    if (prefix) {
        const fullPrefix = prefix + MODIFIER_SEPARATOR;
        const parseClassNameOriginal = parseClassName;
        parseClassName = (className)=>className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {
                isExternal: true,
                modifiers: [],
                hasImportantModifier: false,
                baseClassName: className,
                maybePostfixModifierPosition: undefined
            };
    }
    if (experimentalParseClassName) {
        const parseClassNameOriginal = parseClassName;
        parseClassName = (className)=>experimentalParseClassName({
                className,
                parseClassName: parseClassNameOriginal
            });
    }
    return parseClassName;
};
const stripImportantModifier = (baseClassName)=>{
    if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {
        return baseClassName.substring(0, baseClassName.length - 1);
    }
    /**
   * In Tailwind CSS v3 the important modifier was at the start of the base class name. This is still supported for legacy reasons.
   * @see https://github.com/dcastil/tailwind-merge/issues/513#issuecomment-2614029864
   */ if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {
        return baseClassName.substring(1);
    }
    return baseClassName;
};
/**
 * Sorts modifiers according to following schema:
 * - Predefined modifiers are sorted alphabetically
 * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it
 */ const createSortModifiers = (config)=>{
    const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map((modifier)=>[
            modifier,
            true
        ]));
    const sortModifiers = (modifiers)=>{
        if (modifiers.length <= 1) {
            return modifiers;
        }
        const sortedModifiers = [];
        let unsortedModifiers = [];
        modifiers.forEach((modifier)=>{
            const isPositionSensitive = modifier[0] === '[' || orderSensitiveModifiers[modifier];
            if (isPositionSensitive) {
                sortedModifiers.push(...unsortedModifiers.sort(), modifier);
                unsortedModifiers = [];
            } else {
                unsortedModifiers.push(modifier);
            }
        });
        sortedModifiers.push(...unsortedModifiers.sort());
        return sortedModifiers;
    };
    return sortModifiers;
};
const createConfigUtils = (config)=>({
        cache: createLruCache(config.cacheSize),
        parseClassName: createParseClassName(config),
        sortModifiers: createSortModifiers(config),
        ...createClassGroupUtils(config)
    });
const SPLIT_CLASSES_REGEX = /\s+/;
const mergeClassList = (classList, configUtils)=>{
    const { parseClassName, getClassGroupId, getConflictingClassGroupIds, sortModifiers } = configUtils;
    /**
   * Set of classGroupIds in following format:
   * `{importantModifier}{variantModifiers}{classGroupId}`
   * @example 'float'
   * @example 'hover:focus:bg-color'
   * @example 'md:!pr'
   */ const classGroupsInConflict = [];
    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
    let result = '';
    for(let index = classNames.length - 1; index >= 0; index -= 1){
        const originalClassName = classNames[index];
        const { isExternal, modifiers, hasImportantModifier, baseClassName, maybePostfixModifierPosition } = parseClassName(originalClassName);
        if (isExternal) {
            result = originalClassName + (result.length > 0 ? ' ' + result : result);
            continue;
        }
        let hasPostfixModifier = !!maybePostfixModifierPosition;
        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
        if (!classGroupId) {
            if (!hasPostfixModifier) {
                // Not a Tailwind class
                result = originalClassName + (result.length > 0 ? ' ' + result : result);
                continue;
            }
            classGroupId = getClassGroupId(baseClassName);
            if (!classGroupId) {
                // Not a Tailwind class
                result = originalClassName + (result.length > 0 ? ' ' + result : result);
                continue;
            }
            hasPostfixModifier = false;
        }
        const variantModifier = sortModifiers(modifiers).join(':');
        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
        const classId = modifierId + classGroupId;
        if (classGroupsInConflict.includes(classId)) {
            continue;
        }
        classGroupsInConflict.push(classId);
        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
        for(let i = 0; i < conflictGroups.length; ++i){
            const group = conflictGroups[i];
            classGroupsInConflict.push(modifierId + group);
        }
        // Tailwind class not in conflict
        result = originalClassName + (result.length > 0 ? ' ' + result : result);
    }
    return result;
};
/**
 * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.
 *
 * Specifically:
 * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js
 * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts
 *
 * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)
 */ function twJoin() {
    let index = 0;
    let argument;
    let resolvedValue;
    let string = '';
    while(index < arguments.length){
        if (argument = arguments[index++]) {
            if (resolvedValue = toValue(argument)) {
                string && (string += ' ');
                string += resolvedValue;
            }
        }
    }
    return string;
}
const toValue = (mix)=>{
    if (typeof mix === 'string') {
        return mix;
    }
    let resolvedValue;
    let string = '';
    for(let k = 0; k < mix.length; k++){
        if (mix[k]) {
            if (resolvedValue = toValue(mix[k])) {
                string && (string += ' ');
                string += resolvedValue;
            }
        }
    }
    return string;
};
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
    let configUtils;
    let cacheGet;
    let cacheSet;
    let functionToCall = initTailwindMerge;
    function initTailwindMerge(classList) {
        const config = createConfigRest.reduce((previousConfig, createConfigCurrent)=>createConfigCurrent(previousConfig), createConfigFirst());
        configUtils = createConfigUtils(config);
        cacheGet = configUtils.cache.get;
        cacheSet = configUtils.cache.set;
        functionToCall = tailwindMerge;
        return tailwindMerge(classList);
    }
    function tailwindMerge(classList) {
        const cachedResult = cacheGet(classList);
        if (cachedResult) {
            return cachedResult;
        }
        const result = mergeClassList(classList, configUtils);
        cacheSet(classList, result);
        return result;
    }
    return function callTailwindMerge() {
        return functionToCall(twJoin.apply(null, arguments));
    };
}
const fromTheme = (key)=>{
    const themeGetter = (theme)=>theme[key] || [];
    themeGetter.isThemeGetter = true;
    return themeGetter;
};
const arbitraryValueRegex = /^\[(?:(\w[\w-]*):)?(.+)\]$/i;
const arbitraryVariableRegex = /^\((?:(\w[\w-]*):)?(.+)\)$/i;
const fractionRegex = /^\d+\/\d+$/;
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\(.+\)$/;
// Shadow always begins with x and y offset separated by underscore optionally prepended by inset
const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
const isFraction = (value)=>fractionRegex.test(value);
const isNumber = (value)=>!!value && !Number.isNaN(Number(value));
const isInteger = (value)=>!!value && Number.isInteger(Number(value));
const isPercent = (value)=>value.endsWith('%') && isNumber(value.slice(0, -1));
const isTshirtSize = (value)=>tshirtUnitRegex.test(value);
const isAny = ()=>true;
const isLengthOnly = (value)=>// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
const isNever = ()=>false;
const isShadow = (value)=>shadowRegex.test(value);
const isImage = (value)=>imageRegex.test(value);
const isAnyNonArbitrary = (value)=>!isArbitraryValue(value) && !isArbitraryVariable(value);
const isArbitrarySize = (value)=>getIsArbitraryValue(value, isLabelSize, isNever);
const isArbitraryValue = (value)=>arbitraryValueRegex.test(value);
const isArbitraryLength = (value)=>getIsArbitraryValue(value, isLabelLength, isLengthOnly);
const isArbitraryNumber = (value)=>getIsArbitraryValue(value, isLabelNumber, isNumber);
const isArbitraryPosition = (value)=>getIsArbitraryValue(value, isLabelPosition, isNever);
const isArbitraryImage = (value)=>getIsArbitraryValue(value, isLabelImage, isImage);
const isArbitraryShadow = (value)=>getIsArbitraryValue(value, isLabelShadow, isShadow);
const isArbitraryVariable = (value)=>arbitraryVariableRegex.test(value);
const isArbitraryVariableLength = (value)=>getIsArbitraryVariable(value, isLabelLength);
const isArbitraryVariableFamilyName = (value)=>getIsArbitraryVariable(value, isLabelFamilyName);
const isArbitraryVariablePosition = (value)=>getIsArbitraryVariable(value, isLabelPosition);
const isArbitraryVariableSize = (value)=>getIsArbitraryVariable(value, isLabelSize);
const isArbitraryVariableImage = (value)=>getIsArbitraryVariable(value, isLabelImage);
const isArbitraryVariableShadow = (value)=>getIsArbitraryVariable(value, isLabelShadow, true);
// Helpers
const getIsArbitraryValue = (value, testLabel, testValue)=>{
    const result = arbitraryValueRegex.exec(value);
    if (result) {
        if (result[1]) {
            return testLabel(result[1]);
        }
        return testValue(result[2]);
    }
    return false;
};
const getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false)=>{
    const result = arbitraryVariableRegex.exec(value);
    if (result) {
        if (result[1]) {
            return testLabel(result[1]);
        }
        return shouldMatchNoLabel;
    }
    return false;
};
// Labels
const isLabelPosition = (label)=>label === 'position' || label === 'percentage';
const isLabelImage = (label)=>label === 'image' || label === 'url';
const isLabelSize = (label)=>label === 'length' || label === 'size' || label === 'bg-size';
const isLabelLength = (label)=>label === 'length';
const isLabelNumber = (label)=>label === 'number';
const isLabelFamilyName = (label)=>label === 'family-name';
const isLabelShadow = (label)=>label === 'shadow';
const validators = /*#__PURE__*/ Object.defineProperty({
    __proto__: null,
    isAny,
    isAnyNonArbitrary,
    isArbitraryImage,
    isArbitraryLength,
    isArbitraryNumber,
    isArbitraryPosition,
    isArbitraryShadow,
    isArbitrarySize,
    isArbitraryValue,
    isArbitraryVariable,
    isArbitraryVariableFamilyName,
    isArbitraryVariableImage,
    isArbitraryVariableLength,
    isArbitraryVariablePosition,
    isArbitraryVariableShadow,
    isArbitraryVariableSize,
    isFraction,
    isInteger,
    isNumber,
    isPercent,
    isTshirtSize
}, Symbol.toStringTag, {
    value: 'Module'
});
const getDefaultConfig = ()=>{
    /**
   * Theme getters for theme variable namespaces
   * @see https://tailwindcss.com/docs/theme#theme-variable-namespaces
   */ /***/ const themeColor = fromTheme('color');
    const themeFont = fromTheme('font');
    const themeText = fromTheme('text');
    const themeFontWeight = fromTheme('font-weight');
    const themeTracking = fromTheme('tracking');
    const themeLeading = fromTheme('leading');
    const themeBreakpoint = fromTheme('breakpoint');
    const themeContainer = fromTheme('container');
    const themeSpacing = fromTheme('spacing');
    const themeRadius = fromTheme('radius');
    const themeShadow = fromTheme('shadow');
    const themeInsetShadow = fromTheme('inset-shadow');
    const themeTextShadow = fromTheme('text-shadow');
    const themeDropShadow = fromTheme('drop-shadow');
    const themeBlur = fromTheme('blur');
    const themePerspective = fromTheme('perspective');
    const themeAspect = fromTheme('aspect');
    const themeEase = fromTheme('ease');
    const themeAnimate = fromTheme('animate');
    /**
   * Helpers to avoid repeating the same scales
   *
   * We use functions that create a new array every time they're called instead of static arrays.
   * This ensures that users who modify any scale by mutating the array (e.g. with `array.push(element)`) don't accidentally mutate arrays in other parts of the config.
   */ /***/ const scaleBreak = ()=>[
            'auto',
            'avoid',
            'all',
            'avoid-page',
            'page',
            'left',
            'right',
            'column'
        ];
    const scalePosition = ()=>[
            'center',
            'top',
            'bottom',
            'left',
            'right',
            'top-left',
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            'left-top',
            'top-right',
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            'right-top',
            'bottom-right',
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            'right-bottom',
            'bottom-left',
            // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
            'left-bottom'
        ];
    const scalePositionWithArbitrary = ()=>[
            ...scalePosition(),
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleOverflow = ()=>[
            'auto',
            'hidden',
            'clip',
            'visible',
            'scroll'
        ];
    const scaleOverscroll = ()=>[
            'auto',
            'contain',
            'none'
        ];
    const scaleUnambiguousSpacing = ()=>[
            isArbitraryVariable,
            isArbitraryValue,
            themeSpacing
        ];
    const scaleInset = ()=>[
            isFraction,
            'full',
            'auto',
            ...scaleUnambiguousSpacing()
        ];
    const scaleGridTemplateColsRows = ()=>[
            isInteger,
            'none',
            'subgrid',
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridColRowStartAndEnd = ()=>[
            'auto',
            {
                span: [
                    'full',
                    isInteger,
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            },
            isInteger,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridColRowStartOrEnd = ()=>[
            isInteger,
            'auto',
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleGridAutoColsRows = ()=>[
            'auto',
            'min',
            'max',
            'fr',
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleAlignPrimaryAxis = ()=>[
            'start',
            'end',
            'center',
            'between',
            'around',
            'evenly',
            'stretch',
            'baseline',
            'center-safe',
            'end-safe'
        ];
    const scaleAlignSecondaryAxis = ()=>[
            'start',
            'end',
            'center',
            'stretch',
            'center-safe',
            'end-safe'
        ];
    const scaleMargin = ()=>[
            'auto',
            ...scaleUnambiguousSpacing()
        ];
    const scaleSizing = ()=>[
            isFraction,
            'auto',
            'full',
            'dvw',
            'dvh',
            'lvw',
            'lvh',
            'svw',
            'svh',
            'min',
            'max',
            'fit',
            ...scaleUnambiguousSpacing()
        ];
    const scaleColor = ()=>[
            themeColor,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleBgPosition = ()=>[
            ...scalePosition(),
            isArbitraryVariablePosition,
            isArbitraryPosition,
            {
                position: [
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            }
        ];
    const scaleBgRepeat = ()=>[
            'no-repeat',
            {
                repeat: [
                    '',
                    'x',
                    'y',
                    'space',
                    'round'
                ]
            }
        ];
    const scaleBgSize = ()=>[
            'auto',
            'cover',
            'contain',
            isArbitraryVariableSize,
            isArbitrarySize,
            {
                size: [
                    isArbitraryVariable,
                    isArbitraryValue
                ]
            }
        ];
    const scaleGradientStopPosition = ()=>[
            isPercent,
            isArbitraryVariableLength,
            isArbitraryLength
        ];
    const scaleRadius = ()=>[
            // Deprecated since Tailwind CSS v4.0.0
            '',
            'none',
            'full',
            themeRadius,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleBorderWidth = ()=>[
            '',
            isNumber,
            isArbitraryVariableLength,
            isArbitraryLength
        ];
    const scaleLineStyle = ()=>[
            'solid',
            'dashed',
            'dotted',
            'double'
        ];
    const scaleBlendMode = ()=>[
            'normal',
            'multiply',
            'screen',
            'overlay',
            'darken',
            'lighten',
            'color-dodge',
            'color-burn',
            'hard-light',
            'soft-light',
            'difference',
            'exclusion',
            'hue',
            'saturation',
            'color',
            'luminosity'
        ];
    const scaleMaskImagePosition = ()=>[
            isNumber,
            isPercent,
            isArbitraryVariablePosition,
            isArbitraryPosition
        ];
    const scaleBlur = ()=>[
            // Deprecated since Tailwind CSS v4.0.0
            '',
            'none',
            themeBlur,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleRotate = ()=>[
            'none',
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleScale = ()=>[
            'none',
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleSkew = ()=>[
            isNumber,
            isArbitraryVariable,
            isArbitraryValue
        ];
    const scaleTranslate = ()=>[
            isFraction,
            'full',
            ...scaleUnambiguousSpacing()
        ];
    return {
        cacheSize: 500,
        theme: {
            animate: [
                'spin',
                'ping',
                'pulse',
                'bounce'
            ],
            aspect: [
                'video'
            ],
            blur: [
                isTshirtSize
            ],
            breakpoint: [
                isTshirtSize
            ],
            color: [
                isAny
            ],
            container: [
                isTshirtSize
            ],
            'drop-shadow': [
                isTshirtSize
            ],
            ease: [
                'in',
                'out',
                'in-out'
            ],
            font: [
                isAnyNonArbitrary
            ],
            'font-weight': [
                'thin',
                'extralight',
                'light',
                'normal',
                'medium',
                'semibold',
                'bold',
                'extrabold',
                'black'
            ],
            'inset-shadow': [
                isTshirtSize
            ],
            leading: [
                'none',
                'tight',
                'snug',
                'normal',
                'relaxed',
                'loose'
            ],
            perspective: [
                'dramatic',
                'near',
                'normal',
                'midrange',
                'distant',
                'none'
            ],
            radius: [
                isTshirtSize
            ],
            shadow: [
                isTshirtSize
            ],
            spacing: [
                'px',
                isNumber
            ],
            text: [
                isTshirtSize
            ],
            'text-shadow': [
                isTshirtSize
            ],
            tracking: [
                'tighter',
                'tight',
                'normal',
                'wide',
                'wider',
                'widest'
            ]
        },
        classGroups: {
            // --------------
            // --- Layout ---
            // --------------
            /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */ aspect: [
                {
                    aspect: [
                        'auto',
                        'square',
                        isFraction,
                        isArbitraryValue,
                        isArbitraryVariable,
                        themeAspect
                    ]
                }
            ],
            /**
       * Container
       * @see https://tailwindcss.com/docs/container
       * @deprecated since Tailwind CSS v4.0.0
       */ container: [
                'container'
            ],
            /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */ columns: [
                {
                    columns: [
                        isNumber,
                        isArbitraryValue,
                        isArbitraryVariable,
                        themeContainer
                    ]
                }
            ],
            /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */ 'break-after': [
                {
                    'break-after': scaleBreak()
                }
            ],
            /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */ 'break-before': [
                {
                    'break-before': scaleBreak()
                }
            ],
            /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */ 'break-inside': [
                {
                    'break-inside': [
                        'auto',
                        'avoid',
                        'avoid-page',
                        'avoid-column'
                    ]
                }
            ],
            /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */ 'box-decoration': [
                {
                    'box-decoration': [
                        'slice',
                        'clone'
                    ]
                }
            ],
            /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */ box: [
                {
                    box: [
                        'border',
                        'content'
                    ]
                }
            ],
            /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */ display: [
                'block',
                'inline-block',
                'inline',
                'flex',
                'inline-flex',
                'table',
                'inline-table',
                'table-caption',
                'table-cell',
                'table-column',
                'table-column-group',
                'table-footer-group',
                'table-header-group',
                'table-row-group',
                'table-row',
                'flow-root',
                'grid',
                'inline-grid',
                'contents',
                'list-item',
                'hidden'
            ],
            /**
       * Screen Reader Only
       * @see https://tailwindcss.com/docs/display#screen-reader-only
       */ sr: [
                'sr-only',
                'not-sr-only'
            ],
            /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */ float: [
                {
                    float: [
                        'right',
                        'left',
                        'none',
                        'start',
                        'end'
                    ]
                }
            ],
            /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */ clear: [
                {
                    clear: [
                        'left',
                        'right',
                        'both',
                        'none',
                        'start',
                        'end'
                    ]
                }
            ],
            /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */ isolation: [
                'isolate',
                'isolation-auto'
            ],
            /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */ 'object-fit': [
                {
                    object: [
                        'contain',
                        'cover',
                        'fill',
                        'none',
                        'scale-down'
                    ]
                }
            ],
            /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */ 'object-position': [
                {
                    object: scalePositionWithArbitrary()
                }
            ],
            /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */ overflow: [
                {
                    overflow: scaleOverflow()
                }
            ],
            /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */ 'overflow-x': [
                {
                    'overflow-x': scaleOverflow()
                }
            ],
            /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */ 'overflow-y': [
                {
                    'overflow-y': scaleOverflow()
                }
            ],
            /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ overscroll: [
                {
                    overscroll: scaleOverscroll()
                }
            ],
            /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ 'overscroll-x': [
                {
                    'overscroll-x': scaleOverscroll()
                }
            ],
            /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */ 'overscroll-y': [
                {
                    'overscroll-y': scaleOverscroll()
                }
            ],
            /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */ position: [
                'static',
                'fixed',
                'absolute',
                'relative',
                'sticky'
            ],
            /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ inset: [
                {
                    inset: scaleInset()
                }
            ],
            /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ 'inset-x': [
                {
                    'inset-x': scaleInset()
                }
            ],
            /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ 'inset-y': [
                {
                    'inset-y': scaleInset()
                }
            ],
            /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ start: [
                {
                    start: scaleInset()
                }
            ],
            /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ end: [
                {
                    end: scaleInset()
                }
            ],
            /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ top: [
                {
                    top: scaleInset()
                }
            ],
            /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ right: [
                {
                    right: scaleInset()
                }
            ],
            /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ bottom: [
                {
                    bottom: scaleInset()
                }
            ],
            /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */ left: [
                {
                    left: scaleInset()
                }
            ],
            /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */ visibility: [
                'visible',
                'invisible',
                'collapse'
            ],
            /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */ z: [
                {
                    z: [
                        isInteger,
                        'auto',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ------------------------
            // --- Flexbox and Grid ---
            // ------------------------
            /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */ basis: [
                {
                    basis: [
                        isFraction,
                        'full',
                        'auto',
                        themeContainer,
                        ...scaleUnambiguousSpacing()
                    ]
                }
            ],
            /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */ 'flex-direction': [
                {
                    flex: [
                        'row',
                        'row-reverse',
                        'col',
                        'col-reverse'
                    ]
                }
            ],
            /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */ 'flex-wrap': [
                {
                    flex: [
                        'nowrap',
                        'wrap',
                        'wrap-reverse'
                    ]
                }
            ],
            /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */ flex: [
                {
                    flex: [
                        isNumber,
                        isFraction,
                        'auto',
                        'initial',
                        'none',
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */ grow: [
                {
                    grow: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */ shrink: [
                {
                    shrink: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */ order: [
                {
                    order: [
                        isInteger,
                        'first',
                        'last',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */ 'grid-cols': [
                {
                    'grid-cols': scaleGridTemplateColsRows()
                }
            ],
            /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */ 'col-start-end': [
                {
                    col: scaleGridColRowStartAndEnd()
                }
            ],
            /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */ 'col-start': [
                {
                    'col-start': scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */ 'col-end': [
                {
                    'col-end': scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */ 'grid-rows': [
                {
                    'grid-rows': scaleGridTemplateColsRows()
                }
            ],
            /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */ 'row-start-end': [
                {
                    row: scaleGridColRowStartAndEnd()
                }
            ],
            /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */ 'row-start': [
                {
                    'row-start': scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */ 'row-end': [
                {
                    'row-end': scaleGridColRowStartOrEnd()
                }
            ],
            /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */ 'grid-flow': [
                {
                    'grid-flow': [
                        'row',
                        'col',
                        'dense',
                        'row-dense',
                        'col-dense'
                    ]
                }
            ],
            /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */ 'auto-cols': [
                {
                    'auto-cols': scaleGridAutoColsRows()
                }
            ],
            /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */ 'auto-rows': [
                {
                    'auto-rows': scaleGridAutoColsRows()
                }
            ],
            /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */ gap: [
                {
                    gap: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */ 'gap-x': [
                {
                    'gap-x': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */ 'gap-y': [
                {
                    'gap-y': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */ 'justify-content': [
                {
                    justify: [
                        ...scaleAlignPrimaryAxis(),
                        'normal'
                    ]
                }
            ],
            /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */ 'justify-items': [
                {
                    'justify-items': [
                        ...scaleAlignSecondaryAxis(),
                        'normal'
                    ]
                }
            ],
            /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */ 'justify-self': [
                {
                    'justify-self': [
                        'auto',
                        ...scaleAlignSecondaryAxis()
                    ]
                }
            ],
            /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */ 'align-content': [
                {
                    content: [
                        'normal',
                        ...scaleAlignPrimaryAxis()
                    ]
                }
            ],
            /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */ 'align-items': [
                {
                    items: [
                        ...scaleAlignSecondaryAxis(),
                        {
                            baseline: [
                                '',
                                'last'
                            ]
                        }
                    ]
                }
            ],
            /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */ 'align-self': [
                {
                    self: [
                        'auto',
                        ...scaleAlignSecondaryAxis(),
                        {
                            baseline: [
                                '',
                                'last'
                            ]
                        }
                    ]
                }
            ],
            /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */ 'place-content': [
                {
                    'place-content': scaleAlignPrimaryAxis()
                }
            ],
            /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */ 'place-items': [
                {
                    'place-items': [
                        ...scaleAlignSecondaryAxis(),
                        'baseline'
                    ]
                }
            ],
            /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */ 'place-self': [
                {
                    'place-self': [
                        'auto',
                        ...scaleAlignSecondaryAxis()
                    ]
                }
            ],
            // Spacing
            /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */ p: [
                {
                    p: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */ px: [
                {
                    px: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */ py: [
                {
                    py: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */ ps: [
                {
                    ps: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */ pe: [
                {
                    pe: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */ pt: [
                {
                    pt: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */ pr: [
                {
                    pr: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */ pb: [
                {
                    pb: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */ pl: [
                {
                    pl: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */ m: [
                {
                    m: scaleMargin()
                }
            ],
            /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */ mx: [
                {
                    mx: scaleMargin()
                }
            ],
            /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */ my: [
                {
                    my: scaleMargin()
                }
            ],
            /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */ ms: [
                {
                    ms: scaleMargin()
                }
            ],
            /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */ me: [
                {
                    me: scaleMargin()
                }
            ],
            /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */ mt: [
                {
                    mt: scaleMargin()
                }
            ],
            /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */ mr: [
                {
                    mr: scaleMargin()
                }
            ],
            /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */ mb: [
                {
                    mb: scaleMargin()
                }
            ],
            /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */ ml: [
                {
                    ml: scaleMargin()
                }
            ],
            /**
       * Space Between X
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ 'space-x': [
                {
                    'space-x': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ 'space-x-reverse': [
                'space-x-reverse'
            ],
            /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ 'space-y': [
                {
                    'space-y': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */ 'space-y-reverse': [
                'space-y-reverse'
            ],
            // --------------
            // --- Sizing ---
            // --------------
            /**
       * Size
       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height
       */ size: [
                {
                    size: scaleSizing()
                }
            ],
            /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */ w: [
                {
                    w: [
                        themeContainer,
                        'screen',
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */ 'min-w': [
                {
                    'min-w': [
                        themeContainer,
                        'screen',
                        /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ 'none',
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */ 'max-w': [
                {
                    'max-w': [
                        themeContainer,
                        'screen',
                        'none',
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ 'prose',
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ {
                            screen: [
                                themeBreakpoint
                            ]
                        },
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */ h: [
                {
                    h: [
                        'screen',
                        'lh',
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */ 'min-h': [
                {
                    'min-h': [
                        'screen',
                        'lh',
                        'none',
                        ...scaleSizing()
                    ]
                }
            ],
            /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */ 'max-h': [
                {
                    'max-h': [
                        'screen',
                        'lh',
                        ...scaleSizing()
                    ]
                }
            ],
            // ------------------
            // --- Typography ---
            // ------------------
            /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */ 'font-size': [
                {
                    text: [
                        'base',
                        themeText,
                        isArbitraryVariableLength,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */ 'font-smoothing': [
                'antialiased',
                'subpixel-antialiased'
            ],
            /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */ 'font-style': [
                'italic',
                'not-italic'
            ],
            /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */ 'font-weight': [
                {
                    font: [
                        themeFontWeight,
                        isArbitraryVariable,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Font Stretch
       * @see https://tailwindcss.com/docs/font-stretch
       */ 'font-stretch': [
                {
                    'font-stretch': [
                        'ultra-condensed',
                        'extra-condensed',
                        'condensed',
                        'semi-condensed',
                        'normal',
                        'semi-expanded',
                        'expanded',
                        'extra-expanded',
                        'ultra-expanded',
                        isPercent,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */ 'font-family': [
                {
                    font: [
                        isArbitraryVariableFamilyName,
                        isArbitraryValue,
                        themeFont
                    ]
                }
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-normal': [
                'normal-nums'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-ordinal': [
                'ordinal'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-slashed-zero': [
                'slashed-zero'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-figure': [
                'lining-nums',
                'oldstyle-nums'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-spacing': [
                'proportional-nums',
                'tabular-nums'
            ],
            /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */ 'fvn-fraction': [
                'diagonal-fractions',
                'stacked-fractions'
            ],
            /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */ tracking: [
                {
                    tracking: [
                        themeTracking,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */ 'line-clamp': [
                {
                    'line-clamp': [
                        isNumber,
                        'none',
                        isArbitraryVariable,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */ leading: [
                {
                    leading: [
                        /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */ themeLeading,
                        ...scaleUnambiguousSpacing()
                    ]
                }
            ],
            /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */ 'list-image': [
                {
                    'list-image': [
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */ 'list-style-position': [
                {
                    list: [
                        'inside',
                        'outside'
                    ]
                }
            ],
            /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */ 'list-style-type': [
                {
                    list: [
                        'disc',
                        'decimal',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */ 'text-alignment': [
                {
                    text: [
                        'left',
                        'center',
                        'right',
                        'justify',
                        'start',
                        'end'
                    ]
                }
            ],
            /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://v3.tailwindcss.com/docs/placeholder-color
       */ 'placeholder-color': [
                {
                    placeholder: scaleColor()
                }
            ],
            /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */ 'text-color': [
                {
                    text: scaleColor()
                }
            ],
            /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */ 'text-decoration': [
                'underline',
                'overline',
                'line-through',
                'no-underline'
            ],
            /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */ 'text-decoration-style': [
                {
                    decoration: [
                        ...scaleLineStyle(),
                        'wavy'
                    ]
                }
            ],
            /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */ 'text-decoration-thickness': [
                {
                    decoration: [
                        isNumber,
                        'from-font',
                        'auto',
                        isArbitraryVariable,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */ 'text-decoration-color': [
                {
                    decoration: scaleColor()
                }
            ],
            /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */ 'underline-offset': [
                {
                    'underline-offset': [
                        isNumber,
                        'auto',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */ 'text-transform': [
                'uppercase',
                'lowercase',
                'capitalize',
                'normal-case'
            ],
            /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */ 'text-overflow': [
                'truncate',
                'text-ellipsis',
                'text-clip'
            ],
            /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */ 'text-wrap': [
                {
                    text: [
                        'wrap',
                        'nowrap',
                        'balance',
                        'pretty'
                    ]
                }
            ],
            /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */ indent: [
                {
                    indent: scaleUnambiguousSpacing()
                }
            ],
            /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */ 'vertical-align': [
                {
                    align: [
                        'baseline',
                        'top',
                        'middle',
                        'bottom',
                        'text-top',
                        'text-bottom',
                        'sub',
                        'super',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */ whitespace: [
                {
                    whitespace: [
                        'normal',
                        'nowrap',
                        'pre',
                        'pre-line',
                        'pre-wrap',
                        'break-spaces'
                    ]
                }
            ],
            /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */ break: [
                {
                    break: [
                        'normal',
                        'words',
                        'all',
                        'keep'
                    ]
                }
            ],
            /**
       * Overflow Wrap
       * @see https://tailwindcss.com/docs/overflow-wrap
       */ wrap: [
                {
                    wrap: [
                        'break-word',
                        'anywhere',
                        'normal'
                    ]
                }
            ],
            /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */ hyphens: [
                {
                    hyphens: [
                        'none',
                        'manual',
                        'auto'
                    ]
                }
            ],
            /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */ content: [
                {
                    content: [
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // -------------------
            // --- Backgrounds ---
            // -------------------
            /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */ 'bg-attachment': [
                {
                    bg: [
                        'fixed',
                        'local',
                        'scroll'
                    ]
                }
            ],
            /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */ 'bg-clip': [
                {
                    'bg-clip': [
                        'border',
                        'padding',
                        'content',
                        'text'
                    ]
                }
            ],
            /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */ 'bg-origin': [
                {
                    'bg-origin': [
                        'border',
                        'padding',
                        'content'
                    ]
                }
            ],
            /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */ 'bg-position': [
                {
                    bg: scaleBgPosition()
                }
            ],
            /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */ 'bg-repeat': [
                {
                    bg: scaleBgRepeat()
                }
            ],
            /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */ 'bg-size': [
                {
                    bg: scaleBgSize()
                }
            ],
            /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */ 'bg-image': [
                {
                    bg: [
                        'none',
                        {
                            linear: [
                                {
                                    to: [
                                        't',
                                        'tr',
                                        'r',
                                        'br',
                                        'b',
                                        'bl',
                                        'l',
                                        'tl'
                                    ]
                                },
                                isInteger,
                                isArbitraryVariable,
                                isArbitraryValue
                            ],
                            radial: [
                                '',
                                isArbitraryVariable,
                                isArbitraryValue
                            ],
                            conic: [
                                isInteger,
                                isArbitraryVariable,
                                isArbitraryValue
                            ]
                        },
                        isArbitraryVariableImage,
                        isArbitraryImage
                    ]
                }
            ],
            /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */ 'bg-color': [
                {
                    bg: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-from-pos': [
                {
                    from: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-via-pos': [
                {
                    via: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-to-pos': [
                {
                    to: scaleGradientStopPosition()
                }
            ],
            /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-from': [
                {
                    from: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-via': [
                {
                    via: scaleColor()
                }
            ],
            /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */ 'gradient-to': [
                {
                    to: scaleColor()
                }
            ],
            // ---------------
            // --- Borders ---
            // ---------------
            /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */ rounded: [
                {
                    rounded: scaleRadius()
                }
            ],
            /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-s': [
                {
                    'rounded-s': scaleRadius()
                }
            ],
            /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-e': [
                {
                    'rounded-e': scaleRadius()
                }
            ],
            /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-t': [
                {
                    'rounded-t': scaleRadius()
                }
            ],
            /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-r': [
                {
                    'rounded-r': scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-b': [
                {
                    'rounded-b': scaleRadius()
                }
            ],
            /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-l': [
                {
                    'rounded-l': scaleRadius()
                }
            ],
            /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-ss': [
                {
                    'rounded-ss': scaleRadius()
                }
            ],
            /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-se': [
                {
                    'rounded-se': scaleRadius()
                }
            ],
            /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-ee': [
                {
                    'rounded-ee': scaleRadius()
                }
            ],
            /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-es': [
                {
                    'rounded-es': scaleRadius()
                }
            ],
            /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-tl': [
                {
                    'rounded-tl': scaleRadius()
                }
            ],
            /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-tr': [
                {
                    'rounded-tr': scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-br': [
                {
                    'rounded-br': scaleRadius()
                }
            ],
            /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */ 'rounded-bl': [
                {
                    'rounded-bl': scaleRadius()
                }
            ],
            /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w': [
                {
                    border: scaleBorderWidth()
                }
            ],
            /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-x': [
                {
                    'border-x': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-y': [
                {
                    'border-y': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-s': [
                {
                    'border-s': scaleBorderWidth()
                }
            ],
            /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-e': [
                {
                    'border-e': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-t': [
                {
                    'border-t': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-r': [
                {
                    'border-r': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-b': [
                {
                    'border-b': scaleBorderWidth()
                }
            ],
            /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */ 'border-w-l': [
                {
                    'border-l': scaleBorderWidth()
                }
            ],
            /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ 'divide-x': [
                {
                    'divide-x': scaleBorderWidth()
                }
            ],
            /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ 'divide-x-reverse': [
                'divide-x-reverse'
            ],
            /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ 'divide-y': [
                {
                    'divide-y': scaleBorderWidth()
                }
            ],
            /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */ 'divide-y-reverse': [
                'divide-y-reverse'
            ],
            /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */ 'border-style': [
                {
                    border: [
                        ...scaleLineStyle(),
                        'hidden',
                        'none'
                    ]
                }
            ],
            /**
       * Divide Style
       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style
       */ 'divide-style': [
                {
                    divide: [
                        ...scaleLineStyle(),
                        'hidden',
                        'none'
                    ]
                }
            ],
            /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color': [
                {
                    border: scaleColor()
                }
            ],
            /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-x': [
                {
                    'border-x': scaleColor()
                }
            ],
            /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-y': [
                {
                    'border-y': scaleColor()
                }
            ],
            /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-s': [
                {
                    'border-s': scaleColor()
                }
            ],
            /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-e': [
                {
                    'border-e': scaleColor()
                }
            ],
            /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-t': [
                {
                    'border-t': scaleColor()
                }
            ],
            /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-r': [
                {
                    'border-r': scaleColor()
                }
            ],
            /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-b': [
                {
                    'border-b': scaleColor()
                }
            ],
            /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */ 'border-color-l': [
                {
                    'border-l': scaleColor()
                }
            ],
            /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */ 'divide-color': [
                {
                    divide: scaleColor()
                }
            ],
            /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */ 'outline-style': [
                {
                    outline: [
                        ...scaleLineStyle(),
                        'none',
                        'hidden'
                    ]
                }
            ],
            /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */ 'outline-offset': [
                {
                    'outline-offset': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */ 'outline-w': [
                {
                    outline: [
                        '',
                        isNumber,
                        isArbitraryVariableLength,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */ 'outline-color': [
                {
                    outline: scaleColor()
                }
            ],
            // ---------------
            // --- Effects ---
            // ---------------
            /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */ shadow: [
                {
                    shadow: [
                        // Deprecated since Tailwind CSS v4.0.0
                        '',
                        'none',
                        themeShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color
       */ 'shadow-color': [
                {
                    shadow: scaleColor()
                }
            ],
            /**
       * Inset Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow
       */ 'inset-shadow': [
                {
                    'inset-shadow': [
                        'none',
                        themeInsetShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Inset Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color
       */ 'inset-shadow-color': [
                {
                    'inset-shadow': scaleColor()
                }
            ],
            /**
       * Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring
       */ 'ring-w': [
                {
                    ring: scaleBorderWidth()
                }
            ],
            /**
       * Ring Width Inset
       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ 'ring-w-inset': [
                'ring-inset'
            ],
            /**
       * Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color
       */ 'ring-color': [
                {
                    ring: scaleColor()
                }
            ],
            /**
       * Ring Offset Width
       * @see https://v3.tailwindcss.com/docs/ring-offset-width
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ 'ring-offset-w': [
                {
                    'ring-offset': [
                        isNumber,
                        isArbitraryLength
                    ]
                }
            ],
            /**
       * Ring Offset Color
       * @see https://v3.tailwindcss.com/docs/ring-offset-color
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */ 'ring-offset-color': [
                {
                    'ring-offset': scaleColor()
                }
            ],
            /**
       * Inset Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring
       */ 'inset-ring-w': [
                {
                    'inset-ring': scaleBorderWidth()
                }
            ],
            /**
       * Inset Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color
       */ 'inset-ring-color': [
                {
                    'inset-ring': scaleColor()
                }
            ],
            /**
       * Text Shadow
       * @see https://tailwindcss.com/docs/text-shadow
       */ 'text-shadow': [
                {
                    'text-shadow': [
                        'none',
                        themeTextShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Text Shadow Color
       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color
       */ 'text-shadow-color': [
                {
                    'text-shadow': scaleColor()
                }
            ],
            /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */ opacity: [
                {
                    opacity: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */ 'mix-blend': [
                {
                    'mix-blend': [
                        ...scaleBlendMode(),
                        'plus-darker',
                        'plus-lighter'
                    ]
                }
            ],
            /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */ 'bg-blend': [
                {
                    'bg-blend': scaleBlendMode()
                }
            ],
            /**
       * Mask Clip
       * @see https://tailwindcss.com/docs/mask-clip
       */ 'mask-clip': [
                {
                    'mask-clip': [
                        'border',
                        'padding',
                        'content',
                        'fill',
                        'stroke',
                        'view'
                    ]
                },
                'mask-no-clip'
            ],
            /**
       * Mask Composite
       * @see https://tailwindcss.com/docs/mask-composite
       */ 'mask-composite': [
                {
                    mask: [
                        'add',
                        'subtract',
                        'intersect',
                        'exclude'
                    ]
                }
            ],
            /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */ 'mask-image-linear-pos': [
                {
                    'mask-linear': [
                        isNumber
                    ]
                }
            ],
            'mask-image-linear-from-pos': [
                {
                    'mask-linear-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-linear-to-pos': [
                {
                    'mask-linear-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-linear-from-color': [
                {
                    'mask-linear-from': scaleColor()
                }
            ],
            'mask-image-linear-to-color': [
                {
                    'mask-linear-to': scaleColor()
                }
            ],
            'mask-image-t-from-pos': [
                {
                    'mask-t-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-t-to-pos': [
                {
                    'mask-t-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-t-from-color': [
                {
                    'mask-t-from': scaleColor()
                }
            ],
            'mask-image-t-to-color': [
                {
                    'mask-t-to': scaleColor()
                }
            ],
            'mask-image-r-from-pos': [
                {
                    'mask-r-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-r-to-pos': [
                {
                    'mask-r-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-r-from-color': [
                {
                    'mask-r-from': scaleColor()
                }
            ],
            'mask-image-r-to-color': [
                {
                    'mask-r-to': scaleColor()
                }
            ],
            'mask-image-b-from-pos': [
                {
                    'mask-b-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-b-to-pos': [
                {
                    'mask-b-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-b-from-color': [
                {
                    'mask-b-from': scaleColor()
                }
            ],
            'mask-image-b-to-color': [
                {
                    'mask-b-to': scaleColor()
                }
            ],
            'mask-image-l-from-pos': [
                {
                    'mask-l-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-l-to-pos': [
                {
                    'mask-l-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-l-from-color': [
                {
                    'mask-l-from': scaleColor()
                }
            ],
            'mask-image-l-to-color': [
                {
                    'mask-l-to': scaleColor()
                }
            ],
            'mask-image-x-from-pos': [
                {
                    'mask-x-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-x-to-pos': [
                {
                    'mask-x-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-x-from-color': [
                {
                    'mask-x-from': scaleColor()
                }
            ],
            'mask-image-x-to-color': [
                {
                    'mask-x-to': scaleColor()
                }
            ],
            'mask-image-y-from-pos': [
                {
                    'mask-y-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-y-to-pos': [
                {
                    'mask-y-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-y-from-color': [
                {
                    'mask-y-from': scaleColor()
                }
            ],
            'mask-image-y-to-color': [
                {
                    'mask-y-to': scaleColor()
                }
            ],
            'mask-image-radial': [
                {
                    'mask-radial': [
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            'mask-image-radial-from-pos': [
                {
                    'mask-radial-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-radial-to-pos': [
                {
                    'mask-radial-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-radial-from-color': [
                {
                    'mask-radial-from': scaleColor()
                }
            ],
            'mask-image-radial-to-color': [
                {
                    'mask-radial-to': scaleColor()
                }
            ],
            'mask-image-radial-shape': [
                {
                    'mask-radial': [
                        'circle',
                        'ellipse'
                    ]
                }
            ],
            'mask-image-radial-size': [
                {
                    'mask-radial': [
                        {
                            closest: [
                                'side',
                                'corner'
                            ],
                            farthest: [
                                'side',
                                'corner'
                            ]
                        }
                    ]
                }
            ],
            'mask-image-radial-pos': [
                {
                    'mask-radial-at': scalePosition()
                }
            ],
            'mask-image-conic-pos': [
                {
                    'mask-conic': [
                        isNumber
                    ]
                }
            ],
            'mask-image-conic-from-pos': [
                {
                    'mask-conic-from': scaleMaskImagePosition()
                }
            ],
            'mask-image-conic-to-pos': [
                {
                    'mask-conic-to': scaleMaskImagePosition()
                }
            ],
            'mask-image-conic-from-color': [
                {
                    'mask-conic-from': scaleColor()
                }
            ],
            'mask-image-conic-to-color': [
                {
                    'mask-conic-to': scaleColor()
                }
            ],
            /**
       * Mask Mode
       * @see https://tailwindcss.com/docs/mask-mode
       */ 'mask-mode': [
                {
                    mask: [
                        'alpha',
                        'luminance',
                        'match'
                    ]
                }
            ],
            /**
       * Mask Origin
       * @see https://tailwindcss.com/docs/mask-origin
       */ 'mask-origin': [
                {
                    'mask-origin': [
                        'border',
                        'padding',
                        'content',
                        'fill',
                        'stroke',
                        'view'
                    ]
                }
            ],
            /**
       * Mask Position
       * @see https://tailwindcss.com/docs/mask-position
       */ 'mask-position': [
                {
                    mask: scaleBgPosition()
                }
            ],
            /**
       * Mask Repeat
       * @see https://tailwindcss.com/docs/mask-repeat
       */ 'mask-repeat': [
                {
                    mask: scaleBgRepeat()
                }
            ],
            /**
       * Mask Size
       * @see https://tailwindcss.com/docs/mask-size
       */ 'mask-size': [
                {
                    mask: scaleBgSize()
                }
            ],
            /**
       * Mask Type
       * @see https://tailwindcss.com/docs/mask-type
       */ 'mask-type': [
                {
                    'mask-type': [
                        'alpha',
                        'luminance'
                    ]
                }
            ],
            /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */ 'mask-image': [
                {
                    mask: [
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ---------------
            // --- Filters ---
            // ---------------
            /**
       * Filter
       * @see https://tailwindcss.com/docs/filter
       */ filter: [
                {
                    filter: [
                        // Deprecated since Tailwind CSS v3.0.0
                        '',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */ blur: [
                {
                    blur: scaleBlur()
                }
            ],
            /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */ brightness: [
                {
                    brightness: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */ contrast: [
                {
                    contrast: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */ 'drop-shadow': [
                {
                    'drop-shadow': [
                        // Deprecated since Tailwind CSS v4.0.0
                        '',
                        'none',
                        themeDropShadow,
                        isArbitraryVariableShadow,
                        isArbitraryShadow
                    ]
                }
            ],
            /**
       * Drop Shadow Color
       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color
       */ 'drop-shadow-color': [
                {
                    'drop-shadow': scaleColor()
                }
            ],
            /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */ grayscale: [
                {
                    grayscale: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */ 'hue-rotate': [
                {
                    'hue-rotate': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */ invert: [
                {
                    invert: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */ saturate: [
                {
                    saturate: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */ sepia: [
                {
                    sepia: [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Filter
       * @see https://tailwindcss.com/docs/backdrop-filter
       */ 'backdrop-filter': [
                {
                    'backdrop-filter': [
                        // Deprecated since Tailwind CSS v3.0.0
                        '',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */ 'backdrop-blur': [
                {
                    'backdrop-blur': scaleBlur()
                }
            ],
            /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */ 'backdrop-brightness': [
                {
                    'backdrop-brightness': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */ 'backdrop-contrast': [
                {
                    'backdrop-contrast': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */ 'backdrop-grayscale': [
                {
                    'backdrop-grayscale': [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */ 'backdrop-hue-rotate': [
                {
                    'backdrop-hue-rotate': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */ 'backdrop-invert': [
                {
                    'backdrop-invert': [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */ 'backdrop-opacity': [
                {
                    'backdrop-opacity': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */ 'backdrop-saturate': [
                {
                    'backdrop-saturate': [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */ 'backdrop-sepia': [
                {
                    'backdrop-sepia': [
                        '',
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // --------------
            // --- Tables ---
            // --------------
            /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */ 'border-collapse': [
                {
                    border: [
                        'collapse',
                        'separate'
                    ]
                }
            ],
            /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */ 'border-spacing': [
                {
                    'border-spacing': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */ 'border-spacing-x': [
                {
                    'border-spacing-x': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */ 'border-spacing-y': [
                {
                    'border-spacing-y': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */ 'table-layout': [
                {
                    table: [
                        'auto',
                        'fixed'
                    ]
                }
            ],
            /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */ caption: [
                {
                    caption: [
                        'top',
                        'bottom'
                    ]
                }
            ],
            // ---------------------------------
            // --- Transitions and Animation ---
            // ---------------------------------
            /**
       * Transition Property
       * @see https://tailwindcss.com/docs/transition-property
       */ transition: [
                {
                    transition: [
                        '',
                        'all',
                        'colors',
                        'opacity',
                        'shadow',
                        'transform',
                        'none',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Behavior
       * @see https://tailwindcss.com/docs/transition-behavior
       */ 'transition-behavior': [
                {
                    transition: [
                        'normal',
                        'discrete'
                    ]
                }
            ],
            /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */ duration: [
                {
                    duration: [
                        isNumber,
                        'initial',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */ ease: [
                {
                    ease: [
                        'linear',
                        'initial',
                        themeEase,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */ delay: [
                {
                    delay: [
                        isNumber,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */ animate: [
                {
                    animate: [
                        'none',
                        themeAnimate,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // ------------------
            // --- Transforms ---
            // ------------------
            /**
       * Backface Visibility
       * @see https://tailwindcss.com/docs/backface-visibility
       */ backface: [
                {
                    backface: [
                        'hidden',
                        'visible'
                    ]
                }
            ],
            /**
       * Perspective
       * @see https://tailwindcss.com/docs/perspective
       */ perspective: [
                {
                    perspective: [
                        themePerspective,
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Perspective Origin
       * @see https://tailwindcss.com/docs/perspective-origin
       */ 'perspective-origin': [
                {
                    'perspective-origin': scalePositionWithArbitrary()
                }
            ],
            /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */ rotate: [
                {
                    rotate: scaleRotate()
                }
            ],
            /**
       * Rotate X
       * @see https://tailwindcss.com/docs/rotate
       */ 'rotate-x': [
                {
                    'rotate-x': scaleRotate()
                }
            ],
            /**
       * Rotate Y
       * @see https://tailwindcss.com/docs/rotate
       */ 'rotate-y': [
                {
                    'rotate-y': scaleRotate()
                }
            ],
            /**
       * Rotate Z
       * @see https://tailwindcss.com/docs/rotate
       */ 'rotate-z': [
                {
                    'rotate-z': scaleRotate()
                }
            ],
            /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */ scale: [
                {
                    scale: scaleScale()
                }
            ],
            /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */ 'scale-x': [
                {
                    'scale-x': scaleScale()
                }
            ],
            /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */ 'scale-y': [
                {
                    'scale-y': scaleScale()
                }
            ],
            /**
       * Scale Z
       * @see https://tailwindcss.com/docs/scale
       */ 'scale-z': [
                {
                    'scale-z': scaleScale()
                }
            ],
            /**
       * Scale 3D
       * @see https://tailwindcss.com/docs/scale
       */ 'scale-3d': [
                'scale-3d'
            ],
            /**
       * Skew
       * @see https://tailwindcss.com/docs/skew
       */ skew: [
                {
                    skew: scaleSkew()
                }
            ],
            /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */ 'skew-x': [
                {
                    'skew-x': scaleSkew()
                }
            ],
            /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */ 'skew-y': [
                {
                    'skew-y': scaleSkew()
                }
            ],
            /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */ transform: [
                {
                    transform: [
                        isArbitraryVariable,
                        isArbitraryValue,
                        '',
                        'none',
                        'gpu',
                        'cpu'
                    ]
                }
            ],
            /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */ 'transform-origin': [
                {
                    origin: scalePositionWithArbitrary()
                }
            ],
            /**
       * Transform Style
       * @see https://tailwindcss.com/docs/transform-style
       */ 'transform-style': [
                {
                    transform: [
                        '3d',
                        'flat'
                    ]
                }
            ],
            /**
       * Translate
       * @see https://tailwindcss.com/docs/translate
       */ translate: [
                {
                    translate: scaleTranslate()
                }
            ],
            /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */ 'translate-x': [
                {
                    'translate-x': scaleTranslate()
                }
            ],
            /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */ 'translate-y': [
                {
                    'translate-y': scaleTranslate()
                }
            ],
            /**
       * Translate Z
       * @see https://tailwindcss.com/docs/translate
       */ 'translate-z': [
                {
                    'translate-z': scaleTranslate()
                }
            ],
            /**
       * Translate None
       * @see https://tailwindcss.com/docs/translate
       */ 'translate-none': [
                'translate-none'
            ],
            // ---------------------
            // --- Interactivity ---
            // ---------------------
            /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */ accent: [
                {
                    accent: scaleColor()
                }
            ],
            /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */ appearance: [
                {
                    appearance: [
                        'none',
                        'auto'
                    ]
                }
            ],
            /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */ 'caret-color': [
                {
                    caret: scaleColor()
                }
            ],
            /**
       * Color Scheme
       * @see https://tailwindcss.com/docs/color-scheme
       */ 'color-scheme': [
                {
                    scheme: [
                        'normal',
                        'dark',
                        'light',
                        'light-dark',
                        'only-dark',
                        'only-light'
                    ]
                }
            ],
            /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */ cursor: [
                {
                    cursor: [
                        'auto',
                        'default',
                        'pointer',
                        'wait',
                        'text',
                        'move',
                        'help',
                        'not-allowed',
                        'none',
                        'context-menu',
                        'progress',
                        'cell',
                        'crosshair',
                        'vertical-text',
                        'alias',
                        'copy',
                        'no-drop',
                        'grab',
                        'grabbing',
                        'all-scroll',
                        'col-resize',
                        'row-resize',
                        'n-resize',
                        'e-resize',
                        's-resize',
                        'w-resize',
                        'ne-resize',
                        'nw-resize',
                        'se-resize',
                        'sw-resize',
                        'ew-resize',
                        'ns-resize',
                        'nesw-resize',
                        'nwse-resize',
                        'zoom-in',
                        'zoom-out',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            /**
       * Field Sizing
       * @see https://tailwindcss.com/docs/field-sizing
       */ 'field-sizing': [
                {
                    'field-sizing': [
                        'fixed',
                        'content'
                    ]
                }
            ],
            /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */ 'pointer-events': [
                {
                    'pointer-events': [
                        'auto',
                        'none'
                    ]
                }
            ],
            /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */ resize: [
                {
                    resize: [
                        'none',
                        '',
                        'y',
                        'x'
                    ]
                }
            ],
            /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */ 'scroll-behavior': [
                {
                    scroll: [
                        'auto',
                        'smooth'
                    ]
                }
            ],
            /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-m': [
                {
                    'scroll-m': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-mx': [
                {
                    'scroll-mx': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-my': [
                {
                    'scroll-my': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-ms': [
                {
                    'scroll-ms': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-me': [
                {
                    'scroll-me': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-mt': [
                {
                    'scroll-mt': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-mr': [
                {
                    'scroll-mr': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-mb': [
                {
                    'scroll-mb': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */ 'scroll-ml': [
                {
                    'scroll-ml': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-p': [
                {
                    'scroll-p': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-px': [
                {
                    'scroll-px': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-py': [
                {
                    'scroll-py': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-ps': [
                {
                    'scroll-ps': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pe': [
                {
                    'scroll-pe': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pt': [
                {
                    'scroll-pt': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pr': [
                {
                    'scroll-pr': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pb': [
                {
                    'scroll-pb': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */ 'scroll-pl': [
                {
                    'scroll-pl': scaleUnambiguousSpacing()
                }
            ],
            /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */ 'snap-align': [
                {
                    snap: [
                        'start',
                        'end',
                        'center',
                        'align-none'
                    ]
                }
            ],
            /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */ 'snap-stop': [
                {
                    snap: [
                        'normal',
                        'always'
                    ]
                }
            ],
            /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */ 'snap-type': [
                {
                    snap: [
                        'none',
                        'x',
                        'y',
                        'both'
                    ]
                }
            ],
            /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */ 'snap-strictness': [
                {
                    snap: [
                        'mandatory',
                        'proximity'
                    ]
                }
            ],
            /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */ touch: [
                {
                    touch: [
                        'auto',
                        'none',
                        'manipulation'
                    ]
                }
            ],
            /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */ 'touch-x': [
                {
                    'touch-pan': [
                        'x',
                        'left',
                        'right'
                    ]
                }
            ],
            /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */ 'touch-y': [
                {
                    'touch-pan': [
                        'y',
                        'up',
                        'down'
                    ]
                }
            ],
            /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */ 'touch-pz': [
                'touch-pinch-zoom'
            ],
            /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */ select: [
                {
                    select: [
                        'none',
                        'text',
                        'all',
                        'auto'
                    ]
                }
            ],
            /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */ 'will-change': [
                {
                    'will-change': [
                        'auto',
                        'scroll',
                        'contents',
                        'transform',
                        isArbitraryVariable,
                        isArbitraryValue
                    ]
                }
            ],
            // -----------
            // --- SVG ---
            // -----------
            /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */ fill: [
                {
                    fill: [
                        'none',
                        ...scaleColor()
                    ]
                }
            ],
            /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */ 'stroke-w': [
                {
                    stroke: [
                        isNumber,
                        isArbitraryVariableLength,
                        isArbitraryLength,
                        isArbitraryNumber
                    ]
                }
            ],
            /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */ stroke: [
                {
                    stroke: [
                        'none',
                        ...scaleColor()
                    ]
                }
            ],
            // ---------------------
            // --- Accessibility ---
            // ---------------------
            /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */ 'forced-color-adjust': [
                {
                    'forced-color-adjust': [
                        'auto',
                        'none'
                    ]
                }
            ]
        },
        conflictingClassGroups: {
            overflow: [
                'overflow-x',
                'overflow-y'
            ],
            overscroll: [
                'overscroll-x',
                'overscroll-y'
            ],
            inset: [
                'inset-x',
                'inset-y',
                'start',
                'end',
                'top',
                'right',
                'bottom',
                'left'
            ],
            'inset-x': [
                'right',
                'left'
            ],
            'inset-y': [
                'top',
                'bottom'
            ],
            flex: [
                'basis',
                'grow',
                'shrink'
            ],
            gap: [
                'gap-x',
                'gap-y'
            ],
            p: [
                'px',
                'py',
                'ps',
                'pe',
                'pt',
                'pr',
                'pb',
                'pl'
            ],
            px: [
                'pr',
                'pl'
            ],
            py: [
                'pt',
                'pb'
            ],
            m: [
                'mx',
                'my',
                'ms',
                'me',
                'mt',
                'mr',
                'mb',
                'ml'
            ],
            mx: [
                'mr',
                'ml'
            ],
            my: [
                'mt',
                'mb'
            ],
            size: [
                'w',
                'h'
            ],
            'font-size': [
                'leading'
            ],
            'fvn-normal': [
                'fvn-ordinal',
                'fvn-slashed-zero',
                'fvn-figure',
                'fvn-spacing',
                'fvn-fraction'
            ],
            'fvn-ordinal': [
                'fvn-normal'
            ],
            'fvn-slashed-zero': [
                'fvn-normal'
            ],
            'fvn-figure': [
                'fvn-normal'
            ],
            'fvn-spacing': [
                'fvn-normal'
            ],
            'fvn-fraction': [
                'fvn-normal'
            ],
            'line-clamp': [
                'display',
                'overflow'
            ],
            rounded: [
                'rounded-s',
                'rounded-e',
                'rounded-t',
                'rounded-r',
                'rounded-b',
                'rounded-l',
                'rounded-ss',
                'rounded-se',
                'rounded-ee',
                'rounded-es',
                'rounded-tl',
                'rounded-tr',
                'rounded-br',
                'rounded-bl'
            ],
            'rounded-s': [
                'rounded-ss',
                'rounded-es'
            ],
            'rounded-e': [
                'rounded-se',
                'rounded-ee'
            ],
            'rounded-t': [
                'rounded-tl',
                'rounded-tr'
            ],
            'rounded-r': [
                'rounded-tr',
                'rounded-br'
            ],
            'rounded-b': [
                'rounded-br',
                'rounded-bl'
            ],
            'rounded-l': [
                'rounded-tl',
                'rounded-bl'
            ],
            'border-spacing': [
                'border-spacing-x',
                'border-spacing-y'
            ],
            'border-w': [
                'border-w-x',
                'border-w-y',
                'border-w-s',
                'border-w-e',
                'border-w-t',
                'border-w-r',
                'border-w-b',
                'border-w-l'
            ],
            'border-w-x': [
                'border-w-r',
                'border-w-l'
            ],
            'border-w-y': [
                'border-w-t',
                'border-w-b'
            ],
            'border-color': [
                'border-color-x',
                'border-color-y',
                'border-color-s',
                'border-color-e',
                'border-color-t',
                'border-color-r',
                'border-color-b',
                'border-color-l'
            ],
            'border-color-x': [
                'border-color-r',
                'border-color-l'
            ],
            'border-color-y': [
                'border-color-t',
                'border-color-b'
            ],
            translate: [
                'translate-x',
                'translate-y',
                'translate-none'
            ],
            'translate-none': [
                'translate',
                'translate-x',
                'translate-y',
                'translate-z'
            ],
            'scroll-m': [
                'scroll-mx',
                'scroll-my',
                'scroll-ms',
                'scroll-me',
                'scroll-mt',
                'scroll-mr',
                'scroll-mb',
                'scroll-ml'
            ],
            'scroll-mx': [
                'scroll-mr',
                'scroll-ml'
            ],
            'scroll-my': [
                'scroll-mt',
                'scroll-mb'
            ],
            'scroll-p': [
                'scroll-px',
                'scroll-py',
                'scroll-ps',
                'scroll-pe',
                'scroll-pt',
                'scroll-pr',
                'scroll-pb',
                'scroll-pl'
            ],
            'scroll-px': [
                'scroll-pr',
                'scroll-pl'
            ],
            'scroll-py': [
                'scroll-pt',
                'scroll-pb'
            ],
            touch: [
                'touch-x',
                'touch-y',
                'touch-pz'
            ],
            'touch-x': [
                'touch'
            ],
            'touch-y': [
                'touch'
            ],
            'touch-pz': [
                'touch'
            ]
        },
        conflictingClassGroupModifiers: {
            'font-size': [
                'leading'
            ]
        },
        orderSensitiveModifiers: [
            '*',
            '**',
            'after',
            'backdrop',
            'before',
            'details-content',
            'file',
            'first-letter',
            'first-line',
            'marker',
            'placeholder',
            'selection'
        ]
    };
};
/**
 * @param baseConfig Config where other config will be merged into. This object will be mutated.
 * @param configExtension Partial config to merge into the `baseConfig`.
 */ const mergeConfigs = (baseConfig, { cacheSize, prefix, experimentalParseClassName, extend = {}, override = {} })=>{
    overrideProperty(baseConfig, 'cacheSize', cacheSize);
    overrideProperty(baseConfig, 'prefix', prefix);
    overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName);
    overrideConfigProperties(baseConfig.theme, override.theme);
    overrideConfigProperties(baseConfig.classGroups, override.classGroups);
    overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups);
    overrideConfigProperties(baseConfig.conflictingClassGroupModifiers, override.conflictingClassGroupModifiers);
    overrideProperty(baseConfig, 'orderSensitiveModifiers', override.orderSensitiveModifiers);
    mergeConfigProperties(baseConfig.theme, extend.theme);
    mergeConfigProperties(baseConfig.classGroups, extend.classGroups);
    mergeConfigProperties(baseConfig.conflictingClassGroups, extend.conflictingClassGroups);
    mergeConfigProperties(baseConfig.conflictingClassGroupModifiers, extend.conflictingClassGroupModifiers);
    mergeArrayProperties(baseConfig, extend, 'orderSensitiveModifiers');
    return baseConfig;
};
const overrideProperty = (baseObject, overrideKey, overrideValue)=>{
    if (overrideValue !== undefined) {
        baseObject[overrideKey] = overrideValue;
    }
};
const overrideConfigProperties = (baseObject, overrideObject)=>{
    if (overrideObject) {
        for(const key in overrideObject){
            overrideProperty(baseObject, key, overrideObject[key]);
        }
    }
};
const mergeConfigProperties = (baseObject, mergeObject)=>{
    if (mergeObject) {
        for(const key in mergeObject){
            mergeArrayProperties(baseObject, mergeObject, key);
        }
    }
};
const mergeArrayProperties = (baseObject, mergeObject, key)=>{
    const mergeValue = mergeObject[key];
    if (mergeValue !== undefined) {
        baseObject[key] = baseObject[key] ? baseObject[key].concat(mergeValue) : mergeValue;
    }
};
const extendTailwindMerge = (configExtension, ...createConfig)=>typeof configExtension === 'function' ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(()=>mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);
const twMerge = /*#__PURE__*/ createTailwindMerge(getDefaultConfig);
;
 //# sourceMappingURL=bundle-mjs.mjs.map
}}),
}]);

//# sourceMappingURL=node_modules_aac52b01._.js.map